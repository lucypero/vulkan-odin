//
// Vulkan wrapper generated from "https://raw.githubusercontent.com/KhronosGroup/Vulkan-Headers/master/include/vulkan/vulkan_core.h"
//
package vulkan

import "core:c"

// Procedure Types

when ODIN_OS == "windows" {
	ProcAllocationFunction                                              :: #type proc"stdcall"(pUserData: rawptr, size: int, alignment: int, allocationScope: SystemAllocationScope) -> rawptr;
	ProcFreeFunction                                                    :: #type proc"stdcall"(pUserData: rawptr, pMemory: rawptr);
	ProcInternalAllocationNotification                                  :: #type proc"stdcall"(pUserData: rawptr, size: int, allocationType: InternalAllocationType, allocationScope: SystemAllocationScope);
	ProcInternalFreeNotification                                        :: #type proc"stdcall"(pUserData: rawptr, size: int, allocationType: InternalAllocationType, allocationScope: SystemAllocationScope);
	ProcReallocationFunction                                            :: #type proc"stdcall"(pUserData: rawptr, pOriginal: rawptr, size: int, alignment: int, allocationScope: SystemAllocationScope) -> rawptr;
	ProcVoidFunction                                                    :: #type proc"stdcall"();
	ProcCreateInstance                                                  :: #type proc"stdcall"(pCreateInfo: ^InstanceCreateInfo, pAllocator: ^AllocationCallbacks, pInstance: ^Instance) -> Result;
	ProcDestroyInstance                                                 :: #type proc"stdcall"(instance: Instance, pAllocator: ^AllocationCallbacks);
	ProcEnumeratePhysicalDevices                                        :: #type proc"stdcall"(instance: Instance, pPhysicalDeviceCount: ^u32, pPhysicalDevices: ^PhysicalDevice) -> Result;
	ProcGetPhysicalDeviceFeatures                                       :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pFeatures: ^PhysicalDeviceFeatures);
	ProcGetPhysicalDeviceFormatProperties                               :: #type proc"stdcall"(physicalDevice: PhysicalDevice, format: Format, pFormatProperties: ^FormatProperties);
	ProcGetPhysicalDeviceImageFormatProperties                          :: #type proc"stdcall"(physicalDevice: PhysicalDevice, format: Format, type: ImageType, tiling: ImageTiling, usage: ImageUsageFlags, flags: ImageCreateFlags, pImageFormatProperties: ^ImageFormatProperties) -> Result;
	ProcGetPhysicalDeviceProperties                                     :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pProperties: ^PhysicalDeviceProperties);
	ProcGetPhysicalDeviceQueueFamilyProperties                          :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pQueueFamilyPropertyCount: ^u32, pQueueFamilyProperties: ^QueueFamilyProperties);
	ProcGetPhysicalDeviceMemoryProperties                               :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pMemoryProperties: ^PhysicalDeviceMemoryProperties);
	ProcGetInstanceProcAddr                                             :: #type proc"stdcall"(instance: Instance, pName: cstring) -> ProcVoidFunction;
	ProcGetDeviceProcAddr                                               :: #type proc"stdcall"(device: Device, pName: cstring) -> ProcVoidFunction;
	ProcCreateDevice                                                    :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pCreateInfo: ^DeviceCreateInfo, pAllocator: ^AllocationCallbacks, pDevice: ^Device) -> Result;
	ProcDestroyDevice                                                   :: #type proc"stdcall"(device: Device, pAllocator: ^AllocationCallbacks);
	ProcEnumerateInstanceExtensionProperties                            :: #type proc"stdcall"(pLayerName: cstring, pPropertyCount: ^u32, pProperties: ^ExtensionProperties) -> Result;
	ProcEnumerateDeviceExtensionProperties                              :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pLayerName: cstring, pPropertyCount: ^u32, pProperties: ^ExtensionProperties) -> Result;
	ProcEnumerateInstanceLayerProperties                                :: #type proc"stdcall"(pPropertyCount: ^u32, pProperties: ^LayerProperties) -> Result;
	ProcEnumerateDeviceLayerProperties                                  :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pPropertyCount: ^u32, pProperties: ^LayerProperties) -> Result;
	ProcGetDeviceQueue                                                  :: #type proc"stdcall"(device: Device, queueFamilyIndex: u32, queueIndex: u32, pQueue: ^Queue);
	ProcQueueSubmit                                                     :: #type proc"stdcall"(queue: Queue, submitCount: u32, pSubmits: ^SubmitInfo, fence: Fence) -> Result;
	ProcQueueWaitIdle                                                   :: #type proc"stdcall"(queue: Queue) -> Result;
	ProcDeviceWaitIdle                                                  :: #type proc"stdcall"(device: Device) -> Result;
	ProcAllocateMemory                                                  :: #type proc"stdcall"(device: Device, pAllocateInfo: ^MemoryAllocateInfo, pAllocator: ^AllocationCallbacks, pMemory: ^DeviceMemory) -> Result;
	ProcFreeMemory                                                      :: #type proc"stdcall"(device: Device, memory: DeviceMemory, pAllocator: ^AllocationCallbacks);
	ProcMapMemory                                                       :: #type proc"stdcall"(device: Device, memory: DeviceMemory, offset: DeviceSize, size: DeviceSize, flags: MemoryMapFlags, ppData: ^rawptr) -> Result;
	ProcUnmapMemory                                                     :: #type proc"stdcall"(device: Device, memory: DeviceMemory);
	ProcFlushMappedMemoryRanges                                         :: #type proc"stdcall"(device: Device, memoryRangeCount: u32, pMemoryRanges: ^MappedMemoryRange) -> Result;
	ProcInvalidateMappedMemoryRanges                                    :: #type proc"stdcall"(device: Device, memoryRangeCount: u32, pMemoryRanges: ^MappedMemoryRange) -> Result;
	ProcGetDeviceMemoryCommitment                                       :: #type proc"stdcall"(device: Device, memory: DeviceMemory, pCommittedMemoryInBytes: ^DeviceSize);
	ProcBindBufferMemory                                                :: #type proc"stdcall"(device: Device, buffer: Buffer, memory: DeviceMemory, memoryOffset: DeviceSize) -> Result;
	ProcBindImageMemory                                                 :: #type proc"stdcall"(device: Device, image: Image, memory: DeviceMemory, memoryOffset: DeviceSize) -> Result;
	ProcGetBufferMemoryRequirements                                     :: #type proc"stdcall"(device: Device, buffer: Buffer, pMemoryRequirements: ^MemoryRequirements);
	ProcGetImageMemoryRequirements                                      :: #type proc"stdcall"(device: Device, image: Image, pMemoryRequirements: ^MemoryRequirements);
	ProcGetImageSparseMemoryRequirements                                :: #type proc"stdcall"(device: Device, image: Image, pSparseMemoryRequirementCount: ^u32, pSparseMemoryRequirements: ^SparseImageMemoryRequirements);
	ProcGetPhysicalDeviceSparseImageFormatProperties                    :: #type proc"stdcall"(physicalDevice: PhysicalDevice, format: Format, type: ImageType, samples: SampleCountFlags, usage: ImageUsageFlags, tiling: ImageTiling, pPropertyCount: ^u32, pProperties: ^SparseImageFormatProperties);
	ProcQueueBindSparse                                                 :: #type proc"stdcall"(queue: Queue, bindInfoCount: u32, pBindInfo: ^BindSparseInfo, fence: Fence) -> Result;
	ProcCreateFence                                                     :: #type proc"stdcall"(device: Device, pCreateInfo: ^FenceCreateInfo, pAllocator: ^AllocationCallbacks, pFence: ^Fence) -> Result;
	ProcDestroyFence                                                    :: #type proc"stdcall"(device: Device, fence: Fence, pAllocator: ^AllocationCallbacks);
	ProcResetFences                                                     :: #type proc"stdcall"(device: Device, fenceCount: u32, pFences: ^Fence) -> Result;
	ProcGetFenceStatus                                                  :: #type proc"stdcall"(device: Device, fence: Fence) -> Result;
	ProcWaitForFences                                                   :: #type proc"stdcall"(device: Device, fenceCount: u32, pFences: ^Fence, waitAll: b32, timeout: u64) -> Result;
	ProcCreateSemaphore                                                 :: #type proc"stdcall"(device: Device, pCreateInfo: ^SemaphoreCreateInfo, pAllocator: ^AllocationCallbacks, pSemaphore: ^Semaphore) -> Result;
	ProcDestroySemaphore                                                :: #type proc"stdcall"(device: Device, semaphore: Semaphore, pAllocator: ^AllocationCallbacks);
	ProcCreateEvent                                                     :: #type proc"stdcall"(device: Device, pCreateInfo: ^EventCreateInfo, pAllocator: ^AllocationCallbacks, pEvent: ^Event) -> Result;
	ProcDestroyEvent                                                    :: #type proc"stdcall"(device: Device, event: Event, pAllocator: ^AllocationCallbacks);
	ProcGetEventStatus                                                  :: #type proc"stdcall"(device: Device, event: Event) -> Result;
	ProcSetEvent                                                        :: #type proc"stdcall"(device: Device, event: Event) -> Result;
	ProcResetEvent                                                      :: #type proc"stdcall"(device: Device, event: Event) -> Result;
	ProcCreateQueryPool                                                 :: #type proc"stdcall"(device: Device, pCreateInfo: ^QueryPoolCreateInfo, pAllocator: ^AllocationCallbacks, pQueryPool: ^QueryPool) -> Result;
	ProcDestroyQueryPool                                                :: #type proc"stdcall"(device: Device, queryPool: QueryPool, pAllocator: ^AllocationCallbacks);
	ProcGetQueryPoolResults                                             :: #type proc"stdcall"(device: Device, queryPool: QueryPool, firstQuery: u32, queryCount: u32, dataSize: int, pData: rawptr, stride: DeviceSize, flags: QueryResultFlags) -> Result;
	ProcCreateBuffer                                                    :: #type proc"stdcall"(device: Device, pCreateInfo: ^BufferCreateInfo, pAllocator: ^AllocationCallbacks, pBuffer: ^Buffer) -> Result;
	ProcDestroyBuffer                                                   :: #type proc"stdcall"(device: Device, buffer: Buffer, pAllocator: ^AllocationCallbacks);
	ProcCreateBufferView                                                :: #type proc"stdcall"(device: Device, pCreateInfo: ^BufferViewCreateInfo, pAllocator: ^AllocationCallbacks, pView: ^BufferView) -> Result;
	ProcDestroyBufferView                                               :: #type proc"stdcall"(device: Device, bufferView: BufferView, pAllocator: ^AllocationCallbacks);
	ProcCreateImage                                                     :: #type proc"stdcall"(device: Device, pCreateInfo: ^ImageCreateInfo, pAllocator: ^AllocationCallbacks, pImage: ^Image) -> Result;
	ProcDestroyImage                                                    :: #type proc"stdcall"(device: Device, image: Image, pAllocator: ^AllocationCallbacks);
	ProcGetImageSubresourceLayout                                       :: #type proc"stdcall"(device: Device, image: Image, pSubresource: ^ImageSubresource, pLayout: ^SubresourceLayout);
	ProcCreateImageView                                                 :: #type proc"stdcall"(device: Device, pCreateInfo: ^ImageViewCreateInfo, pAllocator: ^AllocationCallbacks, pView: ^ImageView) -> Result;
	ProcDestroyImageView                                                :: #type proc"stdcall"(device: Device, imageView: ImageView, pAllocator: ^AllocationCallbacks);
	ProcCreateShaderModule                                              :: #type proc"stdcall"(device: Device, pCreateInfo: ^ShaderModuleCreateInfo, pAllocator: ^AllocationCallbacks, pShaderModule: ^ShaderModule) -> Result;
	ProcDestroyShaderModule                                             :: #type proc"stdcall"(device: Device, shaderModule: ShaderModule, pAllocator: ^AllocationCallbacks);
	ProcCreatePipelineCache                                             :: #type proc"stdcall"(device: Device, pCreateInfo: ^PipelineCacheCreateInfo, pAllocator: ^AllocationCallbacks, pPipelineCache: ^PipelineCache) -> Result;
	ProcDestroyPipelineCache                                            :: #type proc"stdcall"(device: Device, pipelineCache: PipelineCache, pAllocator: ^AllocationCallbacks);
	ProcGetPipelineCacheData                                            :: #type proc"stdcall"(device: Device, pipelineCache: PipelineCache, pDataSize: ^int, pData: rawptr) -> Result;
	ProcMergePipelineCaches                                             :: #type proc"stdcall"(device: Device, dstCache: PipelineCache, srcCacheCount: u32, pSrcCaches: ^PipelineCache) -> Result;
	ProcCreateGraphicsPipelines                                         :: #type proc"stdcall"(device: Device, pipelineCache: PipelineCache, createInfoCount: u32, pCreateInfos: ^GraphicsPipelineCreateInfo, pAllocator: ^AllocationCallbacks, pPipelines: ^Pipeline) -> Result;
	ProcCreateComputePipelines                                          :: #type proc"stdcall"(device: Device, pipelineCache: PipelineCache, createInfoCount: u32, pCreateInfos: ^ComputePipelineCreateInfo, pAllocator: ^AllocationCallbacks, pPipelines: ^Pipeline) -> Result;
	ProcDestroyPipeline                                                 :: #type proc"stdcall"(device: Device, pipeline: Pipeline, pAllocator: ^AllocationCallbacks);
	ProcCreatePipelineLayout                                            :: #type proc"stdcall"(device: Device, pCreateInfo: ^PipelineLayoutCreateInfo, pAllocator: ^AllocationCallbacks, pPipelineLayout: ^PipelineLayout) -> Result;
	ProcDestroyPipelineLayout                                           :: #type proc"stdcall"(device: Device, pipelineLayout: PipelineLayout, pAllocator: ^AllocationCallbacks);
	ProcCreateSampler                                                   :: #type proc"stdcall"(device: Device, pCreateInfo: ^SamplerCreateInfo, pAllocator: ^AllocationCallbacks, pSampler: ^Sampler) -> Result;
	ProcDestroySampler                                                  :: #type proc"stdcall"(device: Device, sampler: Sampler, pAllocator: ^AllocationCallbacks);
	ProcCreateDescriptorSetLayout                                       :: #type proc"stdcall"(device: Device, pCreateInfo: ^DescriptorSetLayoutCreateInfo, pAllocator: ^AllocationCallbacks, pSetLayout: ^DescriptorSetLayout) -> Result;
	ProcDestroyDescriptorSetLayout                                      :: #type proc"stdcall"(device: Device, descriptorSetLayout: DescriptorSetLayout, pAllocator: ^AllocationCallbacks);
	ProcCreateDescriptorPool                                            :: #type proc"stdcall"(device: Device, pCreateInfo: ^DescriptorPoolCreateInfo, pAllocator: ^AllocationCallbacks, pDescriptorPool: ^DescriptorPool) -> Result;
	ProcDestroyDescriptorPool                                           :: #type proc"stdcall"(device: Device, descriptorPool: DescriptorPool, pAllocator: ^AllocationCallbacks);
	ProcResetDescriptorPool                                             :: #type proc"stdcall"(device: Device, descriptorPool: DescriptorPool, flags: DescriptorPoolResetFlags) -> Result;
	ProcAllocateDescriptorSets                                          :: #type proc"stdcall"(device: Device, pAllocateInfo: ^DescriptorSetAllocateInfo, pDescriptorSets: ^DescriptorSet) -> Result;
	ProcFreeDescriptorSets                                              :: #type proc"stdcall"(device: Device, descriptorPool: DescriptorPool, descriptorSetCount: u32, pDescriptorSets: ^DescriptorSet) -> Result;
	ProcUpdateDescriptorSets                                            :: #type proc"stdcall"(device: Device, descriptorWriteCount: u32, pDescriptorWrites: ^WriteDescriptorSet, descriptorCopyCount: u32, pDescriptorCopies: ^CopyDescriptorSet);
	ProcCreateFramebuffer                                               :: #type proc"stdcall"(device: Device, pCreateInfo: ^FramebufferCreateInfo, pAllocator: ^AllocationCallbacks, pFramebuffer: ^Framebuffer) -> Result;
	ProcDestroyFramebuffer                                              :: #type proc"stdcall"(device: Device, framebuffer: Framebuffer, pAllocator: ^AllocationCallbacks);
	ProcCreateRenderPass                                                :: #type proc"stdcall"(device: Device, pCreateInfo: ^RenderPassCreateInfo, pAllocator: ^AllocationCallbacks, pRenderPass: ^RenderPass) -> Result;
	ProcDestroyRenderPass                                               :: #type proc"stdcall"(device: Device, renderPass: RenderPass, pAllocator: ^AllocationCallbacks);
	ProcGetRenderAreaGranularity                                        :: #type proc"stdcall"(device: Device, renderPass: RenderPass, pGranularity: ^Extent2D);
	ProcCreateCommandPool                                               :: #type proc"stdcall"(device: Device, pCreateInfo: ^CommandPoolCreateInfo, pAllocator: ^AllocationCallbacks, pCommandPool: ^CommandPool) -> Result;
	ProcDestroyCommandPool                                              :: #type proc"stdcall"(device: Device, commandPool: CommandPool, pAllocator: ^AllocationCallbacks);
	ProcResetCommandPool                                                :: #type proc"stdcall"(device: Device, commandPool: CommandPool, flags: CommandPoolResetFlags) -> Result;
	ProcAllocateCommandBuffers                                          :: #type proc"stdcall"(device: Device, pAllocateInfo: ^CommandBufferAllocateInfo, pCommandBuffers: ^CommandBuffer) -> Result;
	ProcFreeCommandBuffers                                              :: #type proc"stdcall"(device: Device, commandPool: CommandPool, commandBufferCount: u32, pCommandBuffers: ^CommandBuffer);
	ProcBeginCommandBuffer                                              :: #type proc"stdcall"(commandBuffer: CommandBuffer, pBeginInfo: ^CommandBufferBeginInfo) -> Result;
	ProcEndCommandBuffer                                                :: #type proc"stdcall"(commandBuffer: CommandBuffer) -> Result;
	ProcResetCommandBuffer                                              :: #type proc"stdcall"(commandBuffer: CommandBuffer, flags: CommandBufferResetFlags) -> Result;
	ProcCmdBindPipeline                                                 :: #type proc"stdcall"(commandBuffer: CommandBuffer, pipelineBindPoint: PipelineBindPoint, pipeline: Pipeline);
	ProcCmdSetViewport                                                  :: #type proc"stdcall"(commandBuffer: CommandBuffer, firstViewport: u32, viewportCount: u32, pViewports: ^Viewport);
	ProcCmdSetScissor                                                   :: #type proc"stdcall"(commandBuffer: CommandBuffer, firstScissor: u32, scissorCount: u32, pScissors: ^Rect2D);
	ProcCmdSetLineWidth                                                 :: #type proc"stdcall"(commandBuffer: CommandBuffer, lineWidth: f32);
	ProcCmdSetDepthBias                                                 :: #type proc"stdcall"(commandBuffer: CommandBuffer, depthBiasConstantFactor: f32, depthBiasClamp: f32, depthBiasSlopeFactor: f32);
	ProcCmdSetBlendConstants                                            :: #type proc"stdcall"(commandBuffer: CommandBuffer);
	ProcCmdSetDepthBounds                                               :: #type proc"stdcall"(commandBuffer: CommandBuffer, minDepthBounds: f32, maxDepthBounds: f32);
	ProcCmdSetStencilCompareMask                                        :: #type proc"stdcall"(commandBuffer: CommandBuffer, faceMask: StencilFaceFlags, compareMask: u32);
	ProcCmdSetStencilWriteMask                                          :: #type proc"stdcall"(commandBuffer: CommandBuffer, faceMask: StencilFaceFlags, writeMask: u32);
	ProcCmdSetStencilReference                                          :: #type proc"stdcall"(commandBuffer: CommandBuffer, faceMask: StencilFaceFlags, reference: u32);
	ProcCmdBindDescriptorSets                                           :: #type proc"stdcall"(commandBuffer: CommandBuffer, pipelineBindPoint: PipelineBindPoint, layout: PipelineLayout, firstSet: u32, descriptorSetCount: u32, pDescriptorSets: ^DescriptorSet, dynamicOffsetCount: u32, pDynamicOffsets: ^u32);
	ProcCmdBindIndexBuffer                                              :: #type proc"stdcall"(commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, indexType: IndexType);
	ProcCmdBindVertexBuffers                                            :: #type proc"stdcall"(commandBuffer: CommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: ^Buffer, pOffsets: ^DeviceSize);
	ProcCmdDraw                                                         :: #type proc"stdcall"(commandBuffer: CommandBuffer, vertexCount: u32, instanceCount: u32, firstVertex: u32, firstInstance: u32);
	ProcCmdDrawIndexed                                                  :: #type proc"stdcall"(commandBuffer: CommandBuffer, indexCount: u32, instanceCount: u32, firstIndex: u32, vertexOffset: i32, firstInstance: u32);
	ProcCmdDrawIndirect                                                 :: #type proc"stdcall"(commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, drawCount: u32, stride: u32);
	ProcCmdDrawIndexedIndirect                                          :: #type proc"stdcall"(commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, drawCount: u32, stride: u32);
	ProcCmdDispatch                                                     :: #type proc"stdcall"(commandBuffer: CommandBuffer, groupCountX: u32, groupCountY: u32, groupCountZ: u32);
	ProcCmdDispatchIndirect                                             :: #type proc"stdcall"(commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize);
	ProcCmdCopyBuffer                                                   :: #type proc"stdcall"(commandBuffer: CommandBuffer, srcBuffer: Buffer, dstBuffer: Buffer, regionCount: u32, pRegions: ^BufferCopy);
	ProcCmdCopyImage                                                    :: #type proc"stdcall"(commandBuffer: CommandBuffer, srcImage: Image, srcImageLayout: ImageLayout, dstImage: Image, dstImageLayout: ImageLayout, regionCount: u32, pRegions: ^ImageCopy);
	ProcCmdBlitImage                                                    :: #type proc"stdcall"(commandBuffer: CommandBuffer, srcImage: Image, srcImageLayout: ImageLayout, dstImage: Image, dstImageLayout: ImageLayout, regionCount: u32, pRegions: ^ImageBlit, filter: Filter);
	ProcCmdCopyBufferToImage                                            :: #type proc"stdcall"(commandBuffer: CommandBuffer, srcBuffer: Buffer, dstImage: Image, dstImageLayout: ImageLayout, regionCount: u32, pRegions: ^BufferImageCopy);
	ProcCmdCopyImageToBuffer                                            :: #type proc"stdcall"(commandBuffer: CommandBuffer, srcImage: Image, srcImageLayout: ImageLayout, dstBuffer: Buffer, regionCount: u32, pRegions: ^BufferImageCopy);
	ProcCmdUpdateBuffer                                                 :: #type proc"stdcall"(commandBuffer: CommandBuffer, dstBuffer: Buffer, dstOffset: DeviceSize, dataSize: DeviceSize, pData: rawptr);
	ProcCmdFillBuffer                                                   :: #type proc"stdcall"(commandBuffer: CommandBuffer, dstBuffer: Buffer, dstOffset: DeviceSize, size: DeviceSize, data: u32);
	ProcCmdClearColorImage                                              :: #type proc"stdcall"(commandBuffer: CommandBuffer, image: Image, imageLayout: ImageLayout, pColor: ^ClearColorValue, rangeCount: u32, pRanges: ^ImageSubresourceRange);
	ProcCmdClearDepthStencilImage                                       :: #type proc"stdcall"(commandBuffer: CommandBuffer, image: Image, imageLayout: ImageLayout, pDepthStencil: ^ClearDepthStencilValue, rangeCount: u32, pRanges: ^ImageSubresourceRange);
	ProcCmdClearAttachments                                             :: #type proc"stdcall"(commandBuffer: CommandBuffer, attachmentCount: u32, pAttachments: ^ClearAttachment, rectCount: u32, pRects: ^ClearRect);
	ProcCmdResolveImage                                                 :: #type proc"stdcall"(commandBuffer: CommandBuffer, srcImage: Image, srcImageLayout: ImageLayout, dstImage: Image, dstImageLayout: ImageLayout, regionCount: u32, pRegions: ^ImageResolve);
	ProcCmdSetEvent                                                     :: #type proc"stdcall"(commandBuffer: CommandBuffer, event: Event, stageMask: PipelineStageFlags);
	ProcCmdResetEvent                                                   :: #type proc"stdcall"(commandBuffer: CommandBuffer, event: Event, stageMask: PipelineStageFlags);
	ProcCmdWaitEvents                                                   :: #type proc"stdcall"(commandBuffer: CommandBuffer, eventCount: u32, pEvents: ^Event, srcStageMask: PipelineStageFlags, dstStageMask: PipelineStageFlags, memoryBarrierCount: u32, pMemoryBarriers: ^MemoryBarrier, bufferMemoryBarrierCount: u32, pBufferMemoryBarriers: ^BufferMemoryBarrier, imageMemoryBarrierCount: u32, pImageMemoryBarriers: ^ImageMemoryBarrier);
	ProcCmdPipelineBarrier                                              :: #type proc"stdcall"(commandBuffer: CommandBuffer, srcStageMask: PipelineStageFlags, dstStageMask: PipelineStageFlags, dependencyFlags: DependencyFlags, memoryBarrierCount: u32, pMemoryBarriers: ^MemoryBarrier, bufferMemoryBarrierCount: u32, pBufferMemoryBarriers: ^BufferMemoryBarrier, imageMemoryBarrierCount: u32, pImageMemoryBarriers: ^ImageMemoryBarrier);
	ProcCmdBeginQuery                                                   :: #type proc"stdcall"(commandBuffer: CommandBuffer, queryPool: QueryPool, query: u32, flags: QueryControlFlags);
	ProcCmdEndQuery                                                     :: #type proc"stdcall"(commandBuffer: CommandBuffer, queryPool: QueryPool, query: u32);
	ProcCmdResetQueryPool                                               :: #type proc"stdcall"(commandBuffer: CommandBuffer, queryPool: QueryPool, firstQuery: u32, queryCount: u32);
	ProcCmdWriteTimestamp                                               :: #type proc"stdcall"(commandBuffer: CommandBuffer, pipelineStage: PipelineStageFlags, queryPool: QueryPool, query: u32);
	ProcCmdCopyQueryPoolResults                                         :: #type proc"stdcall"(commandBuffer: CommandBuffer, queryPool: QueryPool, firstQuery: u32, queryCount: u32, dstBuffer: Buffer, dstOffset: DeviceSize, stride: DeviceSize, flags: QueryResultFlags);
	ProcCmdPushConstants                                                :: #type proc"stdcall"(commandBuffer: CommandBuffer, layout: PipelineLayout, stageFlags: ShaderStageFlags, offset: u32, size: u32, pValues: rawptr);
	ProcCmdBeginRenderPass                                              :: #type proc"stdcall"(commandBuffer: CommandBuffer, pRenderPassBegin: ^RenderPassBeginInfo, contents: SubpassContents);
	ProcCmdNextSubpass                                                  :: #type proc"stdcall"(commandBuffer: CommandBuffer, contents: SubpassContents);
	ProcCmdEndRenderPass                                                :: #type proc"stdcall"(commandBuffer: CommandBuffer);
	ProcCmdExecuteCommands                                              :: #type proc"stdcall"(commandBuffer: CommandBuffer, commandBufferCount: u32, pCommandBuffers: ^CommandBuffer);
	ProcEnumerateInstanceVersion                                        :: #type proc"stdcall"(pApiVersion: ^u32) -> Result;
	ProcBindBufferMemory2                                               :: #type proc"stdcall"(device: Device, bindInfoCount: u32, pBindInfos: ^BindBufferMemoryInfo) -> Result;
	ProcBindImageMemory2                                                :: #type proc"stdcall"(device: Device, bindInfoCount: u32, pBindInfos: ^BindImageMemoryInfo) -> Result;
	ProcGetDeviceGroupPeerMemoryFeatures                                :: #type proc"stdcall"(device: Device, heapIndex: u32, localDeviceIndex: u32, remoteDeviceIndex: u32, pPeerMemoryFeatures: ^PeerMemoryFeatureFlags);
	ProcCmdSetDeviceMask                                                :: #type proc"stdcall"(commandBuffer: CommandBuffer, deviceMask: u32);
	ProcCmdDispatchBase                                                 :: #type proc"stdcall"(commandBuffer: CommandBuffer, baseGroupX: u32, baseGroupY: u32, baseGroupZ: u32, groupCountX: u32, groupCountY: u32, groupCountZ: u32);
	ProcEnumeratePhysicalDeviceGroups                                   :: #type proc"stdcall"(instance: Instance, pPhysicalDeviceGroupCount: ^u32, pPhysicalDeviceGroupProperties: ^PhysicalDeviceGroupProperties) -> Result;
	ProcGetImageMemoryRequirements2                                     :: #type proc"stdcall"(device: Device, pInfo: ^ImageMemoryRequirementsInfo2, pMemoryRequirements: ^MemoryRequirements2);
	ProcGetBufferMemoryRequirements2                                    :: #type proc"stdcall"(device: Device, pInfo: ^BufferMemoryRequirementsInfo2, pMemoryRequirements: ^MemoryRequirements2);
	ProcGetImageSparseMemoryRequirements2                               :: #type proc"stdcall"(device: Device, pInfo: ^ImageSparseMemoryRequirementsInfo2, pSparseMemoryRequirementCount: ^u32, pSparseMemoryRequirements: ^SparseImageMemoryRequirements2);
	ProcGetPhysicalDeviceFeatures2                                      :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pFeatures: ^PhysicalDeviceFeatures2);
	ProcGetPhysicalDeviceProperties2                                    :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pProperties: ^PhysicalDeviceProperties2);
	ProcGetPhysicalDeviceFormatProperties2                              :: #type proc"stdcall"(physicalDevice: PhysicalDevice, format: Format, pFormatProperties: ^FormatProperties2);
	ProcGetPhysicalDeviceImageFormatProperties2                         :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pImageFormatInfo: ^PhysicalDeviceImageFormatInfo2, pImageFormatProperties: ^ImageFormatProperties2) -> Result;
	ProcGetPhysicalDeviceQueueFamilyProperties2                         :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pQueueFamilyPropertyCount: ^u32, pQueueFamilyProperties: ^QueueFamilyProperties2);
	ProcGetPhysicalDeviceMemoryProperties2                              :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pMemoryProperties: ^PhysicalDeviceMemoryProperties2);
	ProcGetPhysicalDeviceSparseImageFormatProperties2                   :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pFormatInfo: ^PhysicalDeviceSparseImageFormatInfo2, pPropertyCount: ^u32, pProperties: ^SparseImageFormatProperties2);
	ProcTrimCommandPool                                                 :: #type proc"stdcall"(device: Device, commandPool: CommandPool, flags: CommandPoolTrimFlags);
	ProcGetDeviceQueue2                                                 :: #type proc"stdcall"(device: Device, pQueueInfo: ^DeviceQueueInfo2, pQueue: ^Queue);
	ProcCreateSamplerYcbcrConversion                                    :: #type proc"stdcall"(device: Device, pCreateInfo: ^SamplerYcbcrConversionCreateInfo, pAllocator: ^AllocationCallbacks, pYcbcrConversion: ^SamplerYcbcrConversion) -> Result;
	ProcDestroySamplerYcbcrConversion                                   :: #type proc"stdcall"(device: Device, ycbcrConversion: SamplerYcbcrConversion, pAllocator: ^AllocationCallbacks);
	ProcCreateDescriptorUpdateTemplate                                  :: #type proc"stdcall"(device: Device, pCreateInfo: ^DescriptorUpdateTemplateCreateInfo, pAllocator: ^AllocationCallbacks, pDescriptorUpdateTemplate: ^DescriptorUpdateTemplate) -> Result;
	ProcDestroyDescriptorUpdateTemplate                                 :: #type proc"stdcall"(device: Device, descriptorUpdateTemplate: DescriptorUpdateTemplate, pAllocator: ^AllocationCallbacks);
	ProcUpdateDescriptorSetWithTemplate                                 :: #type proc"stdcall"(device: Device, descriptorSet: DescriptorSet, descriptorUpdateTemplate: DescriptorUpdateTemplate, pData: rawptr);
	ProcGetPhysicalDeviceExternalBufferProperties                       :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pExternalBufferInfo: ^PhysicalDeviceExternalBufferInfo, pExternalBufferProperties: ^ExternalBufferProperties);
	ProcGetPhysicalDeviceExternalFenceProperties                        :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pExternalFenceInfo: ^PhysicalDeviceExternalFenceInfo, pExternalFenceProperties: ^ExternalFenceProperties);
	ProcGetPhysicalDeviceExternalSemaphoreProperties                    :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pExternalSemaphoreInfo: ^PhysicalDeviceExternalSemaphoreInfo, pExternalSemaphoreProperties: ^ExternalSemaphoreProperties);
	ProcGetDescriptorSetLayoutSupport                                   :: #type proc"stdcall"(device: Device, pCreateInfo: ^DescriptorSetLayoutCreateInfo, pSupport: ^DescriptorSetLayoutSupport);
	ProcCmdDrawIndirectCount                                            :: #type proc"stdcall"(commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: u32, stride: u32);
	ProcCmdDrawIndexedIndirectCount                                     :: #type proc"stdcall"(commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: u32, stride: u32);
	ProcCreateRenderPass2                                               :: #type proc"stdcall"(device: Device, pCreateInfo: ^RenderPassCreateInfo2, pAllocator: ^AllocationCallbacks, pRenderPass: ^RenderPass) -> Result;
	ProcCmdBeginRenderPass2                                             :: #type proc"stdcall"(commandBuffer: CommandBuffer, pRenderPassBegin: ^RenderPassBeginInfo, pSubpassBeginInfo: ^SubpassBeginInfo);
	ProcCmdNextSubpass2                                                 :: #type proc"stdcall"(commandBuffer: CommandBuffer, pSubpassBeginInfo: ^SubpassBeginInfo, pSubpassEndInfo: ^SubpassEndInfo);
	ProcCmdEndRenderPass2                                               :: #type proc"stdcall"(commandBuffer: CommandBuffer, pSubpassEndInfo: ^SubpassEndInfo);
	ProcResetQueryPool                                                  :: #type proc"stdcall"(device: Device, queryPool: QueryPool, firstQuery: u32, queryCount: u32);
	ProcGetSemaphoreCounterValue                                        :: #type proc"stdcall"(device: Device, semaphore: Semaphore, pValue: ^u64) -> Result;
	ProcWaitSemaphores                                                  :: #type proc"stdcall"(device: Device, pWaitInfo: ^SemaphoreWaitInfo, timeout: u64) -> Result;
	ProcSignalSemaphore                                                 :: #type proc"stdcall"(device: Device, pSignalInfo: ^SemaphoreSignalInfo) -> Result;
	ProcGetBufferDeviceAddress                                          :: #type proc"stdcall"(device: Device, pInfo: ^BufferDeviceAddressInfo) -> DeviceAddress;
	ProcGetBufferOpaqueCaptureAddress                                   :: #type proc"stdcall"(device: Device, pInfo: ^BufferDeviceAddressInfo) -> u64;
	ProcGetDeviceMemoryOpaqueCaptureAddress                             :: #type proc"stdcall"(device: Device, pInfo: ^DeviceMemoryOpaqueCaptureAddressInfo) -> u64;
	ProcDestroySurfaceKHR                                               :: #type proc"stdcall"(instance: Instance, surface: SurfaceKHR, pAllocator: ^AllocationCallbacks);
	ProcGetPhysicalDeviceSurfaceSupportKHR                              :: #type proc"stdcall"(physicalDevice: PhysicalDevice, queueFamilyIndex: u32, surface: SurfaceKHR, pSupported: ^b32) -> Result;
	ProcGetPhysicalDeviceSurfaceCapabilitiesKHR                         :: #type proc"stdcall"(physicalDevice: PhysicalDevice, surface: SurfaceKHR, pSurfaceCapabilities: ^SurfaceCapabilitiesKHR) -> Result;
	ProcGetPhysicalDeviceSurfaceFormatsKHR                              :: #type proc"stdcall"(physicalDevice: PhysicalDevice, surface: SurfaceKHR, pSurfaceFormatCount: ^u32, pSurfaceFormats: ^SurfaceFormatKHR) -> Result;
	ProcGetPhysicalDeviceSurfacePresentModesKHR                         :: #type proc"stdcall"(physicalDevice: PhysicalDevice, surface: SurfaceKHR, pPresentModeCount: ^u32, pPresentModes: ^PresentModeKHR) -> Result;
	ProcCreateSwapchainKHR                                              :: #type proc"stdcall"(device: Device, pCreateInfo: ^SwapchainCreateInfoKHR, pAllocator: ^AllocationCallbacks, pSwapchain: ^SwapchainKHR) -> Result;
	ProcDestroySwapchainKHR                                             :: #type proc"stdcall"(device: Device, swapchain: SwapchainKHR, pAllocator: ^AllocationCallbacks);
	ProcGetSwapchainImagesKHR                                           :: #type proc"stdcall"(device: Device, swapchain: SwapchainKHR, pSwapchainImageCount: ^u32, pSwapchainImages: ^Image) -> Result;
	ProcAcquireNextImageKHR                                             :: #type proc"stdcall"(device: Device, swapchain: SwapchainKHR, timeout: u64, semaphore: Semaphore, fence: Fence, pImageIndex: ^u32) -> Result;
	ProcQueuePresentKHR                                                 :: #type proc"stdcall"(queue: Queue, pPresentInfo: ^PresentInfoKHR) -> Result;
	ProcGetDeviceGroupPresentCapabilitiesKHR                            :: #type proc"stdcall"(device: Device, pDeviceGroupPresentCapabilities: ^DeviceGroupPresentCapabilitiesKHR) -> Result;
	ProcGetDeviceGroupSurfacePresentModesKHR                            :: #type proc"stdcall"(device: Device, surface: SurfaceKHR, pModes: ^DeviceGroupPresentModeFlagsKHR) -> Result;
	ProcGetPhysicalDevicePresentRectanglesKHR                           :: #type proc"stdcall"(physicalDevice: PhysicalDevice, surface: SurfaceKHR, pRectCount: ^u32, pRects: ^Rect2D) -> Result;
	ProcAcquireNextImage2KHR                                            :: #type proc"stdcall"(device: Device, pAcquireInfo: ^AcquireNextImageInfoKHR, pImageIndex: ^u32) -> Result;
	ProcGetPhysicalDeviceDisplayPropertiesKHR                           :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pPropertyCount: ^u32, pProperties: ^DisplayPropertiesKHR) -> Result;
	ProcGetPhysicalDeviceDisplayPlanePropertiesKHR                      :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pPropertyCount: ^u32, pProperties: ^DisplayPlanePropertiesKHR) -> Result;
	ProcGetDisplayPlaneSupportedDisplaysKHR                             :: #type proc"stdcall"(physicalDevice: PhysicalDevice, planeIndex: u32, pDisplayCount: ^u32, pDisplays: ^DisplayKHR) -> Result;
	ProcGetDisplayModePropertiesKHR                                     :: #type proc"stdcall"(physicalDevice: PhysicalDevice, display: DisplayKHR, pPropertyCount: ^u32, pProperties: ^DisplayModePropertiesKHR) -> Result;
	ProcCreateDisplayModeKHR                                            :: #type proc"stdcall"(physicalDevice: PhysicalDevice, display: DisplayKHR, pCreateInfo: ^DisplayModeCreateInfoKHR, pAllocator: ^AllocationCallbacks, pMode: ^DisplayModeKHR) -> Result;
	ProcGetDisplayPlaneCapabilitiesKHR                                  :: #type proc"stdcall"(physicalDevice: PhysicalDevice, mode: DisplayModeKHR, planeIndex: u32, pCapabilities: ^DisplayPlaneCapabilitiesKHR) -> Result;
	ProcCreateDisplayPlaneSurfaceKHR                                    :: #type proc"stdcall"(instance: Instance, pCreateInfo: ^DisplaySurfaceCreateInfoKHR, pAllocator: ^AllocationCallbacks, pSurface: ^SurfaceKHR) -> Result;
	ProcCreateSharedSwapchainsKHR                                       :: #type proc"stdcall"(device: Device, swapchainCount: u32, pCreateInfos: ^SwapchainCreateInfoKHR, pAllocator: ^AllocationCallbacks, pSwapchains: ^SwapchainKHR) -> Result;
	ProcGetPhysicalDeviceFeatures2KHR                                   :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pFeatures: ^PhysicalDeviceFeatures2);
	ProcGetPhysicalDeviceProperties2KHR                                 :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pProperties: ^PhysicalDeviceProperties2);
	ProcGetPhysicalDeviceFormatProperties2KHR                           :: #type proc"stdcall"(physicalDevice: PhysicalDevice, format: Format, pFormatProperties: ^FormatProperties2);
	ProcGetPhysicalDeviceImageFormatProperties2KHR                      :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pImageFormatInfo: ^PhysicalDeviceImageFormatInfo2, pImageFormatProperties: ^ImageFormatProperties2) -> Result;
	ProcGetPhysicalDeviceQueueFamilyProperties2KHR                      :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pQueueFamilyPropertyCount: ^u32, pQueueFamilyProperties: ^QueueFamilyProperties2);
	ProcGetPhysicalDeviceMemoryProperties2KHR                           :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pMemoryProperties: ^PhysicalDeviceMemoryProperties2);
	ProcGetPhysicalDeviceSparseImageFormatProperties2KHR                :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pFormatInfo: ^PhysicalDeviceSparseImageFormatInfo2, pPropertyCount: ^u32, pProperties: ^SparseImageFormatProperties2);
	ProcGetDeviceGroupPeerMemoryFeaturesKHR                             :: #type proc"stdcall"(device: Device, heapIndex: u32, localDeviceIndex: u32, remoteDeviceIndex: u32, pPeerMemoryFeatures: ^PeerMemoryFeatureFlags);
	ProcCmdSetDeviceMaskKHR                                             :: #type proc"stdcall"(commandBuffer: CommandBuffer, deviceMask: u32);
	ProcCmdDispatchBaseKHR                                              :: #type proc"stdcall"(commandBuffer: CommandBuffer, baseGroupX: u32, baseGroupY: u32, baseGroupZ: u32, groupCountX: u32, groupCountY: u32, groupCountZ: u32);
	ProcTrimCommandPoolKHR                                              :: #type proc"stdcall"(device: Device, commandPool: CommandPool, flags: CommandPoolTrimFlags);
	ProcEnumeratePhysicalDeviceGroupsKHR                                :: #type proc"stdcall"(instance: Instance, pPhysicalDeviceGroupCount: ^u32, pPhysicalDeviceGroupProperties: ^PhysicalDeviceGroupProperties) -> Result;
	ProcGetPhysicalDeviceExternalBufferPropertiesKHR                    :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pExternalBufferInfo: ^PhysicalDeviceExternalBufferInfo, pExternalBufferProperties: ^ExternalBufferProperties);
	ProcGetMemoryFdKHR                                                  :: #type proc"stdcall"(device: Device, pGetFdInfo: ^MemoryGetFdInfoKHR, pFd: ^c.int) -> Result;
	ProcGetMemoryFdPropertiesKHR                                        :: #type proc"stdcall"(device: Device, handleType: ExternalMemoryHandleTypeFlags, fd: c.int, pMemoryFdProperties: ^MemoryFdPropertiesKHR) -> Result;
	ProcGetPhysicalDeviceExternalSemaphorePropertiesKHR                 :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pExternalSemaphoreInfo: ^PhysicalDeviceExternalSemaphoreInfo, pExternalSemaphoreProperties: ^ExternalSemaphoreProperties);
	ProcImportSemaphoreFdKHR                                            :: #type proc"stdcall"(device: Device, pImportSemaphoreFdInfo: ^ImportSemaphoreFdInfoKHR) -> Result;
	ProcGetSemaphoreFdKHR                                               :: #type proc"stdcall"(device: Device, pGetFdInfo: ^SemaphoreGetFdInfoKHR, pFd: ^c.int) -> Result;
	ProcCmdPushDescriptorSetKHR                                         :: #type proc"stdcall"(commandBuffer: CommandBuffer, pipelineBindPoint: PipelineBindPoint, layout: PipelineLayout, set: u32, descriptorWriteCount: u32, pDescriptorWrites: ^WriteDescriptorSet);
	ProcCmdPushDescriptorSetWithTemplateKHR                             :: #type proc"stdcall"(commandBuffer: CommandBuffer, descriptorUpdateTemplate: DescriptorUpdateTemplate, layout: PipelineLayout, set: u32, pData: rawptr);
	ProcCreateDescriptorUpdateTemplateKHR                               :: #type proc"stdcall"(device: Device, pCreateInfo: ^DescriptorUpdateTemplateCreateInfo, pAllocator: ^AllocationCallbacks, pDescriptorUpdateTemplate: ^DescriptorUpdateTemplate) -> Result;
	ProcDestroyDescriptorUpdateTemplateKHR                              :: #type proc"stdcall"(device: Device, descriptorUpdateTemplate: DescriptorUpdateTemplate, pAllocator: ^AllocationCallbacks);
	ProcUpdateDescriptorSetWithTemplateKHR                              :: #type proc"stdcall"(device: Device, descriptorSet: DescriptorSet, descriptorUpdateTemplate: DescriptorUpdateTemplate, pData: rawptr);
	ProcCreateRenderPass2KHR                                            :: #type proc"stdcall"(device: Device, pCreateInfo: ^RenderPassCreateInfo2, pAllocator: ^AllocationCallbacks, pRenderPass: ^RenderPass) -> Result;
	ProcCmdBeginRenderPass2KHR                                          :: #type proc"stdcall"(commandBuffer: CommandBuffer, pRenderPassBegin: ^RenderPassBeginInfo, pSubpassBeginInfo: ^SubpassBeginInfo);
	ProcCmdNextSubpass2KHR                                              :: #type proc"stdcall"(commandBuffer: CommandBuffer, pSubpassBeginInfo: ^SubpassBeginInfo, pSubpassEndInfo: ^SubpassEndInfo);
	ProcCmdEndRenderPass2KHR                                            :: #type proc"stdcall"(commandBuffer: CommandBuffer, pSubpassEndInfo: ^SubpassEndInfo);
	ProcGetSwapchainStatusKHR                                           :: #type proc"stdcall"(device: Device, swapchain: SwapchainKHR) -> Result;
	ProcGetPhysicalDeviceExternalFencePropertiesKHR                     :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pExternalFenceInfo: ^PhysicalDeviceExternalFenceInfo, pExternalFenceProperties: ^ExternalFenceProperties);
	ProcImportFenceFdKHR                                                :: #type proc"stdcall"(device: Device, pImportFenceFdInfo: ^ImportFenceFdInfoKHR) -> Result;
	ProcGetFenceFdKHR                                                   :: #type proc"stdcall"(device: Device, pGetFdInfo: ^FenceGetFdInfoKHR, pFd: ^c.int) -> Result;
	ProcEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR   :: #type proc"stdcall"(physicalDevice: PhysicalDevice, queueFamilyIndex: u32, pCounterCount: ^u32, pCounters: ^PerformanceCounterKHR, pCounterDescriptions: ^PerformanceCounterDescriptionKHR) -> Result;
	ProcGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR           :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pPerformanceQueryCreateInfo: ^QueryPoolPerformanceCreateInfoKHR, pNumPasses: ^u32);
	ProcAcquireProfilingLockKHR                                         :: #type proc"stdcall"(device: Device, pInfo: ^AcquireProfilingLockInfoKHR) -> Result;
	ProcReleaseProfilingLockKHR                                         :: #type proc"stdcall"(device: Device);
	ProcGetPhysicalDeviceSurfaceCapabilities2KHR                        :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pSurfaceInfo: ^PhysicalDeviceSurfaceInfo2KHR, pSurfaceCapabilities: ^SurfaceCapabilities2KHR) -> Result;
	ProcGetPhysicalDeviceSurfaceFormats2KHR                             :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pSurfaceInfo: ^PhysicalDeviceSurfaceInfo2KHR, pSurfaceFormatCount: ^u32, pSurfaceFormats: ^SurfaceFormat2KHR) -> Result;
	ProcGetPhysicalDeviceDisplayProperties2KHR                          :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pPropertyCount: ^u32, pProperties: ^DisplayProperties2KHR) -> Result;
	ProcGetPhysicalDeviceDisplayPlaneProperties2KHR                     :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pPropertyCount: ^u32, pProperties: ^DisplayPlaneProperties2KHR) -> Result;
	ProcGetDisplayModeProperties2KHR                                    :: #type proc"stdcall"(physicalDevice: PhysicalDevice, display: DisplayKHR, pPropertyCount: ^u32, pProperties: ^DisplayModeProperties2KHR) -> Result;
	ProcGetDisplayPlaneCapabilities2KHR                                 :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pDisplayPlaneInfo: ^DisplayPlaneInfo2KHR, pCapabilities: ^DisplayPlaneCapabilities2KHR) -> Result;
	ProcGetImageMemoryRequirements2KHR                                  :: #type proc"stdcall"(device: Device, pInfo: ^ImageMemoryRequirementsInfo2, pMemoryRequirements: ^MemoryRequirements2);
	ProcGetBufferMemoryRequirements2KHR                                 :: #type proc"stdcall"(device: Device, pInfo: ^BufferMemoryRequirementsInfo2, pMemoryRequirements: ^MemoryRequirements2);
	ProcGetImageSparseMemoryRequirements2KHR                            :: #type proc"stdcall"(device: Device, pInfo: ^ImageSparseMemoryRequirementsInfo2, pSparseMemoryRequirementCount: ^u32, pSparseMemoryRequirements: ^SparseImageMemoryRequirements2);
	ProcCreateSamplerYcbcrConversionKHR                                 :: #type proc"stdcall"(device: Device, pCreateInfo: ^SamplerYcbcrConversionCreateInfo, pAllocator: ^AllocationCallbacks, pYcbcrConversion: ^SamplerYcbcrConversion) -> Result;
	ProcDestroySamplerYcbcrConversionKHR                                :: #type proc"stdcall"(device: Device, ycbcrConversion: SamplerYcbcrConversion, pAllocator: ^AllocationCallbacks);
	ProcBindBufferMemory2KHR                                            :: #type proc"stdcall"(device: Device, bindInfoCount: u32, pBindInfos: ^BindBufferMemoryInfo) -> Result;
	ProcBindImageMemory2KHR                                             :: #type proc"stdcall"(device: Device, bindInfoCount: u32, pBindInfos: ^BindImageMemoryInfo) -> Result;
	ProcGetDescriptorSetLayoutSupportKHR                                :: #type proc"stdcall"(device: Device, pCreateInfo: ^DescriptorSetLayoutCreateInfo, pSupport: ^DescriptorSetLayoutSupport);
	ProcCmdDrawIndirectCountKHR                                         :: #type proc"stdcall"(commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: u32, stride: u32);
	ProcCmdDrawIndexedIndirectCountKHR                                  :: #type proc"stdcall"(commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: u32, stride: u32);
	ProcGetSemaphoreCounterValueKHR                                     :: #type proc"stdcall"(device: Device, semaphore: Semaphore, pValue: ^u64) -> Result;
	ProcWaitSemaphoresKHR                                               :: #type proc"stdcall"(device: Device, pWaitInfo: ^SemaphoreWaitInfo, timeout: u64) -> Result;
	ProcSignalSemaphoreKHR                                              :: #type proc"stdcall"(device: Device, pSignalInfo: ^SemaphoreSignalInfo) -> Result;
	ProcGetPhysicalDeviceFragmentShadingRatesKHR                        :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pFragmentShadingRateCount: ^u32, pFragmentShadingRates: ^PhysicalDeviceFragmentShadingRateKHR) -> Result;
	ProcCmdSetFragmentShadingRateKHR                                    :: #type proc"stdcall"(commandBuffer: CommandBuffer, pFragmentSize: ^Extent2D);
	ProcGetBufferDeviceAddressKHR                                       :: #type proc"stdcall"(device: Device, pInfo: ^BufferDeviceAddressInfo) -> DeviceAddress;
	ProcGetBufferOpaqueCaptureAddressKHR                                :: #type proc"stdcall"(device: Device, pInfo: ^BufferDeviceAddressInfo) -> u64;
	ProcGetDeviceMemoryOpaqueCaptureAddressKHR                          :: #type proc"stdcall"(device: Device, pInfo: ^DeviceMemoryOpaqueCaptureAddressInfo) -> u64;
	ProcCreateDeferredOperationKHR                                      :: #type proc"stdcall"(device: Device, pAllocator: ^AllocationCallbacks, pDeferredOperation: ^DeferredOperationKHR) -> Result;
	ProcDestroyDeferredOperationKHR                                     :: #type proc"stdcall"(device: Device, operation: DeferredOperationKHR, pAllocator: ^AllocationCallbacks);
	ProcGetDeferredOperationMaxConcurrencyKHR                           :: #type proc"stdcall"(device: Device, operation: DeferredOperationKHR) -> u32;
	ProcGetDeferredOperationResultKHR                                   :: #type proc"stdcall"(device: Device, operation: DeferredOperationKHR) -> Result;
	ProcDeferredOperationJoinKHR                                        :: #type proc"stdcall"(device: Device, operation: DeferredOperationKHR) -> Result;
	ProcGetPipelineExecutablePropertiesKHR                              :: #type proc"stdcall"(device: Device, pPipelineInfo: ^PipelineInfoKHR, pExecutableCount: ^u32, pProperties: ^PipelineExecutablePropertiesKHR) -> Result;
	ProcGetPipelineExecutableStatisticsKHR                              :: #type proc"stdcall"(device: Device, pExecutableInfo: ^PipelineExecutableInfoKHR, pStatisticCount: ^u32, pStatistics: ^PipelineExecutableStatisticKHR) -> Result;
	ProcGetPipelineExecutableInternalRepresentationsKHR                 :: #type proc"stdcall"(device: Device, pExecutableInfo: ^PipelineExecutableInfoKHR, pInternalRepresentationCount: ^u32, pInternalRepresentations: ^PipelineExecutableInternalRepresentationKHR) -> Result;
	ProcCmdCopyBuffer2KHR                                               :: #type proc"stdcall"(commandBuffer: CommandBuffer, pCopyBufferInfo: ^CopyBufferInfo2KHR);
	ProcCmdCopyImage2KHR                                                :: #type proc"stdcall"(commandBuffer: CommandBuffer, pCopyImageInfo: ^CopyImageInfo2KHR);
	ProcCmdCopyBufferToImage2KHR                                        :: #type proc"stdcall"(commandBuffer: CommandBuffer, pCopyBufferToImageInfo: ^CopyBufferToImageInfo2KHR);
	ProcCmdCopyImageToBuffer2KHR                                        :: #type proc"stdcall"(commandBuffer: CommandBuffer, pCopyImageToBufferInfo: ^CopyImageToBufferInfo2KHR);
	ProcCmdBlitImage2KHR                                                :: #type proc"stdcall"(commandBuffer: CommandBuffer, pBlitImageInfo: ^BlitImageInfo2KHR);
	ProcCmdResolveImage2KHR                                             :: #type proc"stdcall"(commandBuffer: CommandBuffer, pResolveImageInfo: ^ResolveImageInfo2KHR);
	ProcDebugReportCallbackEXT                                          :: #type proc"stdcall"(flags: DebugReportFlagsEXT, objectType: DebugReportObjectTypeEXT, object: u64, location: int, messageCode: i32, pLayerPrefix: cstring, pMessage: cstring, pUserData: rawptr) -> b32;
	ProcCreateDebugReportCallbackEXT                                    :: #type proc"stdcall"(instance: Instance, pCreateInfo: ^DebugReportCallbackCreateInfoEXT, pAllocator: ^AllocationCallbacks, pCallback: ^DebugReportCallbackEXT) -> Result;
	ProcDestroyDebugReportCallbackEXT                                   :: #type proc"stdcall"(instance: Instance, callback: DebugReportCallbackEXT, pAllocator: ^AllocationCallbacks);
	ProcDebugReportMessageEXT                                           :: #type proc"stdcall"(instance: Instance, flags: DebugReportFlagsEXT, objectType: DebugReportObjectTypeEXT, object: u64, location: int, messageCode: i32, pLayerPrefix: cstring, pMessage: cstring);
	ProcDebugMarkerSetObjectTagEXT                                      :: #type proc"stdcall"(device: Device, pTagInfo: ^DebugMarkerObjectTagInfoEXT) -> Result;
	ProcDebugMarkerSetObjectNameEXT                                     :: #type proc"stdcall"(device: Device, pNameInfo: ^DebugMarkerObjectNameInfoEXT) -> Result;
	ProcCmdDebugMarkerBeginEXT                                          :: #type proc"stdcall"(commandBuffer: CommandBuffer, pMarkerInfo: ^DebugMarkerMarkerInfoEXT);
	ProcCmdDebugMarkerEndEXT                                            :: #type proc"stdcall"(commandBuffer: CommandBuffer);
	ProcCmdDebugMarkerInsertEXT                                         :: #type proc"stdcall"(commandBuffer: CommandBuffer, pMarkerInfo: ^DebugMarkerMarkerInfoEXT);
	ProcCmdBindTransformFeedbackBuffersEXT                              :: #type proc"stdcall"(commandBuffer: CommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: ^Buffer, pOffsets: ^DeviceSize, pSizes: ^DeviceSize);
	ProcCmdBeginTransformFeedbackEXT                                    :: #type proc"stdcall"(commandBuffer: CommandBuffer, firstCounterBuffer: u32, counterBufferCount: u32, pCounterBuffers: ^Buffer, pCounterBufferOffsets: ^DeviceSize);
	ProcCmdEndTransformFeedbackEXT                                      :: #type proc"stdcall"(commandBuffer: CommandBuffer, firstCounterBuffer: u32, counterBufferCount: u32, pCounterBuffers: ^Buffer, pCounterBufferOffsets: ^DeviceSize);
	ProcCmdBeginQueryIndexedEXT                                         :: #type proc"stdcall"(commandBuffer: CommandBuffer, queryPool: QueryPool, query: u32, flags: QueryControlFlags, index: u32);
	ProcCmdEndQueryIndexedEXT                                           :: #type proc"stdcall"(commandBuffer: CommandBuffer, queryPool: QueryPool, query: u32, index: u32);
	ProcCmdDrawIndirectByteCountEXT                                     :: #type proc"stdcall"(commandBuffer: CommandBuffer, instanceCount: u32, firstInstance: u32, counterBuffer: Buffer, counterBufferOffset: DeviceSize, counterOffset: u32, vertexStride: u32);
	ProcGetImageViewHandleNVX                                           :: #type proc"stdcall"(device: Device, pInfo: ^ImageViewHandleInfoNVX) -> u32;
	ProcGetImageViewAddressNVX                                          :: #type proc"stdcall"(device: Device, imageView: ImageView, pProperties: ^ImageViewAddressPropertiesNVX) -> Result;
	ProcCmdDrawIndirectCountAMD                                         :: #type proc"stdcall"(commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: u32, stride: u32);
	ProcCmdDrawIndexedIndirectCountAMD                                  :: #type proc"stdcall"(commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: u32, stride: u32);
	ProcGetShaderInfoAMD                                                :: #type proc"stdcall"(device: Device, pipeline: Pipeline, shaderStage: ShaderStageFlags, infoType: ShaderInfoTypeAMD, pInfoSize: ^int, pInfo: rawptr) -> Result;
	ProcGetPhysicalDeviceExternalImageFormatPropertiesNV                :: #type proc"stdcall"(physicalDevice: PhysicalDevice, format: Format, type: ImageType, tiling: ImageTiling, usage: ImageUsageFlags, flags: ImageCreateFlags, externalHandleType: ExternalMemoryHandleTypeFlagsNV, pExternalImageFormatProperties: ^ExternalImageFormatPropertiesNV) -> Result;
	ProcCmdBeginConditionalRenderingEXT                                 :: #type proc"stdcall"(commandBuffer: CommandBuffer, pConditionalRenderingBegin: ^ConditionalRenderingBeginInfoEXT);
	ProcCmdEndConditionalRenderingEXT                                   :: #type proc"stdcall"(commandBuffer: CommandBuffer);
	ProcCmdSetViewportWScalingNV                                        :: #type proc"stdcall"(commandBuffer: CommandBuffer, firstViewport: u32, viewportCount: u32, pViewportWScalings: ^ViewportWScalingNV);
	ProcReleaseDisplayEXT                                               :: #type proc"stdcall"(physicalDevice: PhysicalDevice, display: DisplayKHR) -> Result;
	ProcGetPhysicalDeviceSurfaceCapabilities2EXT                        :: #type proc"stdcall"(physicalDevice: PhysicalDevice, surface: SurfaceKHR, pSurfaceCapabilities: ^SurfaceCapabilities2EXT) -> Result;
	ProcDisplayPowerControlEXT                                          :: #type proc"stdcall"(device: Device, display: DisplayKHR, pDisplayPowerInfo: ^DisplayPowerInfoEXT) -> Result;
	ProcRegisterDeviceEventEXT                                          :: #type proc"stdcall"(device: Device, pDeviceEventInfo: ^DeviceEventInfoEXT, pAllocator: ^AllocationCallbacks, pFence: ^Fence) -> Result;
	ProcRegisterDisplayEventEXT                                         :: #type proc"stdcall"(device: Device, display: DisplayKHR, pDisplayEventInfo: ^DisplayEventInfoEXT, pAllocator: ^AllocationCallbacks, pFence: ^Fence) -> Result;
	ProcGetSwapchainCounterEXT                                          :: #type proc"stdcall"(device: Device, swapchain: SwapchainKHR, counter: SurfaceCounterFlagsEXT, pCounterValue: ^u64) -> Result;
	ProcGetRefreshCycleDurationGOOGLE                                   :: #type proc"stdcall"(device: Device, swapchain: SwapchainKHR, pDisplayTimingProperties: ^RefreshCycleDurationGOOGLE) -> Result;
	ProcGetPastPresentationTimingGOOGLE                                 :: #type proc"stdcall"(device: Device, swapchain: SwapchainKHR, pPresentationTimingCount: ^u32, pPresentationTimings: ^PastPresentationTimingGOOGLE) -> Result;
	ProcCmdSetDiscardRectangleEXT                                       :: #type proc"stdcall"(commandBuffer: CommandBuffer, firstDiscardRectangle: u32, discardRectangleCount: u32, pDiscardRectangles: ^Rect2D);
	ProcSetHdrMetadataEXT                                               :: #type proc"stdcall"(device: Device, swapchainCount: u32, pSwapchains: ^SwapchainKHR, pMetadata: ^HdrMetadataEXT);
	ProcDebugUtilsMessengerCallbackEXT                                  :: #type proc"stdcall"(messageSeverity: DebugUtilsMessageSeverityFlagsEXT, messageTypes: DebugUtilsMessageTypeFlagsEXT, pCallbackData: ^DebugUtilsMessengerCallbackDataEXT, pUserData: rawptr) -> b32;
	ProcSetDebugUtilsObjectNameEXT                                      :: #type proc"stdcall"(device: Device, pNameInfo: ^DebugUtilsObjectNameInfoEXT) -> Result;
	ProcSetDebugUtilsObjectTagEXT                                       :: #type proc"stdcall"(device: Device, pTagInfo: ^DebugUtilsObjectTagInfoEXT) -> Result;
	ProcQueueBeginDebugUtilsLabelEXT                                    :: #type proc"stdcall"(queue: Queue, pLabelInfo: ^DebugUtilsLabelEXT);
	ProcQueueEndDebugUtilsLabelEXT                                      :: #type proc"stdcall"(queue: Queue);
	ProcQueueInsertDebugUtilsLabelEXT                                   :: #type proc"stdcall"(queue: Queue, pLabelInfo: ^DebugUtilsLabelEXT);
	ProcCmdBeginDebugUtilsLabelEXT                                      :: #type proc"stdcall"(commandBuffer: CommandBuffer, pLabelInfo: ^DebugUtilsLabelEXT);
	ProcCmdEndDebugUtilsLabelEXT                                        :: #type proc"stdcall"(commandBuffer: CommandBuffer);
	ProcCmdInsertDebugUtilsLabelEXT                                     :: #type proc"stdcall"(commandBuffer: CommandBuffer, pLabelInfo: ^DebugUtilsLabelEXT);
	ProcCreateDebugUtilsMessengerEXT                                    :: #type proc"stdcall"(instance: Instance, pCreateInfo: ^DebugUtilsMessengerCreateInfoEXT, pAllocator: ^AllocationCallbacks, pMessenger: ^DebugUtilsMessengerEXT) -> Result;
	ProcDestroyDebugUtilsMessengerEXT                                   :: #type proc"stdcall"(instance: Instance, messenger: DebugUtilsMessengerEXT, pAllocator: ^AllocationCallbacks);
	ProcSubmitDebugUtilsMessageEXT                                      :: #type proc"stdcall"(instance: Instance, messageSeverity: DebugUtilsMessageSeverityFlagsEXT, messageTypes: DebugUtilsMessageTypeFlagsEXT, pCallbackData: ^DebugUtilsMessengerCallbackDataEXT);
	ProcCmdSetSampleLocationsEXT                                        :: #type proc"stdcall"(commandBuffer: CommandBuffer, pSampleLocationsInfo: ^SampleLocationsInfoEXT);
	ProcGetPhysicalDeviceMultisamplePropertiesEXT                       :: #type proc"stdcall"(physicalDevice: PhysicalDevice, samples: SampleCountFlags, pMultisampleProperties: ^MultisamplePropertiesEXT);
	ProcGetImageDrmFormatModifierPropertiesEXT                          :: #type proc"stdcall"(device: Device, image: Image, pProperties: ^ImageDrmFormatModifierPropertiesEXT) -> Result;
	ProcCreateValidationCacheEXT                                        :: #type proc"stdcall"(device: Device, pCreateInfo: ^ValidationCacheCreateInfoEXT, pAllocator: ^AllocationCallbacks, pValidationCache: ^ValidationCacheEXT) -> Result;
	ProcDestroyValidationCacheEXT                                       :: #type proc"stdcall"(device: Device, validationCache: ValidationCacheEXT, pAllocator: ^AllocationCallbacks);
	ProcMergeValidationCachesEXT                                        :: #type proc"stdcall"(device: Device, dstCache: ValidationCacheEXT, srcCacheCount: u32, pSrcCaches: ^ValidationCacheEXT) -> Result;
	ProcGetValidationCacheDataEXT                                       :: #type proc"stdcall"(device: Device, validationCache: ValidationCacheEXT, pDataSize: ^int, pData: rawptr) -> Result;
	ProcCmdBindShadingRateImageNV                                       :: #type proc"stdcall"(commandBuffer: CommandBuffer, imageView: ImageView, imageLayout: ImageLayout);
	ProcCmdSetViewportShadingRatePaletteNV                              :: #type proc"stdcall"(commandBuffer: CommandBuffer, firstViewport: u32, viewportCount: u32, pShadingRatePalettes: ^ShadingRatePaletteNV);
	ProcCmdSetCoarseSampleOrderNV                                       :: #type proc"stdcall"(commandBuffer: CommandBuffer, sampleOrderType: CoarseSampleOrderTypeNV, customSampleOrderCount: u32, pCustomSampleOrders: ^CoarseSampleOrderCustomNV);
	ProcCreateAccelerationStructureNV                                   :: #type proc"stdcall"(device: Device, pCreateInfo: ^AccelerationStructureCreateInfoNV, pAllocator: ^AllocationCallbacks, pAccelerationStructure: ^AccelerationStructureNV) -> Result;
	ProcDestroyAccelerationStructureNV                                  :: #type proc"stdcall"(device: Device, accelerationStructure: AccelerationStructureNV, pAllocator: ^AllocationCallbacks);
	ProcGetAccelerationStructureMemoryRequirementsNV                    :: #type proc"stdcall"(device: Device, pInfo: ^AccelerationStructureMemoryRequirementsInfoNV, pMemoryRequirements: ^MemoryRequirements2KHR);
	ProcBindAccelerationStructureMemoryNV                               :: #type proc"stdcall"(device: Device, bindInfoCount: u32, pBindInfos: ^BindAccelerationStructureMemoryInfoNV) -> Result;
	ProcCmdBuildAccelerationStructureNV                                 :: #type proc"stdcall"(commandBuffer: CommandBuffer, pInfo: ^AccelerationStructureInfoNV, instanceData: Buffer, instanceOffset: DeviceSize, update: b32, dst: AccelerationStructureNV, src: AccelerationStructureNV, scratch: Buffer, scratchOffset: DeviceSize);
	ProcCmdCopyAccelerationStructureNV                                  :: #type proc"stdcall"(commandBuffer: CommandBuffer, dst: AccelerationStructureNV, src: AccelerationStructureNV, mode: CopyAccelerationStructureModeKHR);
	ProcCmdTraceRaysNV                                                  :: #type proc"stdcall"(commandBuffer: CommandBuffer, raygenShaderBindingTableBuffer: Buffer, raygenShaderBindingOffset: DeviceSize, missShaderBindingTableBuffer: Buffer, missShaderBindingOffset: DeviceSize, missShaderBindingStride: DeviceSize, hitShaderBindingTableBuffer: Buffer, hitShaderBindingOffset: DeviceSize, hitShaderBindingStride: DeviceSize, callableShaderBindingTableBuffer: Buffer, callableShaderBindingOffset: DeviceSize, callableShaderBindingStride: DeviceSize, width: u32, height: u32, depth: u32);
	ProcCreateRayTracingPipelinesNV                                     :: #type proc"stdcall"(device: Device, pipelineCache: PipelineCache, createInfoCount: u32, pCreateInfos: ^RayTracingPipelineCreateInfoNV, pAllocator: ^AllocationCallbacks, pPipelines: ^Pipeline) -> Result;
	ProcGetRayTracingShaderGroupHandlesKHR                              :: #type proc"stdcall"(device: Device, pipeline: Pipeline, firstGroup: u32, groupCount: u32, dataSize: int, pData: rawptr) -> Result;
	ProcGetRayTracingShaderGroupHandlesNV                               :: #type proc"stdcall"(device: Device, pipeline: Pipeline, firstGroup: u32, groupCount: u32, dataSize: int, pData: rawptr) -> Result;
	ProcGetAccelerationStructureHandleNV                                :: #type proc"stdcall"(device: Device, accelerationStructure: AccelerationStructureNV, dataSize: int, pData: rawptr) -> Result;
	ProcCmdWriteAccelerationStructuresPropertiesNV                      :: #type proc"stdcall"(commandBuffer: CommandBuffer, accelerationStructureCount: u32, pAccelerationStructures: ^AccelerationStructureNV, queryType: QueryType, queryPool: QueryPool, firstQuery: u32);
	ProcCompileDeferredNV                                               :: #type proc"stdcall"(device: Device, pipeline: Pipeline, shader: u32) -> Result;
	ProcGetMemoryHostPointerPropertiesEXT                               :: #type proc"stdcall"(device: Device, handleType: ExternalMemoryHandleTypeFlags, pHostPointer: rawptr, pMemoryHostPointerProperties: ^MemoryHostPointerPropertiesEXT) -> Result;
	ProcCmdWriteBufferMarkerAMD                                         :: #type proc"stdcall"(commandBuffer: CommandBuffer, pipelineStage: PipelineStageFlags, dstBuffer: Buffer, dstOffset: DeviceSize, marker: u32);
	ProcGetPhysicalDeviceCalibrateableTimeDomainsEXT                    :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pTimeDomainCount: ^u32, pTimeDomains: ^TimeDomainEXT) -> Result;
	ProcGetCalibratedTimestampsEXT                                      :: #type proc"stdcall"(device: Device, timestampCount: u32, pTimestampInfos: ^CalibratedTimestampInfoEXT, pTimestamps: ^u64, pMaxDeviation: ^u64) -> Result;
	ProcCmdDrawMeshTasksNV                                              :: #type proc"stdcall"(commandBuffer: CommandBuffer, taskCount: u32, firstTask: u32);
	ProcCmdDrawMeshTasksIndirectNV                                      :: #type proc"stdcall"(commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, drawCount: u32, stride: u32);
	ProcCmdDrawMeshTasksIndirectCountNV                                 :: #type proc"stdcall"(commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: u32, stride: u32);
	ProcCmdSetExclusiveScissorNV                                        :: #type proc"stdcall"(commandBuffer: CommandBuffer, firstExclusiveScissor: u32, exclusiveScissorCount: u32, pExclusiveScissors: ^Rect2D);
	ProcCmdSetCheckpointNV                                              :: #type proc"stdcall"(commandBuffer: CommandBuffer, pCheckpointMarker: rawptr);
	ProcGetQueueCheckpointDataNV                                        :: #type proc"stdcall"(queue: Queue, pCheckpointDataCount: ^u32, pCheckpointData: ^CheckpointDataNV);
	ProcInitializePerformanceApiINTEL                                   :: #type proc"stdcall"(device: Device, pInitializeInfo: ^InitializePerformanceApiInfoINTEL) -> Result;
	ProcUninitializePerformanceApiINTEL                                 :: #type proc"stdcall"(device: Device);
	ProcCmdSetPerformanceMarkerINTEL                                    :: #type proc"stdcall"(commandBuffer: CommandBuffer, pMarkerInfo: ^PerformanceMarkerInfoINTEL) -> Result;
	ProcCmdSetPerformanceStreamMarkerINTEL                              :: #type proc"stdcall"(commandBuffer: CommandBuffer, pMarkerInfo: ^PerformanceStreamMarkerInfoINTEL) -> Result;
	ProcCmdSetPerformanceOverrideINTEL                                  :: #type proc"stdcall"(commandBuffer: CommandBuffer, pOverrideInfo: ^PerformanceOverrideInfoINTEL) -> Result;
	ProcAcquirePerformanceConfigurationINTEL                            :: #type proc"stdcall"(device: Device, pAcquireInfo: ^PerformanceConfigurationAcquireInfoINTEL, pConfiguration: ^PerformanceConfigurationINTEL) -> Result;
	ProcReleasePerformanceConfigurationINTEL                            :: #type proc"stdcall"(device: Device, configuration: PerformanceConfigurationINTEL) -> Result;
	ProcQueueSetPerformanceConfigurationINTEL                           :: #type proc"stdcall"(queue: Queue, configuration: PerformanceConfigurationINTEL) -> Result;
	ProcGetPerformanceParameterINTEL                                    :: #type proc"stdcall"(device: Device, parameter: PerformanceParameterTypeINTEL, pValue: ^PerformanceValueINTEL) -> Result;
	ProcSetLocalDimmingAMD                                              :: #type proc"stdcall"(device: Device, swapChain: SwapchainKHR, localDimmingEnable: b32);
	ProcGetBufferDeviceAddressEXT                                       :: #type proc"stdcall"(device: Device, pInfo: ^BufferDeviceAddressInfo) -> DeviceAddress;
	ProcGetPhysicalDeviceToolPropertiesEXT                              :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pToolCount: ^u32, pToolProperties: ^PhysicalDeviceToolPropertiesEXT) -> Result;
	ProcGetPhysicalDeviceCooperativeMatrixPropertiesNV                  :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pPropertyCount: ^u32, pProperties: ^CooperativeMatrixPropertiesNV) -> Result;
	ProcGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pCombinationCount: ^u32, pCombinations: ^FramebufferMixedSamplesCombinationNV) -> Result;
	ProcCreateHeadlessSurfaceEXT                                        :: #type proc"stdcall"(instance: Instance, pCreateInfo: ^HeadlessSurfaceCreateInfoEXT, pAllocator: ^AllocationCallbacks, pSurface: ^SurfaceKHR) -> Result;
	ProcCmdSetLineStippleEXT                                            :: #type proc"stdcall"(commandBuffer: CommandBuffer, lineStippleFactor: u32, lineStipplePattern: u16);
	ProcResetQueryPoolEXT                                               :: #type proc"stdcall"(device: Device, queryPool: QueryPool, firstQuery: u32, queryCount: u32);
	ProcCmdSetCullModeEXT                                               :: #type proc"stdcall"(commandBuffer: CommandBuffer, cullMode: CullModeFlags);
	ProcCmdSetFrontFaceEXT                                              :: #type proc"stdcall"(commandBuffer: CommandBuffer, frontFace: FrontFace);
	ProcCmdSetPrimitiveTopologyEXT                                      :: #type proc"stdcall"(commandBuffer: CommandBuffer, primitiveTopology: PrimitiveTopology);
	ProcCmdSetViewportWithCountEXT                                      :: #type proc"stdcall"(commandBuffer: CommandBuffer, viewportCount: u32, pViewports: ^Viewport);
	ProcCmdSetScissorWithCountEXT                                       :: #type proc"stdcall"(commandBuffer: CommandBuffer, scissorCount: u32, pScissors: ^Rect2D);
	ProcCmdBindVertexBuffers2EXT                                        :: #type proc"stdcall"(commandBuffer: CommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: ^Buffer, pOffsets: ^DeviceSize, pSizes: ^DeviceSize, pStrides: ^DeviceSize);
	ProcCmdSetDepthTestEnableEXT                                        :: #type proc"stdcall"(commandBuffer: CommandBuffer, depthTestEnable: b32);
	ProcCmdSetDepthWriteEnableEXT                                       :: #type proc"stdcall"(commandBuffer: CommandBuffer, depthWriteEnable: b32);
	ProcCmdSetDepthCompareOpEXT                                         :: #type proc"stdcall"(commandBuffer: CommandBuffer, depthCompareOp: CompareOp);
	ProcCmdSetDepthBoundsTestEnableEXT                                  :: #type proc"stdcall"(commandBuffer: CommandBuffer, depthBoundsTestEnable: b32);
	ProcCmdSetStencilTestEnableEXT                                      :: #type proc"stdcall"(commandBuffer: CommandBuffer, stencilTestEnable: b32);
	ProcCmdSetStencilOpEXT                                              :: #type proc"stdcall"(commandBuffer: CommandBuffer, faceMask: StencilFaceFlags, failOp: StencilOp, passOp: StencilOp, depthFailOp: StencilOp, compareOp: CompareOp);
	ProcGetGeneratedCommandsMemoryRequirementsNV                        :: #type proc"stdcall"(device: Device, pInfo: ^GeneratedCommandsMemoryRequirementsInfoNV, pMemoryRequirements: ^MemoryRequirements2);
	ProcCmdPreprocessGeneratedCommandsNV                                :: #type proc"stdcall"(commandBuffer: CommandBuffer, pGeneratedCommandsInfo: ^GeneratedCommandsInfoNV);
	ProcCmdExecuteGeneratedCommandsNV                                   :: #type proc"stdcall"(commandBuffer: CommandBuffer, isPreprocessed: b32, pGeneratedCommandsInfo: ^GeneratedCommandsInfoNV);
	ProcCmdBindPipelineShaderGroupNV                                    :: #type proc"stdcall"(commandBuffer: CommandBuffer, pipelineBindPoint: PipelineBindPoint, pipeline: Pipeline, groupIndex: u32);
	ProcCreateIndirectCommandsLayoutNV                                  :: #type proc"stdcall"(device: Device, pCreateInfo: ^IndirectCommandsLayoutCreateInfoNV, pAllocator: ^AllocationCallbacks, pIndirectCommandsLayout: ^IndirectCommandsLayoutNV) -> Result;
	ProcDestroyIndirectCommandsLayoutNV                                 :: #type proc"stdcall"(device: Device, indirectCommandsLayout: IndirectCommandsLayoutNV, pAllocator: ^AllocationCallbacks);
	ProcDeviceMemoryReportCallbackEXT                                   :: #type proc"stdcall"(pCallbackData: ^DeviceMemoryReportCallbackDataEXT, pUserData: rawptr);
	ProcCreatePrivateDataSlotEXT                                        :: #type proc"stdcall"(device: Device, pCreateInfo: ^PrivateDataSlotCreateInfoEXT, pAllocator: ^AllocationCallbacks, pPrivateDataSlot: ^PrivateDataSlotEXT) -> Result;
	ProcDestroyPrivateDataSlotEXT                                       :: #type proc"stdcall"(device: Device, privateDataSlot: PrivateDataSlotEXT, pAllocator: ^AllocationCallbacks);
	ProcSetPrivateDataEXT                                               :: #type proc"stdcall"(device: Device, objectType: ObjectType, objectHandle: u64, privateDataSlot: PrivateDataSlotEXT, data: u64) -> Result;
	ProcGetPrivateDataEXT                                               :: #type proc"stdcall"(device: Device, objectType: ObjectType, objectHandle: u64, privateDataSlot: PrivateDataSlotEXT, pData: ^u64);
	ProcCmdSetFragmentShadingRateEnumNV                                 :: #type proc"stdcall"(commandBuffer: CommandBuffer, shadingRate: FragmentShadingRateNV);
	ProcAcquireWinrtDisplayNV                                           :: #type proc"stdcall"(physicalDevice: PhysicalDevice, display: DisplayKHR) -> Result;
	ProcGetWinrtDisplayNV                                               :: #type proc"stdcall"(physicalDevice: PhysicalDevice, deviceRelativeId: u32, pDisplay: ^DisplayKHR) -> Result;
	ProcCreateAccelerationStructureKHR                                  :: #type proc"stdcall"(device: Device, pCreateInfo: ^AccelerationStructureCreateInfoKHR, pAllocator: ^AllocationCallbacks, pAccelerationStructure: ^AccelerationStructureKHR) -> Result;
	ProcDestroyAccelerationStructureKHR                                 :: #type proc"stdcall"(device: Device, accelerationStructure: AccelerationStructureKHR, pAllocator: ^AllocationCallbacks);
	ProcCmdBuildAccelerationStructuresKHR                               :: #type proc"stdcall"(commandBuffer: CommandBuffer, infoCount: u32, pInfos: ^AccelerationStructureBuildGeometryInfoKHR, ppBuildRangeInfos: ^^AccelerationStructureBuildRangeInfoKHR);
	ProcCmdBuildAccelerationStructuresIndirectKHR                       :: #type proc"stdcall"(commandBuffer: CommandBuffer, infoCount: u32, pInfos: ^AccelerationStructureBuildGeometryInfoKHR, pIndirectDeviceAddresses: ^DeviceAddress, pIndirectStrides: ^u32, ppMaxPrimitiveCounts: ^^u32);
	ProcBuildAccelerationStructuresKHR                                  :: #type proc"stdcall"(device: Device, deferredOperation: DeferredOperationKHR, infoCount: u32, pInfos: ^AccelerationStructureBuildGeometryInfoKHR, ppBuildRangeInfos: ^^AccelerationStructureBuildRangeInfoKHR) -> Result;
	ProcCopyAccelerationStructureKHR                                    :: #type proc"stdcall"(device: Device, deferredOperation: DeferredOperationKHR, pInfo: ^CopyAccelerationStructureInfoKHR) -> Result;
	ProcCopyAccelerationStructureToMemoryKHR                            :: #type proc"stdcall"(device: Device, deferredOperation: DeferredOperationKHR, pInfo: ^CopyAccelerationStructureToMemoryInfoKHR) -> Result;
	ProcCopyMemoryToAccelerationStructureKHR                            :: #type proc"stdcall"(device: Device, deferredOperation: DeferredOperationKHR, pInfo: ^CopyMemoryToAccelerationStructureInfoKHR) -> Result;
	ProcWriteAccelerationStructuresPropertiesKHR                        :: #type proc"stdcall"(device: Device, accelerationStructureCount: u32, pAccelerationStructures: ^AccelerationStructureKHR, queryType: QueryType, dataSize: int, pData: rawptr, stride: int) -> Result;
	ProcCmdCopyAccelerationStructureKHR                                 :: #type proc"stdcall"(commandBuffer: CommandBuffer, pInfo: ^CopyAccelerationStructureInfoKHR);
	ProcCmdCopyAccelerationStructureToMemoryKHR                         :: #type proc"stdcall"(commandBuffer: CommandBuffer, pInfo: ^CopyAccelerationStructureToMemoryInfoKHR);
	ProcCmdCopyMemoryToAccelerationStructureKHR                         :: #type proc"stdcall"(commandBuffer: CommandBuffer, pInfo: ^CopyMemoryToAccelerationStructureInfoKHR);
	ProcGetAccelerationStructureDeviceAddressKHR                        :: #type proc"stdcall"(device: Device, pInfo: ^AccelerationStructureDeviceAddressInfoKHR) -> DeviceAddress;
	ProcCmdWriteAccelerationStructuresPropertiesKHR                     :: #type proc"stdcall"(commandBuffer: CommandBuffer, accelerationStructureCount: u32, pAccelerationStructures: ^AccelerationStructureKHR, queryType: QueryType, queryPool: QueryPool, firstQuery: u32);
	ProcGetDeviceAccelerationStructureCompatibilityKHR                  :: #type proc"stdcall"(device: Device, pVersionInfo: ^AccelerationStructureVersionInfoKHR, pCompatibility: ^AccelerationStructureCompatibilityKHR);
	ProcGetAccelerationStructureBuildSizesKHR                           :: #type proc"stdcall"(device: Device, buildType: AccelerationStructureBuildTypeKHR, pBuildInfo: ^AccelerationStructureBuildGeometryInfoKHR, pMaxPrimitiveCounts: ^u32, pSizeInfo: ^AccelerationStructureBuildSizesInfoKHR);
	ProcCmdTraceRaysKHR                                                 :: #type proc"stdcall"(commandBuffer: CommandBuffer, pRaygenShaderBindingTable: ^StridedDeviceAddressRegionKHR, pMissShaderBindingTable: ^StridedDeviceAddressRegionKHR, pHitShaderBindingTable: ^StridedDeviceAddressRegionKHR, pCallableShaderBindingTable: ^StridedDeviceAddressRegionKHR, width: u32, height: u32, depth: u32);
	ProcCreateRayTracingPipelinesKHR                                    :: #type proc"stdcall"(device: Device, deferredOperation: DeferredOperationKHR, pipelineCache: PipelineCache, createInfoCount: u32, pCreateInfos: ^RayTracingPipelineCreateInfoKHR, pAllocator: ^AllocationCallbacks, pPipelines: ^Pipeline) -> Result;
	ProcGetRayTracingCaptureReplayShaderGroupHandlesKHR                 :: #type proc"stdcall"(device: Device, pipeline: Pipeline, firstGroup: u32, groupCount: u32, dataSize: int, pData: rawptr) -> Result;
	ProcCmdTraceRaysIndirectKHR                                         :: #type proc"stdcall"(commandBuffer: CommandBuffer, pRaygenShaderBindingTable: ^StridedDeviceAddressRegionKHR, pMissShaderBindingTable: ^StridedDeviceAddressRegionKHR, pHitShaderBindingTable: ^StridedDeviceAddressRegionKHR, pCallableShaderBindingTable: ^StridedDeviceAddressRegionKHR, indirectDeviceAddress: DeviceAddress);
	ProcGetRayTracingShaderGroupStackSizeKHR                            :: #type proc"stdcall"(device: Device, pipeline: Pipeline, group: u32, groupShader: ShaderGroupShaderKHR) -> DeviceSize;
	ProcCmdSetRayTracingPipelineStackSizeKHR                            :: #type proc"stdcall"(commandBuffer: CommandBuffer, pipelineStackSize: u32);
	ProcCreateWin32SurfaceKHR                                           :: #type proc"stdcall"(instance: Instance, pCreateInfo: ^Win32SurfaceCreateInfoKHR, pAllocator: ^AllocationCallbacks, pSurface: ^SurfaceKHR) -> Result;
	ProcGetPhysicalDeviceWin32PresentationSupportKHR                    :: #type proc"stdcall"(physicalDevice: PhysicalDevice, queueFamilyIndex: u32) -> b32;
	ProcGetMemoryWin32HandleKHR                                         :: #type proc"stdcall"(device: Device, pGetWin32HandleInfo: ^MemoryGetWin32HandleInfoKHR, pHandle: ^HANDLE) -> Result;
	ProcGetMemoryWin32HandlePropertiesKHR                               :: #type proc"stdcall"(device: Device, handleType: ExternalMemoryHandleTypeFlags, handle: HANDLE, pMemoryWin32HandleProperties: ^MemoryWin32HandlePropertiesKHR) -> Result;
	ProcImportSemaphoreWin32HandleKHR                                   :: #type proc"stdcall"(device: Device, pImportSemaphoreWin32HandleInfo: ^ImportSemaphoreWin32HandleInfoKHR) -> Result;
	ProcGetSemaphoreWin32HandleKHR                                      :: #type proc"stdcall"(device: Device, pGetWin32HandleInfo: ^SemaphoreGetWin32HandleInfoKHR, pHandle: ^HANDLE) -> Result;
	ProcImportFenceWin32HandleKHR                                       :: #type proc"stdcall"(device: Device, pImportFenceWin32HandleInfo: ^ImportFenceWin32HandleInfoKHR) -> Result;
	ProcGetFenceWin32HandleKHR                                          :: #type proc"stdcall"(device: Device, pGetWin32HandleInfo: ^FenceGetWin32HandleInfoKHR, pHandle: ^HANDLE) -> Result;
	ProcGetMemoryWin32HandleNV                                          :: #type proc"stdcall"(device: Device, memory: DeviceMemory, handleType: ExternalMemoryHandleTypeFlagsNV, pHandle: ^HANDLE) -> Result;
	ProcGetPhysicalDeviceSurfacePresentModes2EXT                        :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pSurfaceInfo: ^PhysicalDeviceSurfaceInfo2KHR, pPresentModeCount: ^u32, pPresentModes: ^PresentModeKHR) -> Result;
	ProcAcquireFullScreenExclusiveModeEXT                               :: #type proc"stdcall"(device: Device, swapchain: SwapchainKHR) -> Result;
	ProcReleaseFullScreenExclusiveModeEXT                               :: #type proc"stdcall"(device: Device, swapchain: SwapchainKHR) -> Result;
	ProcGetDeviceGroupSurfacePresentModes2EXT                           :: #type proc"stdcall"(device: Device, pSurfaceInfo: ^PhysicalDeviceSurfaceInfo2KHR, pModes: ^DeviceGroupPresentModeFlagsKHR) -> Result;
} else {
	ProcAllocationFunction                                              :: #type proc"stdcall"(pUserData: rawptr, size: int, alignment: int, allocationScope: SystemAllocationScope) -> rawptr;
	ProcFreeFunction                                                    :: #type proc"stdcall"(pUserData: rawptr, pMemory: rawptr);
	ProcInternalAllocationNotification                                  :: #type proc"stdcall"(pUserData: rawptr, size: int, allocationType: InternalAllocationType, allocationScope: SystemAllocationScope);
	ProcInternalFreeNotification                                        :: #type proc"stdcall"(pUserData: rawptr, size: int, allocationType: InternalAllocationType, allocationScope: SystemAllocationScope);
	ProcReallocationFunction                                            :: #type proc"stdcall"(pUserData: rawptr, pOriginal: rawptr, size: int, alignment: int, allocationScope: SystemAllocationScope) -> rawptr;
	ProcVoidFunction                                                    :: #type proc"stdcall"();
	ProcCreateInstance                                                  :: #type proc"stdcall"(pCreateInfo: ^InstanceCreateInfo, pAllocator: ^AllocationCallbacks, pInstance: ^Instance) -> Result;
	ProcDestroyInstance                                                 :: #type proc"stdcall"(instance: Instance, pAllocator: ^AllocationCallbacks);
	ProcEnumeratePhysicalDevices                                        :: #type proc"stdcall"(instance: Instance, pPhysicalDeviceCount: ^u32, pPhysicalDevices: ^PhysicalDevice) -> Result;
	ProcGetPhysicalDeviceFeatures                                       :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pFeatures: ^PhysicalDeviceFeatures);
	ProcGetPhysicalDeviceFormatProperties                               :: #type proc"stdcall"(physicalDevice: PhysicalDevice, format: Format, pFormatProperties: ^FormatProperties);
	ProcGetPhysicalDeviceImageFormatProperties                          :: #type proc"stdcall"(physicalDevice: PhysicalDevice, format: Format, type: ImageType, tiling: ImageTiling, usage: ImageUsageFlags, flags: ImageCreateFlags, pImageFormatProperties: ^ImageFormatProperties) -> Result;
	ProcGetPhysicalDeviceProperties                                     :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pProperties: ^PhysicalDeviceProperties);
	ProcGetPhysicalDeviceQueueFamilyProperties                          :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pQueueFamilyPropertyCount: ^u32, pQueueFamilyProperties: ^QueueFamilyProperties);
	ProcGetPhysicalDeviceMemoryProperties                               :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pMemoryProperties: ^PhysicalDeviceMemoryProperties);
	ProcGetInstanceProcAddr                                             :: #type proc"stdcall"(instance: Instance, pName: cstring) -> ProcVoidFunction;
	ProcGetDeviceProcAddr                                               :: #type proc"stdcall"(device: Device, pName: cstring) -> ProcVoidFunction;
	ProcCreateDevice                                                    :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pCreateInfo: ^DeviceCreateInfo, pAllocator: ^AllocationCallbacks, pDevice: ^Device) -> Result;
	ProcDestroyDevice                                                   :: #type proc"stdcall"(device: Device, pAllocator: ^AllocationCallbacks);
	ProcEnumerateInstanceExtensionProperties                            :: #type proc"stdcall"(pLayerName: cstring, pPropertyCount: ^u32, pProperties: ^ExtensionProperties) -> Result;
	ProcEnumerateDeviceExtensionProperties                              :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pLayerName: cstring, pPropertyCount: ^u32, pProperties: ^ExtensionProperties) -> Result;
	ProcEnumerateInstanceLayerProperties                                :: #type proc"stdcall"(pPropertyCount: ^u32, pProperties: ^LayerProperties) -> Result;
	ProcEnumerateDeviceLayerProperties                                  :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pPropertyCount: ^u32, pProperties: ^LayerProperties) -> Result;
	ProcGetDeviceQueue                                                  :: #type proc"stdcall"(device: Device, queueFamilyIndex: u32, queueIndex: u32, pQueue: ^Queue);
	ProcQueueSubmit                                                     :: #type proc"stdcall"(queue: Queue, submitCount: u32, pSubmits: ^SubmitInfo, fence: Fence) -> Result;
	ProcQueueWaitIdle                                                   :: #type proc"stdcall"(queue: Queue) -> Result;
	ProcDeviceWaitIdle                                                  :: #type proc"stdcall"(device: Device) -> Result;
	ProcAllocateMemory                                                  :: #type proc"stdcall"(device: Device, pAllocateInfo: ^MemoryAllocateInfo, pAllocator: ^AllocationCallbacks, pMemory: ^DeviceMemory) -> Result;
	ProcFreeMemory                                                      :: #type proc"stdcall"(device: Device, memory: DeviceMemory, pAllocator: ^AllocationCallbacks);
	ProcMapMemory                                                       :: #type proc"stdcall"(device: Device, memory: DeviceMemory, offset: DeviceSize, size: DeviceSize, flags: MemoryMapFlags, ppData: ^rawptr) -> Result;
	ProcUnmapMemory                                                     :: #type proc"stdcall"(device: Device, memory: DeviceMemory);
	ProcFlushMappedMemoryRanges                                         :: #type proc"stdcall"(device: Device, memoryRangeCount: u32, pMemoryRanges: ^MappedMemoryRange) -> Result;
	ProcInvalidateMappedMemoryRanges                                    :: #type proc"stdcall"(device: Device, memoryRangeCount: u32, pMemoryRanges: ^MappedMemoryRange) -> Result;
	ProcGetDeviceMemoryCommitment                                       :: #type proc"stdcall"(device: Device, memory: DeviceMemory, pCommittedMemoryInBytes: ^DeviceSize);
	ProcBindBufferMemory                                                :: #type proc"stdcall"(device: Device, buffer: Buffer, memory: DeviceMemory, memoryOffset: DeviceSize) -> Result;
	ProcBindImageMemory                                                 :: #type proc"stdcall"(device: Device, image: Image, memory: DeviceMemory, memoryOffset: DeviceSize) -> Result;
	ProcGetBufferMemoryRequirements                                     :: #type proc"stdcall"(device: Device, buffer: Buffer, pMemoryRequirements: ^MemoryRequirements);
	ProcGetImageMemoryRequirements                                      :: #type proc"stdcall"(device: Device, image: Image, pMemoryRequirements: ^MemoryRequirements);
	ProcGetImageSparseMemoryRequirements                                :: #type proc"stdcall"(device: Device, image: Image, pSparseMemoryRequirementCount: ^u32, pSparseMemoryRequirements: ^SparseImageMemoryRequirements);
	ProcGetPhysicalDeviceSparseImageFormatProperties                    :: #type proc"stdcall"(physicalDevice: PhysicalDevice, format: Format, type: ImageType, samples: SampleCountFlags, usage: ImageUsageFlags, tiling: ImageTiling, pPropertyCount: ^u32, pProperties: ^SparseImageFormatProperties);
	ProcQueueBindSparse                                                 :: #type proc"stdcall"(queue: Queue, bindInfoCount: u32, pBindInfo: ^BindSparseInfo, fence: Fence) -> Result;
	ProcCreateFence                                                     :: #type proc"stdcall"(device: Device, pCreateInfo: ^FenceCreateInfo, pAllocator: ^AllocationCallbacks, pFence: ^Fence) -> Result;
	ProcDestroyFence                                                    :: #type proc"stdcall"(device: Device, fence: Fence, pAllocator: ^AllocationCallbacks);
	ProcResetFences                                                     :: #type proc"stdcall"(device: Device, fenceCount: u32, pFences: ^Fence) -> Result;
	ProcGetFenceStatus                                                  :: #type proc"stdcall"(device: Device, fence: Fence) -> Result;
	ProcWaitForFences                                                   :: #type proc"stdcall"(device: Device, fenceCount: u32, pFences: ^Fence, waitAll: b32, timeout: u64) -> Result;
	ProcCreateSemaphore                                                 :: #type proc"stdcall"(device: Device, pCreateInfo: ^SemaphoreCreateInfo, pAllocator: ^AllocationCallbacks, pSemaphore: ^Semaphore) -> Result;
	ProcDestroySemaphore                                                :: #type proc"stdcall"(device: Device, semaphore: Semaphore, pAllocator: ^AllocationCallbacks);
	ProcCreateEvent                                                     :: #type proc"stdcall"(device: Device, pCreateInfo: ^EventCreateInfo, pAllocator: ^AllocationCallbacks, pEvent: ^Event) -> Result;
	ProcDestroyEvent                                                    :: #type proc"stdcall"(device: Device, event: Event, pAllocator: ^AllocationCallbacks);
	ProcGetEventStatus                                                  :: #type proc"stdcall"(device: Device, event: Event) -> Result;
	ProcSetEvent                                                        :: #type proc"stdcall"(device: Device, event: Event) -> Result;
	ProcResetEvent                                                      :: #type proc"stdcall"(device: Device, event: Event) -> Result;
	ProcCreateQueryPool                                                 :: #type proc"stdcall"(device: Device, pCreateInfo: ^QueryPoolCreateInfo, pAllocator: ^AllocationCallbacks, pQueryPool: ^QueryPool) -> Result;
	ProcDestroyQueryPool                                                :: #type proc"stdcall"(device: Device, queryPool: QueryPool, pAllocator: ^AllocationCallbacks);
	ProcGetQueryPoolResults                                             :: #type proc"stdcall"(device: Device, queryPool: QueryPool, firstQuery: u32, queryCount: u32, dataSize: int, pData: rawptr, stride: DeviceSize, flags: QueryResultFlags) -> Result;
	ProcCreateBuffer                                                    :: #type proc"stdcall"(device: Device, pCreateInfo: ^BufferCreateInfo, pAllocator: ^AllocationCallbacks, pBuffer: ^Buffer) -> Result;
	ProcDestroyBuffer                                                   :: #type proc"stdcall"(device: Device, buffer: Buffer, pAllocator: ^AllocationCallbacks);
	ProcCreateBufferView                                                :: #type proc"stdcall"(device: Device, pCreateInfo: ^BufferViewCreateInfo, pAllocator: ^AllocationCallbacks, pView: ^BufferView) -> Result;
	ProcDestroyBufferView                                               :: #type proc"stdcall"(device: Device, bufferView: BufferView, pAllocator: ^AllocationCallbacks);
	ProcCreateImage                                                     :: #type proc"stdcall"(device: Device, pCreateInfo: ^ImageCreateInfo, pAllocator: ^AllocationCallbacks, pImage: ^Image) -> Result;
	ProcDestroyImage                                                    :: #type proc"stdcall"(device: Device, image: Image, pAllocator: ^AllocationCallbacks);
	ProcGetImageSubresourceLayout                                       :: #type proc"stdcall"(device: Device, image: Image, pSubresource: ^ImageSubresource, pLayout: ^SubresourceLayout);
	ProcCreateImageView                                                 :: #type proc"stdcall"(device: Device, pCreateInfo: ^ImageViewCreateInfo, pAllocator: ^AllocationCallbacks, pView: ^ImageView) -> Result;
	ProcDestroyImageView                                                :: #type proc"stdcall"(device: Device, imageView: ImageView, pAllocator: ^AllocationCallbacks);
	ProcCreateShaderModule                                              :: #type proc"stdcall"(device: Device, pCreateInfo: ^ShaderModuleCreateInfo, pAllocator: ^AllocationCallbacks, pShaderModule: ^ShaderModule) -> Result;
	ProcDestroyShaderModule                                             :: #type proc"stdcall"(device: Device, shaderModule: ShaderModule, pAllocator: ^AllocationCallbacks);
	ProcCreatePipelineCache                                             :: #type proc"stdcall"(device: Device, pCreateInfo: ^PipelineCacheCreateInfo, pAllocator: ^AllocationCallbacks, pPipelineCache: ^PipelineCache) -> Result;
	ProcDestroyPipelineCache                                            :: #type proc"stdcall"(device: Device, pipelineCache: PipelineCache, pAllocator: ^AllocationCallbacks);
	ProcGetPipelineCacheData                                            :: #type proc"stdcall"(device: Device, pipelineCache: PipelineCache, pDataSize: ^int, pData: rawptr) -> Result;
	ProcMergePipelineCaches                                             :: #type proc"stdcall"(device: Device, dstCache: PipelineCache, srcCacheCount: u32, pSrcCaches: ^PipelineCache) -> Result;
	ProcCreateGraphicsPipelines                                         :: #type proc"stdcall"(device: Device, pipelineCache: PipelineCache, createInfoCount: u32, pCreateInfos: ^GraphicsPipelineCreateInfo, pAllocator: ^AllocationCallbacks, pPipelines: ^Pipeline) -> Result;
	ProcCreateComputePipelines                                          :: #type proc"stdcall"(device: Device, pipelineCache: PipelineCache, createInfoCount: u32, pCreateInfos: ^ComputePipelineCreateInfo, pAllocator: ^AllocationCallbacks, pPipelines: ^Pipeline) -> Result;
	ProcDestroyPipeline                                                 :: #type proc"stdcall"(device: Device, pipeline: Pipeline, pAllocator: ^AllocationCallbacks);
	ProcCreatePipelineLayout                                            :: #type proc"stdcall"(device: Device, pCreateInfo: ^PipelineLayoutCreateInfo, pAllocator: ^AllocationCallbacks, pPipelineLayout: ^PipelineLayout) -> Result;
	ProcDestroyPipelineLayout                                           :: #type proc"stdcall"(device: Device, pipelineLayout: PipelineLayout, pAllocator: ^AllocationCallbacks);
	ProcCreateSampler                                                   :: #type proc"stdcall"(device: Device, pCreateInfo: ^SamplerCreateInfo, pAllocator: ^AllocationCallbacks, pSampler: ^Sampler) -> Result;
	ProcDestroySampler                                                  :: #type proc"stdcall"(device: Device, sampler: Sampler, pAllocator: ^AllocationCallbacks);
	ProcCreateDescriptorSetLayout                                       :: #type proc"stdcall"(device: Device, pCreateInfo: ^DescriptorSetLayoutCreateInfo, pAllocator: ^AllocationCallbacks, pSetLayout: ^DescriptorSetLayout) -> Result;
	ProcDestroyDescriptorSetLayout                                      :: #type proc"stdcall"(device: Device, descriptorSetLayout: DescriptorSetLayout, pAllocator: ^AllocationCallbacks);
	ProcCreateDescriptorPool                                            :: #type proc"stdcall"(device: Device, pCreateInfo: ^DescriptorPoolCreateInfo, pAllocator: ^AllocationCallbacks, pDescriptorPool: ^DescriptorPool) -> Result;
	ProcDestroyDescriptorPool                                           :: #type proc"stdcall"(device: Device, descriptorPool: DescriptorPool, pAllocator: ^AllocationCallbacks);
	ProcResetDescriptorPool                                             :: #type proc"stdcall"(device: Device, descriptorPool: DescriptorPool, flags: DescriptorPoolResetFlags) -> Result;
	ProcAllocateDescriptorSets                                          :: #type proc"stdcall"(device: Device, pAllocateInfo: ^DescriptorSetAllocateInfo, pDescriptorSets: ^DescriptorSet) -> Result;
	ProcFreeDescriptorSets                                              :: #type proc"stdcall"(device: Device, descriptorPool: DescriptorPool, descriptorSetCount: u32, pDescriptorSets: ^DescriptorSet) -> Result;
	ProcUpdateDescriptorSets                                            :: #type proc"stdcall"(device: Device, descriptorWriteCount: u32, pDescriptorWrites: ^WriteDescriptorSet, descriptorCopyCount: u32, pDescriptorCopies: ^CopyDescriptorSet);
	ProcCreateFramebuffer                                               :: #type proc"stdcall"(device: Device, pCreateInfo: ^FramebufferCreateInfo, pAllocator: ^AllocationCallbacks, pFramebuffer: ^Framebuffer) -> Result;
	ProcDestroyFramebuffer                                              :: #type proc"stdcall"(device: Device, framebuffer: Framebuffer, pAllocator: ^AllocationCallbacks);
	ProcCreateRenderPass                                                :: #type proc"stdcall"(device: Device, pCreateInfo: ^RenderPassCreateInfo, pAllocator: ^AllocationCallbacks, pRenderPass: ^RenderPass) -> Result;
	ProcDestroyRenderPass                                               :: #type proc"stdcall"(device: Device, renderPass: RenderPass, pAllocator: ^AllocationCallbacks);
	ProcGetRenderAreaGranularity                                        :: #type proc"stdcall"(device: Device, renderPass: RenderPass, pGranularity: ^Extent2D);
	ProcCreateCommandPool                                               :: #type proc"stdcall"(device: Device, pCreateInfo: ^CommandPoolCreateInfo, pAllocator: ^AllocationCallbacks, pCommandPool: ^CommandPool) -> Result;
	ProcDestroyCommandPool                                              :: #type proc"stdcall"(device: Device, commandPool: CommandPool, pAllocator: ^AllocationCallbacks);
	ProcResetCommandPool                                                :: #type proc"stdcall"(device: Device, commandPool: CommandPool, flags: CommandPoolResetFlags) -> Result;
	ProcAllocateCommandBuffers                                          :: #type proc"stdcall"(device: Device, pAllocateInfo: ^CommandBufferAllocateInfo, pCommandBuffers: ^CommandBuffer) -> Result;
	ProcFreeCommandBuffers                                              :: #type proc"stdcall"(device: Device, commandPool: CommandPool, commandBufferCount: u32, pCommandBuffers: ^CommandBuffer);
	ProcBeginCommandBuffer                                              :: #type proc"stdcall"(commandBuffer: CommandBuffer, pBeginInfo: ^CommandBufferBeginInfo) -> Result;
	ProcEndCommandBuffer                                                :: #type proc"stdcall"(commandBuffer: CommandBuffer) -> Result;
	ProcResetCommandBuffer                                              :: #type proc"stdcall"(commandBuffer: CommandBuffer, flags: CommandBufferResetFlags) -> Result;
	ProcCmdBindPipeline                                                 :: #type proc"stdcall"(commandBuffer: CommandBuffer, pipelineBindPoint: PipelineBindPoint, pipeline: Pipeline);
	ProcCmdSetViewport                                                  :: #type proc"stdcall"(commandBuffer: CommandBuffer, firstViewport: u32, viewportCount: u32, pViewports: ^Viewport);
	ProcCmdSetScissor                                                   :: #type proc"stdcall"(commandBuffer: CommandBuffer, firstScissor: u32, scissorCount: u32, pScissors: ^Rect2D);
	ProcCmdSetLineWidth                                                 :: #type proc"stdcall"(commandBuffer: CommandBuffer, lineWidth: f32);
	ProcCmdSetDepthBias                                                 :: #type proc"stdcall"(commandBuffer: CommandBuffer, depthBiasConstantFactor: f32, depthBiasClamp: f32, depthBiasSlopeFactor: f32);
	ProcCmdSetBlendConstants                                            :: #type proc"stdcall"(commandBuffer: CommandBuffer);
	ProcCmdSetDepthBounds                                               :: #type proc"stdcall"(commandBuffer: CommandBuffer, minDepthBounds: f32, maxDepthBounds: f32);
	ProcCmdSetStencilCompareMask                                        :: #type proc"stdcall"(commandBuffer: CommandBuffer, faceMask: StencilFaceFlags, compareMask: u32);
	ProcCmdSetStencilWriteMask                                          :: #type proc"stdcall"(commandBuffer: CommandBuffer, faceMask: StencilFaceFlags, writeMask: u32);
	ProcCmdSetStencilReference                                          :: #type proc"stdcall"(commandBuffer: CommandBuffer, faceMask: StencilFaceFlags, reference: u32);
	ProcCmdBindDescriptorSets                                           :: #type proc"stdcall"(commandBuffer: CommandBuffer, pipelineBindPoint: PipelineBindPoint, layout: PipelineLayout, firstSet: u32, descriptorSetCount: u32, pDescriptorSets: ^DescriptorSet, dynamicOffsetCount: u32, pDynamicOffsets: ^u32);
	ProcCmdBindIndexBuffer                                              :: #type proc"stdcall"(commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, indexType: IndexType);
	ProcCmdBindVertexBuffers                                            :: #type proc"stdcall"(commandBuffer: CommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: ^Buffer, pOffsets: ^DeviceSize);
	ProcCmdDraw                                                         :: #type proc"stdcall"(commandBuffer: CommandBuffer, vertexCount: u32, instanceCount: u32, firstVertex: u32, firstInstance: u32);
	ProcCmdDrawIndexed                                                  :: #type proc"stdcall"(commandBuffer: CommandBuffer, indexCount: u32, instanceCount: u32, firstIndex: u32, vertexOffset: i32, firstInstance: u32);
	ProcCmdDrawIndirect                                                 :: #type proc"stdcall"(commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, drawCount: u32, stride: u32);
	ProcCmdDrawIndexedIndirect                                          :: #type proc"stdcall"(commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, drawCount: u32, stride: u32);
	ProcCmdDispatch                                                     :: #type proc"stdcall"(commandBuffer: CommandBuffer, groupCountX: u32, groupCountY: u32, groupCountZ: u32);
	ProcCmdDispatchIndirect                                             :: #type proc"stdcall"(commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize);
	ProcCmdCopyBuffer                                                   :: #type proc"stdcall"(commandBuffer: CommandBuffer, srcBuffer: Buffer, dstBuffer: Buffer, regionCount: u32, pRegions: ^BufferCopy);
	ProcCmdCopyImage                                                    :: #type proc"stdcall"(commandBuffer: CommandBuffer, srcImage: Image, srcImageLayout: ImageLayout, dstImage: Image, dstImageLayout: ImageLayout, regionCount: u32, pRegions: ^ImageCopy);
	ProcCmdBlitImage                                                    :: #type proc"stdcall"(commandBuffer: CommandBuffer, srcImage: Image, srcImageLayout: ImageLayout, dstImage: Image, dstImageLayout: ImageLayout, regionCount: u32, pRegions: ^ImageBlit, filter: Filter);
	ProcCmdCopyBufferToImage                                            :: #type proc"stdcall"(commandBuffer: CommandBuffer, srcBuffer: Buffer, dstImage: Image, dstImageLayout: ImageLayout, regionCount: u32, pRegions: ^BufferImageCopy);
	ProcCmdCopyImageToBuffer                                            :: #type proc"stdcall"(commandBuffer: CommandBuffer, srcImage: Image, srcImageLayout: ImageLayout, dstBuffer: Buffer, regionCount: u32, pRegions: ^BufferImageCopy);
	ProcCmdUpdateBuffer                                                 :: #type proc"stdcall"(commandBuffer: CommandBuffer, dstBuffer: Buffer, dstOffset: DeviceSize, dataSize: DeviceSize, pData: rawptr);
	ProcCmdFillBuffer                                                   :: #type proc"stdcall"(commandBuffer: CommandBuffer, dstBuffer: Buffer, dstOffset: DeviceSize, size: DeviceSize, data: u32);
	ProcCmdClearColorImage                                              :: #type proc"stdcall"(commandBuffer: CommandBuffer, image: Image, imageLayout: ImageLayout, pColor: ^ClearColorValue, rangeCount: u32, pRanges: ^ImageSubresourceRange);
	ProcCmdClearDepthStencilImage                                       :: #type proc"stdcall"(commandBuffer: CommandBuffer, image: Image, imageLayout: ImageLayout, pDepthStencil: ^ClearDepthStencilValue, rangeCount: u32, pRanges: ^ImageSubresourceRange);
	ProcCmdClearAttachments                                             :: #type proc"stdcall"(commandBuffer: CommandBuffer, attachmentCount: u32, pAttachments: ^ClearAttachment, rectCount: u32, pRects: ^ClearRect);
	ProcCmdResolveImage                                                 :: #type proc"stdcall"(commandBuffer: CommandBuffer, srcImage: Image, srcImageLayout: ImageLayout, dstImage: Image, dstImageLayout: ImageLayout, regionCount: u32, pRegions: ^ImageResolve);
	ProcCmdSetEvent                                                     :: #type proc"stdcall"(commandBuffer: CommandBuffer, event: Event, stageMask: PipelineStageFlags);
	ProcCmdResetEvent                                                   :: #type proc"stdcall"(commandBuffer: CommandBuffer, event: Event, stageMask: PipelineStageFlags);
	ProcCmdWaitEvents                                                   :: #type proc"stdcall"(commandBuffer: CommandBuffer, eventCount: u32, pEvents: ^Event, srcStageMask: PipelineStageFlags, dstStageMask: PipelineStageFlags, memoryBarrierCount: u32, pMemoryBarriers: ^MemoryBarrier, bufferMemoryBarrierCount: u32, pBufferMemoryBarriers: ^BufferMemoryBarrier, imageMemoryBarrierCount: u32, pImageMemoryBarriers: ^ImageMemoryBarrier);
	ProcCmdPipelineBarrier                                              :: #type proc"stdcall"(commandBuffer: CommandBuffer, srcStageMask: PipelineStageFlags, dstStageMask: PipelineStageFlags, dependencyFlags: DependencyFlags, memoryBarrierCount: u32, pMemoryBarriers: ^MemoryBarrier, bufferMemoryBarrierCount: u32, pBufferMemoryBarriers: ^BufferMemoryBarrier, imageMemoryBarrierCount: u32, pImageMemoryBarriers: ^ImageMemoryBarrier);
	ProcCmdBeginQuery                                                   :: #type proc"stdcall"(commandBuffer: CommandBuffer, queryPool: QueryPool, query: u32, flags: QueryControlFlags);
	ProcCmdEndQuery                                                     :: #type proc"stdcall"(commandBuffer: CommandBuffer, queryPool: QueryPool, query: u32);
	ProcCmdResetQueryPool                                               :: #type proc"stdcall"(commandBuffer: CommandBuffer, queryPool: QueryPool, firstQuery: u32, queryCount: u32);
	ProcCmdWriteTimestamp                                               :: #type proc"stdcall"(commandBuffer: CommandBuffer, pipelineStage: PipelineStageFlags, queryPool: QueryPool, query: u32);
	ProcCmdCopyQueryPoolResults                                         :: #type proc"stdcall"(commandBuffer: CommandBuffer, queryPool: QueryPool, firstQuery: u32, queryCount: u32, dstBuffer: Buffer, dstOffset: DeviceSize, stride: DeviceSize, flags: QueryResultFlags);
	ProcCmdPushConstants                                                :: #type proc"stdcall"(commandBuffer: CommandBuffer, layout: PipelineLayout, stageFlags: ShaderStageFlags, offset: u32, size: u32, pValues: rawptr);
	ProcCmdBeginRenderPass                                              :: #type proc"stdcall"(commandBuffer: CommandBuffer, pRenderPassBegin: ^RenderPassBeginInfo, contents: SubpassContents);
	ProcCmdNextSubpass                                                  :: #type proc"stdcall"(commandBuffer: CommandBuffer, contents: SubpassContents);
	ProcCmdEndRenderPass                                                :: #type proc"stdcall"(commandBuffer: CommandBuffer);
	ProcCmdExecuteCommands                                              :: #type proc"stdcall"(commandBuffer: CommandBuffer, commandBufferCount: u32, pCommandBuffers: ^CommandBuffer);
	ProcEnumerateInstanceVersion                                        :: #type proc"stdcall"(pApiVersion: ^u32) -> Result;
	ProcBindBufferMemory2                                               :: #type proc"stdcall"(device: Device, bindInfoCount: u32, pBindInfos: ^BindBufferMemoryInfo) -> Result;
	ProcBindImageMemory2                                                :: #type proc"stdcall"(device: Device, bindInfoCount: u32, pBindInfos: ^BindImageMemoryInfo) -> Result;
	ProcGetDeviceGroupPeerMemoryFeatures                                :: #type proc"stdcall"(device: Device, heapIndex: u32, localDeviceIndex: u32, remoteDeviceIndex: u32, pPeerMemoryFeatures: ^PeerMemoryFeatureFlags);
	ProcCmdSetDeviceMask                                                :: #type proc"stdcall"(commandBuffer: CommandBuffer, deviceMask: u32);
	ProcCmdDispatchBase                                                 :: #type proc"stdcall"(commandBuffer: CommandBuffer, baseGroupX: u32, baseGroupY: u32, baseGroupZ: u32, groupCountX: u32, groupCountY: u32, groupCountZ: u32);
	ProcEnumeratePhysicalDeviceGroups                                   :: #type proc"stdcall"(instance: Instance, pPhysicalDeviceGroupCount: ^u32, pPhysicalDeviceGroupProperties: ^PhysicalDeviceGroupProperties) -> Result;
	ProcGetImageMemoryRequirements2                                     :: #type proc"stdcall"(device: Device, pInfo: ^ImageMemoryRequirementsInfo2, pMemoryRequirements: ^MemoryRequirements2);
	ProcGetBufferMemoryRequirements2                                    :: #type proc"stdcall"(device: Device, pInfo: ^BufferMemoryRequirementsInfo2, pMemoryRequirements: ^MemoryRequirements2);
	ProcGetImageSparseMemoryRequirements2                               :: #type proc"stdcall"(device: Device, pInfo: ^ImageSparseMemoryRequirementsInfo2, pSparseMemoryRequirementCount: ^u32, pSparseMemoryRequirements: ^SparseImageMemoryRequirements2);
	ProcGetPhysicalDeviceFeatures2                                      :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pFeatures: ^PhysicalDeviceFeatures2);
	ProcGetPhysicalDeviceProperties2                                    :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pProperties: ^PhysicalDeviceProperties2);
	ProcGetPhysicalDeviceFormatProperties2                              :: #type proc"stdcall"(physicalDevice: PhysicalDevice, format: Format, pFormatProperties: ^FormatProperties2);
	ProcGetPhysicalDeviceImageFormatProperties2                         :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pImageFormatInfo: ^PhysicalDeviceImageFormatInfo2, pImageFormatProperties: ^ImageFormatProperties2) -> Result;
	ProcGetPhysicalDeviceQueueFamilyProperties2                         :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pQueueFamilyPropertyCount: ^u32, pQueueFamilyProperties: ^QueueFamilyProperties2);
	ProcGetPhysicalDeviceMemoryProperties2                              :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pMemoryProperties: ^PhysicalDeviceMemoryProperties2);
	ProcGetPhysicalDeviceSparseImageFormatProperties2                   :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pFormatInfo: ^PhysicalDeviceSparseImageFormatInfo2, pPropertyCount: ^u32, pProperties: ^SparseImageFormatProperties2);
	ProcTrimCommandPool                                                 :: #type proc"stdcall"(device: Device, commandPool: CommandPool, flags: CommandPoolTrimFlags);
	ProcGetDeviceQueue2                                                 :: #type proc"stdcall"(device: Device, pQueueInfo: ^DeviceQueueInfo2, pQueue: ^Queue);
	ProcCreateSamplerYcbcrConversion                                    :: #type proc"stdcall"(device: Device, pCreateInfo: ^SamplerYcbcrConversionCreateInfo, pAllocator: ^AllocationCallbacks, pYcbcrConversion: ^SamplerYcbcrConversion) -> Result;
	ProcDestroySamplerYcbcrConversion                                   :: #type proc"stdcall"(device: Device, ycbcrConversion: SamplerYcbcrConversion, pAllocator: ^AllocationCallbacks);
	ProcCreateDescriptorUpdateTemplate                                  :: #type proc"stdcall"(device: Device, pCreateInfo: ^DescriptorUpdateTemplateCreateInfo, pAllocator: ^AllocationCallbacks, pDescriptorUpdateTemplate: ^DescriptorUpdateTemplate) -> Result;
	ProcDestroyDescriptorUpdateTemplate                                 :: #type proc"stdcall"(device: Device, descriptorUpdateTemplate: DescriptorUpdateTemplate, pAllocator: ^AllocationCallbacks);
	ProcUpdateDescriptorSetWithTemplate                                 :: #type proc"stdcall"(device: Device, descriptorSet: DescriptorSet, descriptorUpdateTemplate: DescriptorUpdateTemplate, pData: rawptr);
	ProcGetPhysicalDeviceExternalBufferProperties                       :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pExternalBufferInfo: ^PhysicalDeviceExternalBufferInfo, pExternalBufferProperties: ^ExternalBufferProperties);
	ProcGetPhysicalDeviceExternalFenceProperties                        :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pExternalFenceInfo: ^PhysicalDeviceExternalFenceInfo, pExternalFenceProperties: ^ExternalFenceProperties);
	ProcGetPhysicalDeviceExternalSemaphoreProperties                    :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pExternalSemaphoreInfo: ^PhysicalDeviceExternalSemaphoreInfo, pExternalSemaphoreProperties: ^ExternalSemaphoreProperties);
	ProcGetDescriptorSetLayoutSupport                                   :: #type proc"stdcall"(device: Device, pCreateInfo: ^DescriptorSetLayoutCreateInfo, pSupport: ^DescriptorSetLayoutSupport);
	ProcCmdDrawIndirectCount                                            :: #type proc"stdcall"(commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: u32, stride: u32);
	ProcCmdDrawIndexedIndirectCount                                     :: #type proc"stdcall"(commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: u32, stride: u32);
	ProcCreateRenderPass2                                               :: #type proc"stdcall"(device: Device, pCreateInfo: ^RenderPassCreateInfo2, pAllocator: ^AllocationCallbacks, pRenderPass: ^RenderPass) -> Result;
	ProcCmdBeginRenderPass2                                             :: #type proc"stdcall"(commandBuffer: CommandBuffer, pRenderPassBegin: ^RenderPassBeginInfo, pSubpassBeginInfo: ^SubpassBeginInfo);
	ProcCmdNextSubpass2                                                 :: #type proc"stdcall"(commandBuffer: CommandBuffer, pSubpassBeginInfo: ^SubpassBeginInfo, pSubpassEndInfo: ^SubpassEndInfo);
	ProcCmdEndRenderPass2                                               :: #type proc"stdcall"(commandBuffer: CommandBuffer, pSubpassEndInfo: ^SubpassEndInfo);
	ProcResetQueryPool                                                  :: #type proc"stdcall"(device: Device, queryPool: QueryPool, firstQuery: u32, queryCount: u32);
	ProcGetSemaphoreCounterValue                                        :: #type proc"stdcall"(device: Device, semaphore: Semaphore, pValue: ^u64) -> Result;
	ProcWaitSemaphores                                                  :: #type proc"stdcall"(device: Device, pWaitInfo: ^SemaphoreWaitInfo, timeout: u64) -> Result;
	ProcSignalSemaphore                                                 :: #type proc"stdcall"(device: Device, pSignalInfo: ^SemaphoreSignalInfo) -> Result;
	ProcGetBufferDeviceAddress                                          :: #type proc"stdcall"(device: Device, pInfo: ^BufferDeviceAddressInfo) -> DeviceAddress;
	ProcGetBufferOpaqueCaptureAddress                                   :: #type proc"stdcall"(device: Device, pInfo: ^BufferDeviceAddressInfo) -> u64;
	ProcGetDeviceMemoryOpaqueCaptureAddress                             :: #type proc"stdcall"(device: Device, pInfo: ^DeviceMemoryOpaqueCaptureAddressInfo) -> u64;
	ProcDestroySurfaceKHR                                               :: #type proc"stdcall"(instance: Instance, surface: SurfaceKHR, pAllocator: ^AllocationCallbacks);
	ProcGetPhysicalDeviceSurfaceSupportKHR                              :: #type proc"stdcall"(physicalDevice: PhysicalDevice, queueFamilyIndex: u32, surface: SurfaceKHR, pSupported: ^b32) -> Result;
	ProcGetPhysicalDeviceSurfaceCapabilitiesKHR                         :: #type proc"stdcall"(physicalDevice: PhysicalDevice, surface: SurfaceKHR, pSurfaceCapabilities: ^SurfaceCapabilitiesKHR) -> Result;
	ProcGetPhysicalDeviceSurfaceFormatsKHR                              :: #type proc"stdcall"(physicalDevice: PhysicalDevice, surface: SurfaceKHR, pSurfaceFormatCount: ^u32, pSurfaceFormats: ^SurfaceFormatKHR) -> Result;
	ProcGetPhysicalDeviceSurfacePresentModesKHR                         :: #type proc"stdcall"(physicalDevice: PhysicalDevice, surface: SurfaceKHR, pPresentModeCount: ^u32, pPresentModes: ^PresentModeKHR) -> Result;
	ProcCreateSwapchainKHR                                              :: #type proc"stdcall"(device: Device, pCreateInfo: ^SwapchainCreateInfoKHR, pAllocator: ^AllocationCallbacks, pSwapchain: ^SwapchainKHR) -> Result;
	ProcDestroySwapchainKHR                                             :: #type proc"stdcall"(device: Device, swapchain: SwapchainKHR, pAllocator: ^AllocationCallbacks);
	ProcGetSwapchainImagesKHR                                           :: #type proc"stdcall"(device: Device, swapchain: SwapchainKHR, pSwapchainImageCount: ^u32, pSwapchainImages: ^Image) -> Result;
	ProcAcquireNextImageKHR                                             :: #type proc"stdcall"(device: Device, swapchain: SwapchainKHR, timeout: u64, semaphore: Semaphore, fence: Fence, pImageIndex: ^u32) -> Result;
	ProcQueuePresentKHR                                                 :: #type proc"stdcall"(queue: Queue, pPresentInfo: ^PresentInfoKHR) -> Result;
	ProcGetDeviceGroupPresentCapabilitiesKHR                            :: #type proc"stdcall"(device: Device, pDeviceGroupPresentCapabilities: ^DeviceGroupPresentCapabilitiesKHR) -> Result;
	ProcGetDeviceGroupSurfacePresentModesKHR                            :: #type proc"stdcall"(device: Device, surface: SurfaceKHR, pModes: ^DeviceGroupPresentModeFlagsKHR) -> Result;
	ProcGetPhysicalDevicePresentRectanglesKHR                           :: #type proc"stdcall"(physicalDevice: PhysicalDevice, surface: SurfaceKHR, pRectCount: ^u32, pRects: ^Rect2D) -> Result;
	ProcAcquireNextImage2KHR                                            :: #type proc"stdcall"(device: Device, pAcquireInfo: ^AcquireNextImageInfoKHR, pImageIndex: ^u32) -> Result;
	ProcGetPhysicalDeviceDisplayPropertiesKHR                           :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pPropertyCount: ^u32, pProperties: ^DisplayPropertiesKHR) -> Result;
	ProcGetPhysicalDeviceDisplayPlanePropertiesKHR                      :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pPropertyCount: ^u32, pProperties: ^DisplayPlanePropertiesKHR) -> Result;
	ProcGetDisplayPlaneSupportedDisplaysKHR                             :: #type proc"stdcall"(physicalDevice: PhysicalDevice, planeIndex: u32, pDisplayCount: ^u32, pDisplays: ^DisplayKHR) -> Result;
	ProcGetDisplayModePropertiesKHR                                     :: #type proc"stdcall"(physicalDevice: PhysicalDevice, display: DisplayKHR, pPropertyCount: ^u32, pProperties: ^DisplayModePropertiesKHR) -> Result;
	ProcCreateDisplayModeKHR                                            :: #type proc"stdcall"(physicalDevice: PhysicalDevice, display: DisplayKHR, pCreateInfo: ^DisplayModeCreateInfoKHR, pAllocator: ^AllocationCallbacks, pMode: ^DisplayModeKHR) -> Result;
	ProcGetDisplayPlaneCapabilitiesKHR                                  :: #type proc"stdcall"(physicalDevice: PhysicalDevice, mode: DisplayModeKHR, planeIndex: u32, pCapabilities: ^DisplayPlaneCapabilitiesKHR) -> Result;
	ProcCreateDisplayPlaneSurfaceKHR                                    :: #type proc"stdcall"(instance: Instance, pCreateInfo: ^DisplaySurfaceCreateInfoKHR, pAllocator: ^AllocationCallbacks, pSurface: ^SurfaceKHR) -> Result;
	ProcCreateSharedSwapchainsKHR                                       :: #type proc"stdcall"(device: Device, swapchainCount: u32, pCreateInfos: ^SwapchainCreateInfoKHR, pAllocator: ^AllocationCallbacks, pSwapchains: ^SwapchainKHR) -> Result;
	ProcGetPhysicalDeviceFeatures2KHR                                   :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pFeatures: ^PhysicalDeviceFeatures2);
	ProcGetPhysicalDeviceProperties2KHR                                 :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pProperties: ^PhysicalDeviceProperties2);
	ProcGetPhysicalDeviceFormatProperties2KHR                           :: #type proc"stdcall"(physicalDevice: PhysicalDevice, format: Format, pFormatProperties: ^FormatProperties2);
	ProcGetPhysicalDeviceImageFormatProperties2KHR                      :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pImageFormatInfo: ^PhysicalDeviceImageFormatInfo2, pImageFormatProperties: ^ImageFormatProperties2) -> Result;
	ProcGetPhysicalDeviceQueueFamilyProperties2KHR                      :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pQueueFamilyPropertyCount: ^u32, pQueueFamilyProperties: ^QueueFamilyProperties2);
	ProcGetPhysicalDeviceMemoryProperties2KHR                           :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pMemoryProperties: ^PhysicalDeviceMemoryProperties2);
	ProcGetPhysicalDeviceSparseImageFormatProperties2KHR                :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pFormatInfo: ^PhysicalDeviceSparseImageFormatInfo2, pPropertyCount: ^u32, pProperties: ^SparseImageFormatProperties2);
	ProcGetDeviceGroupPeerMemoryFeaturesKHR                             :: #type proc"stdcall"(device: Device, heapIndex: u32, localDeviceIndex: u32, remoteDeviceIndex: u32, pPeerMemoryFeatures: ^PeerMemoryFeatureFlags);
	ProcCmdSetDeviceMaskKHR                                             :: #type proc"stdcall"(commandBuffer: CommandBuffer, deviceMask: u32);
	ProcCmdDispatchBaseKHR                                              :: #type proc"stdcall"(commandBuffer: CommandBuffer, baseGroupX: u32, baseGroupY: u32, baseGroupZ: u32, groupCountX: u32, groupCountY: u32, groupCountZ: u32);
	ProcTrimCommandPoolKHR                                              :: #type proc"stdcall"(device: Device, commandPool: CommandPool, flags: CommandPoolTrimFlags);
	ProcEnumeratePhysicalDeviceGroupsKHR                                :: #type proc"stdcall"(instance: Instance, pPhysicalDeviceGroupCount: ^u32, pPhysicalDeviceGroupProperties: ^PhysicalDeviceGroupProperties) -> Result;
	ProcGetPhysicalDeviceExternalBufferPropertiesKHR                    :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pExternalBufferInfo: ^PhysicalDeviceExternalBufferInfo, pExternalBufferProperties: ^ExternalBufferProperties);
	ProcGetMemoryFdKHR                                                  :: #type proc"stdcall"(device: Device, pGetFdInfo: ^MemoryGetFdInfoKHR, pFd: ^c.int) -> Result;
	ProcGetMemoryFdPropertiesKHR                                        :: #type proc"stdcall"(device: Device, handleType: ExternalMemoryHandleTypeFlags, fd: c.int, pMemoryFdProperties: ^MemoryFdPropertiesKHR) -> Result;
	ProcGetPhysicalDeviceExternalSemaphorePropertiesKHR                 :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pExternalSemaphoreInfo: ^PhysicalDeviceExternalSemaphoreInfo, pExternalSemaphoreProperties: ^ExternalSemaphoreProperties);
	ProcImportSemaphoreFdKHR                                            :: #type proc"stdcall"(device: Device, pImportSemaphoreFdInfo: ^ImportSemaphoreFdInfoKHR) -> Result;
	ProcGetSemaphoreFdKHR                                               :: #type proc"stdcall"(device: Device, pGetFdInfo: ^SemaphoreGetFdInfoKHR, pFd: ^c.int) -> Result;
	ProcCmdPushDescriptorSetKHR                                         :: #type proc"stdcall"(commandBuffer: CommandBuffer, pipelineBindPoint: PipelineBindPoint, layout: PipelineLayout, set: u32, descriptorWriteCount: u32, pDescriptorWrites: ^WriteDescriptorSet);
	ProcCmdPushDescriptorSetWithTemplateKHR                             :: #type proc"stdcall"(commandBuffer: CommandBuffer, descriptorUpdateTemplate: DescriptorUpdateTemplate, layout: PipelineLayout, set: u32, pData: rawptr);
	ProcCreateDescriptorUpdateTemplateKHR                               :: #type proc"stdcall"(device: Device, pCreateInfo: ^DescriptorUpdateTemplateCreateInfo, pAllocator: ^AllocationCallbacks, pDescriptorUpdateTemplate: ^DescriptorUpdateTemplate) -> Result;
	ProcDestroyDescriptorUpdateTemplateKHR                              :: #type proc"stdcall"(device: Device, descriptorUpdateTemplate: DescriptorUpdateTemplate, pAllocator: ^AllocationCallbacks);
	ProcUpdateDescriptorSetWithTemplateKHR                              :: #type proc"stdcall"(device: Device, descriptorSet: DescriptorSet, descriptorUpdateTemplate: DescriptorUpdateTemplate, pData: rawptr);
	ProcCreateRenderPass2KHR                                            :: #type proc"stdcall"(device: Device, pCreateInfo: ^RenderPassCreateInfo2, pAllocator: ^AllocationCallbacks, pRenderPass: ^RenderPass) -> Result;
	ProcCmdBeginRenderPass2KHR                                          :: #type proc"stdcall"(commandBuffer: CommandBuffer, pRenderPassBegin: ^RenderPassBeginInfo, pSubpassBeginInfo: ^SubpassBeginInfo);
	ProcCmdNextSubpass2KHR                                              :: #type proc"stdcall"(commandBuffer: CommandBuffer, pSubpassBeginInfo: ^SubpassBeginInfo, pSubpassEndInfo: ^SubpassEndInfo);
	ProcCmdEndRenderPass2KHR                                            :: #type proc"stdcall"(commandBuffer: CommandBuffer, pSubpassEndInfo: ^SubpassEndInfo);
	ProcGetSwapchainStatusKHR                                           :: #type proc"stdcall"(device: Device, swapchain: SwapchainKHR) -> Result;
	ProcGetPhysicalDeviceExternalFencePropertiesKHR                     :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pExternalFenceInfo: ^PhysicalDeviceExternalFenceInfo, pExternalFenceProperties: ^ExternalFenceProperties);
	ProcImportFenceFdKHR                                                :: #type proc"stdcall"(device: Device, pImportFenceFdInfo: ^ImportFenceFdInfoKHR) -> Result;
	ProcGetFenceFdKHR                                                   :: #type proc"stdcall"(device: Device, pGetFdInfo: ^FenceGetFdInfoKHR, pFd: ^c.int) -> Result;
	ProcEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR   :: #type proc"stdcall"(physicalDevice: PhysicalDevice, queueFamilyIndex: u32, pCounterCount: ^u32, pCounters: ^PerformanceCounterKHR, pCounterDescriptions: ^PerformanceCounterDescriptionKHR) -> Result;
	ProcGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR           :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pPerformanceQueryCreateInfo: ^QueryPoolPerformanceCreateInfoKHR, pNumPasses: ^u32);
	ProcAcquireProfilingLockKHR                                         :: #type proc"stdcall"(device: Device, pInfo: ^AcquireProfilingLockInfoKHR) -> Result;
	ProcReleaseProfilingLockKHR                                         :: #type proc"stdcall"(device: Device);
	ProcGetPhysicalDeviceSurfaceCapabilities2KHR                        :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pSurfaceInfo: ^PhysicalDeviceSurfaceInfo2KHR, pSurfaceCapabilities: ^SurfaceCapabilities2KHR) -> Result;
	ProcGetPhysicalDeviceSurfaceFormats2KHR                             :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pSurfaceInfo: ^PhysicalDeviceSurfaceInfo2KHR, pSurfaceFormatCount: ^u32, pSurfaceFormats: ^SurfaceFormat2KHR) -> Result;
	ProcGetPhysicalDeviceDisplayProperties2KHR                          :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pPropertyCount: ^u32, pProperties: ^DisplayProperties2KHR) -> Result;
	ProcGetPhysicalDeviceDisplayPlaneProperties2KHR                     :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pPropertyCount: ^u32, pProperties: ^DisplayPlaneProperties2KHR) -> Result;
	ProcGetDisplayModeProperties2KHR                                    :: #type proc"stdcall"(physicalDevice: PhysicalDevice, display: DisplayKHR, pPropertyCount: ^u32, pProperties: ^DisplayModeProperties2KHR) -> Result;
	ProcGetDisplayPlaneCapabilities2KHR                                 :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pDisplayPlaneInfo: ^DisplayPlaneInfo2KHR, pCapabilities: ^DisplayPlaneCapabilities2KHR) -> Result;
	ProcGetImageMemoryRequirements2KHR                                  :: #type proc"stdcall"(device: Device, pInfo: ^ImageMemoryRequirementsInfo2, pMemoryRequirements: ^MemoryRequirements2);
	ProcGetBufferMemoryRequirements2KHR                                 :: #type proc"stdcall"(device: Device, pInfo: ^BufferMemoryRequirementsInfo2, pMemoryRequirements: ^MemoryRequirements2);
	ProcGetImageSparseMemoryRequirements2KHR                            :: #type proc"stdcall"(device: Device, pInfo: ^ImageSparseMemoryRequirementsInfo2, pSparseMemoryRequirementCount: ^u32, pSparseMemoryRequirements: ^SparseImageMemoryRequirements2);
	ProcCreateSamplerYcbcrConversionKHR                                 :: #type proc"stdcall"(device: Device, pCreateInfo: ^SamplerYcbcrConversionCreateInfo, pAllocator: ^AllocationCallbacks, pYcbcrConversion: ^SamplerYcbcrConversion) -> Result;
	ProcDestroySamplerYcbcrConversionKHR                                :: #type proc"stdcall"(device: Device, ycbcrConversion: SamplerYcbcrConversion, pAllocator: ^AllocationCallbacks);
	ProcBindBufferMemory2KHR                                            :: #type proc"stdcall"(device: Device, bindInfoCount: u32, pBindInfos: ^BindBufferMemoryInfo) -> Result;
	ProcBindImageMemory2KHR                                             :: #type proc"stdcall"(device: Device, bindInfoCount: u32, pBindInfos: ^BindImageMemoryInfo) -> Result;
	ProcGetDescriptorSetLayoutSupportKHR                                :: #type proc"stdcall"(device: Device, pCreateInfo: ^DescriptorSetLayoutCreateInfo, pSupport: ^DescriptorSetLayoutSupport);
	ProcCmdDrawIndirectCountKHR                                         :: #type proc"stdcall"(commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: u32, stride: u32);
	ProcCmdDrawIndexedIndirectCountKHR                                  :: #type proc"stdcall"(commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: u32, stride: u32);
	ProcGetSemaphoreCounterValueKHR                                     :: #type proc"stdcall"(device: Device, semaphore: Semaphore, pValue: ^u64) -> Result;
	ProcWaitSemaphoresKHR                                               :: #type proc"stdcall"(device: Device, pWaitInfo: ^SemaphoreWaitInfo, timeout: u64) -> Result;
	ProcSignalSemaphoreKHR                                              :: #type proc"stdcall"(device: Device, pSignalInfo: ^SemaphoreSignalInfo) -> Result;
	ProcGetPhysicalDeviceFragmentShadingRatesKHR                        :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pFragmentShadingRateCount: ^u32, pFragmentShadingRates: ^PhysicalDeviceFragmentShadingRateKHR) -> Result;
	ProcCmdSetFragmentShadingRateKHR                                    :: #type proc"stdcall"(commandBuffer: CommandBuffer, pFragmentSize: ^Extent2D);
	ProcGetBufferDeviceAddressKHR                                       :: #type proc"stdcall"(device: Device, pInfo: ^BufferDeviceAddressInfo) -> DeviceAddress;
	ProcGetBufferOpaqueCaptureAddressKHR                                :: #type proc"stdcall"(device: Device, pInfo: ^BufferDeviceAddressInfo) -> u64;
	ProcGetDeviceMemoryOpaqueCaptureAddressKHR                          :: #type proc"stdcall"(device: Device, pInfo: ^DeviceMemoryOpaqueCaptureAddressInfo) -> u64;
	ProcCreateDeferredOperationKHR                                      :: #type proc"stdcall"(device: Device, pAllocator: ^AllocationCallbacks, pDeferredOperation: ^DeferredOperationKHR) -> Result;
	ProcDestroyDeferredOperationKHR                                     :: #type proc"stdcall"(device: Device, operation: DeferredOperationKHR, pAllocator: ^AllocationCallbacks);
	ProcGetDeferredOperationMaxConcurrencyKHR                           :: #type proc"stdcall"(device: Device, operation: DeferredOperationKHR) -> u32;
	ProcGetDeferredOperationResultKHR                                   :: #type proc"stdcall"(device: Device, operation: DeferredOperationKHR) -> Result;
	ProcDeferredOperationJoinKHR                                        :: #type proc"stdcall"(device: Device, operation: DeferredOperationKHR) -> Result;
	ProcGetPipelineExecutablePropertiesKHR                              :: #type proc"stdcall"(device: Device, pPipelineInfo: ^PipelineInfoKHR, pExecutableCount: ^u32, pProperties: ^PipelineExecutablePropertiesKHR) -> Result;
	ProcGetPipelineExecutableStatisticsKHR                              :: #type proc"stdcall"(device: Device, pExecutableInfo: ^PipelineExecutableInfoKHR, pStatisticCount: ^u32, pStatistics: ^PipelineExecutableStatisticKHR) -> Result;
	ProcGetPipelineExecutableInternalRepresentationsKHR                 :: #type proc"stdcall"(device: Device, pExecutableInfo: ^PipelineExecutableInfoKHR, pInternalRepresentationCount: ^u32, pInternalRepresentations: ^PipelineExecutableInternalRepresentationKHR) -> Result;
	ProcCmdCopyBuffer2KHR                                               :: #type proc"stdcall"(commandBuffer: CommandBuffer, pCopyBufferInfo: ^CopyBufferInfo2KHR);
	ProcCmdCopyImage2KHR                                                :: #type proc"stdcall"(commandBuffer: CommandBuffer, pCopyImageInfo: ^CopyImageInfo2KHR);
	ProcCmdCopyBufferToImage2KHR                                        :: #type proc"stdcall"(commandBuffer: CommandBuffer, pCopyBufferToImageInfo: ^CopyBufferToImageInfo2KHR);
	ProcCmdCopyImageToBuffer2KHR                                        :: #type proc"stdcall"(commandBuffer: CommandBuffer, pCopyImageToBufferInfo: ^CopyImageToBufferInfo2KHR);
	ProcCmdBlitImage2KHR                                                :: #type proc"stdcall"(commandBuffer: CommandBuffer, pBlitImageInfo: ^BlitImageInfo2KHR);
	ProcCmdResolveImage2KHR                                             :: #type proc"stdcall"(commandBuffer: CommandBuffer, pResolveImageInfo: ^ResolveImageInfo2KHR);
	ProcDebugReportCallbackEXT                                          :: #type proc"stdcall"(flags: DebugReportFlagsEXT, objectType: DebugReportObjectTypeEXT, object: u64, location: int, messageCode: i32, pLayerPrefix: cstring, pMessage: cstring, pUserData: rawptr) -> b32;
	ProcCreateDebugReportCallbackEXT                                    :: #type proc"stdcall"(instance: Instance, pCreateInfo: ^DebugReportCallbackCreateInfoEXT, pAllocator: ^AllocationCallbacks, pCallback: ^DebugReportCallbackEXT) -> Result;
	ProcDestroyDebugReportCallbackEXT                                   :: #type proc"stdcall"(instance: Instance, callback: DebugReportCallbackEXT, pAllocator: ^AllocationCallbacks);
	ProcDebugReportMessageEXT                                           :: #type proc"stdcall"(instance: Instance, flags: DebugReportFlagsEXT, objectType: DebugReportObjectTypeEXT, object: u64, location: int, messageCode: i32, pLayerPrefix: cstring, pMessage: cstring);
	ProcDebugMarkerSetObjectTagEXT                                      :: #type proc"stdcall"(device: Device, pTagInfo: ^DebugMarkerObjectTagInfoEXT) -> Result;
	ProcDebugMarkerSetObjectNameEXT                                     :: #type proc"stdcall"(device: Device, pNameInfo: ^DebugMarkerObjectNameInfoEXT) -> Result;
	ProcCmdDebugMarkerBeginEXT                                          :: #type proc"stdcall"(commandBuffer: CommandBuffer, pMarkerInfo: ^DebugMarkerMarkerInfoEXT);
	ProcCmdDebugMarkerEndEXT                                            :: #type proc"stdcall"(commandBuffer: CommandBuffer);
	ProcCmdDebugMarkerInsertEXT                                         :: #type proc"stdcall"(commandBuffer: CommandBuffer, pMarkerInfo: ^DebugMarkerMarkerInfoEXT);
	ProcCmdBindTransformFeedbackBuffersEXT                              :: #type proc"stdcall"(commandBuffer: CommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: ^Buffer, pOffsets: ^DeviceSize, pSizes: ^DeviceSize);
	ProcCmdBeginTransformFeedbackEXT                                    :: #type proc"stdcall"(commandBuffer: CommandBuffer, firstCounterBuffer: u32, counterBufferCount: u32, pCounterBuffers: ^Buffer, pCounterBufferOffsets: ^DeviceSize);
	ProcCmdEndTransformFeedbackEXT                                      :: #type proc"stdcall"(commandBuffer: CommandBuffer, firstCounterBuffer: u32, counterBufferCount: u32, pCounterBuffers: ^Buffer, pCounterBufferOffsets: ^DeviceSize);
	ProcCmdBeginQueryIndexedEXT                                         :: #type proc"stdcall"(commandBuffer: CommandBuffer, queryPool: QueryPool, query: u32, flags: QueryControlFlags, index: u32);
	ProcCmdEndQueryIndexedEXT                                           :: #type proc"stdcall"(commandBuffer: CommandBuffer, queryPool: QueryPool, query: u32, index: u32);
	ProcCmdDrawIndirectByteCountEXT                                     :: #type proc"stdcall"(commandBuffer: CommandBuffer, instanceCount: u32, firstInstance: u32, counterBuffer: Buffer, counterBufferOffset: DeviceSize, counterOffset: u32, vertexStride: u32);
	ProcGetImageViewHandleNVX                                           :: #type proc"stdcall"(device: Device, pInfo: ^ImageViewHandleInfoNVX) -> u32;
	ProcGetImageViewAddressNVX                                          :: #type proc"stdcall"(device: Device, imageView: ImageView, pProperties: ^ImageViewAddressPropertiesNVX) -> Result;
	ProcCmdDrawIndirectCountAMD                                         :: #type proc"stdcall"(commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: u32, stride: u32);
	ProcCmdDrawIndexedIndirectCountAMD                                  :: #type proc"stdcall"(commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: u32, stride: u32);
	ProcGetShaderInfoAMD                                                :: #type proc"stdcall"(device: Device, pipeline: Pipeline, shaderStage: ShaderStageFlags, infoType: ShaderInfoTypeAMD, pInfoSize: ^int, pInfo: rawptr) -> Result;
	ProcGetPhysicalDeviceExternalImageFormatPropertiesNV                :: #type proc"stdcall"(physicalDevice: PhysicalDevice, format: Format, type: ImageType, tiling: ImageTiling, usage: ImageUsageFlags, flags: ImageCreateFlags, externalHandleType: ExternalMemoryHandleTypeFlagsNV, pExternalImageFormatProperties: ^ExternalImageFormatPropertiesNV) -> Result;
	ProcCmdBeginConditionalRenderingEXT                                 :: #type proc"stdcall"(commandBuffer: CommandBuffer, pConditionalRenderingBegin: ^ConditionalRenderingBeginInfoEXT);
	ProcCmdEndConditionalRenderingEXT                                   :: #type proc"stdcall"(commandBuffer: CommandBuffer);
	ProcCmdSetViewportWScalingNV                                        :: #type proc"stdcall"(commandBuffer: CommandBuffer, firstViewport: u32, viewportCount: u32, pViewportWScalings: ^ViewportWScalingNV);
	ProcReleaseDisplayEXT                                               :: #type proc"stdcall"(physicalDevice: PhysicalDevice, display: DisplayKHR) -> Result;
	ProcGetPhysicalDeviceSurfaceCapabilities2EXT                        :: #type proc"stdcall"(physicalDevice: PhysicalDevice, surface: SurfaceKHR, pSurfaceCapabilities: ^SurfaceCapabilities2EXT) -> Result;
	ProcDisplayPowerControlEXT                                          :: #type proc"stdcall"(device: Device, display: DisplayKHR, pDisplayPowerInfo: ^DisplayPowerInfoEXT) -> Result;
	ProcRegisterDeviceEventEXT                                          :: #type proc"stdcall"(device: Device, pDeviceEventInfo: ^DeviceEventInfoEXT, pAllocator: ^AllocationCallbacks, pFence: ^Fence) -> Result;
	ProcRegisterDisplayEventEXT                                         :: #type proc"stdcall"(device: Device, display: DisplayKHR, pDisplayEventInfo: ^DisplayEventInfoEXT, pAllocator: ^AllocationCallbacks, pFence: ^Fence) -> Result;
	ProcGetSwapchainCounterEXT                                          :: #type proc"stdcall"(device: Device, swapchain: SwapchainKHR, counter: SurfaceCounterFlagsEXT, pCounterValue: ^u64) -> Result;
	ProcGetRefreshCycleDurationGOOGLE                                   :: #type proc"stdcall"(device: Device, swapchain: SwapchainKHR, pDisplayTimingProperties: ^RefreshCycleDurationGOOGLE) -> Result;
	ProcGetPastPresentationTimingGOOGLE                                 :: #type proc"stdcall"(device: Device, swapchain: SwapchainKHR, pPresentationTimingCount: ^u32, pPresentationTimings: ^PastPresentationTimingGOOGLE) -> Result;
	ProcCmdSetDiscardRectangleEXT                                       :: #type proc"stdcall"(commandBuffer: CommandBuffer, firstDiscardRectangle: u32, discardRectangleCount: u32, pDiscardRectangles: ^Rect2D);
	ProcSetHdrMetadataEXT                                               :: #type proc"stdcall"(device: Device, swapchainCount: u32, pSwapchains: ^SwapchainKHR, pMetadata: ^HdrMetadataEXT);
	ProcDebugUtilsMessengerCallbackEXT                                  :: #type proc"stdcall"(messageSeverity: DebugUtilsMessageSeverityFlagsEXT, messageTypes: DebugUtilsMessageTypeFlagsEXT, pCallbackData: ^DebugUtilsMessengerCallbackDataEXT, pUserData: rawptr) -> b32;
	ProcSetDebugUtilsObjectNameEXT                                      :: #type proc"stdcall"(device: Device, pNameInfo: ^DebugUtilsObjectNameInfoEXT) -> Result;
	ProcSetDebugUtilsObjectTagEXT                                       :: #type proc"stdcall"(device: Device, pTagInfo: ^DebugUtilsObjectTagInfoEXT) -> Result;
	ProcQueueBeginDebugUtilsLabelEXT                                    :: #type proc"stdcall"(queue: Queue, pLabelInfo: ^DebugUtilsLabelEXT);
	ProcQueueEndDebugUtilsLabelEXT                                      :: #type proc"stdcall"(queue: Queue);
	ProcQueueInsertDebugUtilsLabelEXT                                   :: #type proc"stdcall"(queue: Queue, pLabelInfo: ^DebugUtilsLabelEXT);
	ProcCmdBeginDebugUtilsLabelEXT                                      :: #type proc"stdcall"(commandBuffer: CommandBuffer, pLabelInfo: ^DebugUtilsLabelEXT);
	ProcCmdEndDebugUtilsLabelEXT                                        :: #type proc"stdcall"(commandBuffer: CommandBuffer);
	ProcCmdInsertDebugUtilsLabelEXT                                     :: #type proc"stdcall"(commandBuffer: CommandBuffer, pLabelInfo: ^DebugUtilsLabelEXT);
	ProcCreateDebugUtilsMessengerEXT                                    :: #type proc"stdcall"(instance: Instance, pCreateInfo: ^DebugUtilsMessengerCreateInfoEXT, pAllocator: ^AllocationCallbacks, pMessenger: ^DebugUtilsMessengerEXT) -> Result;
	ProcDestroyDebugUtilsMessengerEXT                                   :: #type proc"stdcall"(instance: Instance, messenger: DebugUtilsMessengerEXT, pAllocator: ^AllocationCallbacks);
	ProcSubmitDebugUtilsMessageEXT                                      :: #type proc"stdcall"(instance: Instance, messageSeverity: DebugUtilsMessageSeverityFlagsEXT, messageTypes: DebugUtilsMessageTypeFlagsEXT, pCallbackData: ^DebugUtilsMessengerCallbackDataEXT);
	ProcCmdSetSampleLocationsEXT                                        :: #type proc"stdcall"(commandBuffer: CommandBuffer, pSampleLocationsInfo: ^SampleLocationsInfoEXT);
	ProcGetPhysicalDeviceMultisamplePropertiesEXT                       :: #type proc"stdcall"(physicalDevice: PhysicalDevice, samples: SampleCountFlags, pMultisampleProperties: ^MultisamplePropertiesEXT);
	ProcGetImageDrmFormatModifierPropertiesEXT                          :: #type proc"stdcall"(device: Device, image: Image, pProperties: ^ImageDrmFormatModifierPropertiesEXT) -> Result;
	ProcCreateValidationCacheEXT                                        :: #type proc"stdcall"(device: Device, pCreateInfo: ^ValidationCacheCreateInfoEXT, pAllocator: ^AllocationCallbacks, pValidationCache: ^ValidationCacheEXT) -> Result;
	ProcDestroyValidationCacheEXT                                       :: #type proc"stdcall"(device: Device, validationCache: ValidationCacheEXT, pAllocator: ^AllocationCallbacks);
	ProcMergeValidationCachesEXT                                        :: #type proc"stdcall"(device: Device, dstCache: ValidationCacheEXT, srcCacheCount: u32, pSrcCaches: ^ValidationCacheEXT) -> Result;
	ProcGetValidationCacheDataEXT                                       :: #type proc"stdcall"(device: Device, validationCache: ValidationCacheEXT, pDataSize: ^int, pData: rawptr) -> Result;
	ProcCmdBindShadingRateImageNV                                       :: #type proc"stdcall"(commandBuffer: CommandBuffer, imageView: ImageView, imageLayout: ImageLayout);
	ProcCmdSetViewportShadingRatePaletteNV                              :: #type proc"stdcall"(commandBuffer: CommandBuffer, firstViewport: u32, viewportCount: u32, pShadingRatePalettes: ^ShadingRatePaletteNV);
	ProcCmdSetCoarseSampleOrderNV                                       :: #type proc"stdcall"(commandBuffer: CommandBuffer, sampleOrderType: CoarseSampleOrderTypeNV, customSampleOrderCount: u32, pCustomSampleOrders: ^CoarseSampleOrderCustomNV);
	ProcCreateAccelerationStructureNV                                   :: #type proc"stdcall"(device: Device, pCreateInfo: ^AccelerationStructureCreateInfoNV, pAllocator: ^AllocationCallbacks, pAccelerationStructure: ^AccelerationStructureNV) -> Result;
	ProcDestroyAccelerationStructureNV                                  :: #type proc"stdcall"(device: Device, accelerationStructure: AccelerationStructureNV, pAllocator: ^AllocationCallbacks);
	ProcGetAccelerationStructureMemoryRequirementsNV                    :: #type proc"stdcall"(device: Device, pInfo: ^AccelerationStructureMemoryRequirementsInfoNV, pMemoryRequirements: ^MemoryRequirements2KHR);
	ProcBindAccelerationStructureMemoryNV                               :: #type proc"stdcall"(device: Device, bindInfoCount: u32, pBindInfos: ^BindAccelerationStructureMemoryInfoNV) -> Result;
	ProcCmdBuildAccelerationStructureNV                                 :: #type proc"stdcall"(commandBuffer: CommandBuffer, pInfo: ^AccelerationStructureInfoNV, instanceData: Buffer, instanceOffset: DeviceSize, update: b32, dst: AccelerationStructureNV, src: AccelerationStructureNV, scratch: Buffer, scratchOffset: DeviceSize);
	ProcCmdCopyAccelerationStructureNV                                  :: #type proc"stdcall"(commandBuffer: CommandBuffer, dst: AccelerationStructureNV, src: AccelerationStructureNV, mode: CopyAccelerationStructureModeKHR);
	ProcCmdTraceRaysNV                                                  :: #type proc"stdcall"(commandBuffer: CommandBuffer, raygenShaderBindingTableBuffer: Buffer, raygenShaderBindingOffset: DeviceSize, missShaderBindingTableBuffer: Buffer, missShaderBindingOffset: DeviceSize, missShaderBindingStride: DeviceSize, hitShaderBindingTableBuffer: Buffer, hitShaderBindingOffset: DeviceSize, hitShaderBindingStride: DeviceSize, callableShaderBindingTableBuffer: Buffer, callableShaderBindingOffset: DeviceSize, callableShaderBindingStride: DeviceSize, width: u32, height: u32, depth: u32);
	ProcCreateRayTracingPipelinesNV                                     :: #type proc"stdcall"(device: Device, pipelineCache: PipelineCache, createInfoCount: u32, pCreateInfos: ^RayTracingPipelineCreateInfoNV, pAllocator: ^AllocationCallbacks, pPipelines: ^Pipeline) -> Result;
	ProcGetRayTracingShaderGroupHandlesKHR                              :: #type proc"stdcall"(device: Device, pipeline: Pipeline, firstGroup: u32, groupCount: u32, dataSize: int, pData: rawptr) -> Result;
	ProcGetRayTracingShaderGroupHandlesNV                               :: #type proc"stdcall"(device: Device, pipeline: Pipeline, firstGroup: u32, groupCount: u32, dataSize: int, pData: rawptr) -> Result;
	ProcGetAccelerationStructureHandleNV                                :: #type proc"stdcall"(device: Device, accelerationStructure: AccelerationStructureNV, dataSize: int, pData: rawptr) -> Result;
	ProcCmdWriteAccelerationStructuresPropertiesNV                      :: #type proc"stdcall"(commandBuffer: CommandBuffer, accelerationStructureCount: u32, pAccelerationStructures: ^AccelerationStructureNV, queryType: QueryType, queryPool: QueryPool, firstQuery: u32);
	ProcCompileDeferredNV                                               :: #type proc"stdcall"(device: Device, pipeline: Pipeline, shader: u32) -> Result;
	ProcGetMemoryHostPointerPropertiesEXT                               :: #type proc"stdcall"(device: Device, handleType: ExternalMemoryHandleTypeFlags, pHostPointer: rawptr, pMemoryHostPointerProperties: ^MemoryHostPointerPropertiesEXT) -> Result;
	ProcCmdWriteBufferMarkerAMD                                         :: #type proc"stdcall"(commandBuffer: CommandBuffer, pipelineStage: PipelineStageFlags, dstBuffer: Buffer, dstOffset: DeviceSize, marker: u32);
	ProcGetPhysicalDeviceCalibrateableTimeDomainsEXT                    :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pTimeDomainCount: ^u32, pTimeDomains: ^TimeDomainEXT) -> Result;
	ProcGetCalibratedTimestampsEXT                                      :: #type proc"stdcall"(device: Device, timestampCount: u32, pTimestampInfos: ^CalibratedTimestampInfoEXT, pTimestamps: ^u64, pMaxDeviation: ^u64) -> Result;
	ProcCmdDrawMeshTasksNV                                              :: #type proc"stdcall"(commandBuffer: CommandBuffer, taskCount: u32, firstTask: u32);
	ProcCmdDrawMeshTasksIndirectNV                                      :: #type proc"stdcall"(commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, drawCount: u32, stride: u32);
	ProcCmdDrawMeshTasksIndirectCountNV                                 :: #type proc"stdcall"(commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: u32, stride: u32);
	ProcCmdSetExclusiveScissorNV                                        :: #type proc"stdcall"(commandBuffer: CommandBuffer, firstExclusiveScissor: u32, exclusiveScissorCount: u32, pExclusiveScissors: ^Rect2D);
	ProcCmdSetCheckpointNV                                              :: #type proc"stdcall"(commandBuffer: CommandBuffer, pCheckpointMarker: rawptr);
	ProcGetQueueCheckpointDataNV                                        :: #type proc"stdcall"(queue: Queue, pCheckpointDataCount: ^u32, pCheckpointData: ^CheckpointDataNV);
	ProcInitializePerformanceApiINTEL                                   :: #type proc"stdcall"(device: Device, pInitializeInfo: ^InitializePerformanceApiInfoINTEL) -> Result;
	ProcUninitializePerformanceApiINTEL                                 :: #type proc"stdcall"(device: Device);
	ProcCmdSetPerformanceMarkerINTEL                                    :: #type proc"stdcall"(commandBuffer: CommandBuffer, pMarkerInfo: ^PerformanceMarkerInfoINTEL) -> Result;
	ProcCmdSetPerformanceStreamMarkerINTEL                              :: #type proc"stdcall"(commandBuffer: CommandBuffer, pMarkerInfo: ^PerformanceStreamMarkerInfoINTEL) -> Result;
	ProcCmdSetPerformanceOverrideINTEL                                  :: #type proc"stdcall"(commandBuffer: CommandBuffer, pOverrideInfo: ^PerformanceOverrideInfoINTEL) -> Result;
	ProcAcquirePerformanceConfigurationINTEL                            :: #type proc"stdcall"(device: Device, pAcquireInfo: ^PerformanceConfigurationAcquireInfoINTEL, pConfiguration: ^PerformanceConfigurationINTEL) -> Result;
	ProcReleasePerformanceConfigurationINTEL                            :: #type proc"stdcall"(device: Device, configuration: PerformanceConfigurationINTEL) -> Result;
	ProcQueueSetPerformanceConfigurationINTEL                           :: #type proc"stdcall"(queue: Queue, configuration: PerformanceConfigurationINTEL) -> Result;
	ProcGetPerformanceParameterINTEL                                    :: #type proc"stdcall"(device: Device, parameter: PerformanceParameterTypeINTEL, pValue: ^PerformanceValueINTEL) -> Result;
	ProcSetLocalDimmingAMD                                              :: #type proc"stdcall"(device: Device, swapChain: SwapchainKHR, localDimmingEnable: b32);
	ProcGetBufferDeviceAddressEXT                                       :: #type proc"stdcall"(device: Device, pInfo: ^BufferDeviceAddressInfo) -> DeviceAddress;
	ProcGetPhysicalDeviceToolPropertiesEXT                              :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pToolCount: ^u32, pToolProperties: ^PhysicalDeviceToolPropertiesEXT) -> Result;
	ProcGetPhysicalDeviceCooperativeMatrixPropertiesNV                  :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pPropertyCount: ^u32, pProperties: ^CooperativeMatrixPropertiesNV) -> Result;
	ProcGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pCombinationCount: ^u32, pCombinations: ^FramebufferMixedSamplesCombinationNV) -> Result;
	ProcCreateHeadlessSurfaceEXT                                        :: #type proc"stdcall"(instance: Instance, pCreateInfo: ^HeadlessSurfaceCreateInfoEXT, pAllocator: ^AllocationCallbacks, pSurface: ^SurfaceKHR) -> Result;
	ProcCmdSetLineStippleEXT                                            :: #type proc"stdcall"(commandBuffer: CommandBuffer, lineStippleFactor: u32, lineStipplePattern: u16);
	ProcResetQueryPoolEXT                                               :: #type proc"stdcall"(device: Device, queryPool: QueryPool, firstQuery: u32, queryCount: u32);
	ProcCmdSetCullModeEXT                                               :: #type proc"stdcall"(commandBuffer: CommandBuffer, cullMode: CullModeFlags);
	ProcCmdSetFrontFaceEXT                                              :: #type proc"stdcall"(commandBuffer: CommandBuffer, frontFace: FrontFace);
	ProcCmdSetPrimitiveTopologyEXT                                      :: #type proc"stdcall"(commandBuffer: CommandBuffer, primitiveTopology: PrimitiveTopology);
	ProcCmdSetViewportWithCountEXT                                      :: #type proc"stdcall"(commandBuffer: CommandBuffer, viewportCount: u32, pViewports: ^Viewport);
	ProcCmdSetScissorWithCountEXT                                       :: #type proc"stdcall"(commandBuffer: CommandBuffer, scissorCount: u32, pScissors: ^Rect2D);
	ProcCmdBindVertexBuffers2EXT                                        :: #type proc"stdcall"(commandBuffer: CommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: ^Buffer, pOffsets: ^DeviceSize, pSizes: ^DeviceSize, pStrides: ^DeviceSize);
	ProcCmdSetDepthTestEnableEXT                                        :: #type proc"stdcall"(commandBuffer: CommandBuffer, depthTestEnable: b32);
	ProcCmdSetDepthWriteEnableEXT                                       :: #type proc"stdcall"(commandBuffer: CommandBuffer, depthWriteEnable: b32);
	ProcCmdSetDepthCompareOpEXT                                         :: #type proc"stdcall"(commandBuffer: CommandBuffer, depthCompareOp: CompareOp);
	ProcCmdSetDepthBoundsTestEnableEXT                                  :: #type proc"stdcall"(commandBuffer: CommandBuffer, depthBoundsTestEnable: b32);
	ProcCmdSetStencilTestEnableEXT                                      :: #type proc"stdcall"(commandBuffer: CommandBuffer, stencilTestEnable: b32);
	ProcCmdSetStencilOpEXT                                              :: #type proc"stdcall"(commandBuffer: CommandBuffer, faceMask: StencilFaceFlags, failOp: StencilOp, passOp: StencilOp, depthFailOp: StencilOp, compareOp: CompareOp);
	ProcGetGeneratedCommandsMemoryRequirementsNV                        :: #type proc"stdcall"(device: Device, pInfo: ^GeneratedCommandsMemoryRequirementsInfoNV, pMemoryRequirements: ^MemoryRequirements2);
	ProcCmdPreprocessGeneratedCommandsNV                                :: #type proc"stdcall"(commandBuffer: CommandBuffer, pGeneratedCommandsInfo: ^GeneratedCommandsInfoNV);
	ProcCmdExecuteGeneratedCommandsNV                                   :: #type proc"stdcall"(commandBuffer: CommandBuffer, isPreprocessed: b32, pGeneratedCommandsInfo: ^GeneratedCommandsInfoNV);
	ProcCmdBindPipelineShaderGroupNV                                    :: #type proc"stdcall"(commandBuffer: CommandBuffer, pipelineBindPoint: PipelineBindPoint, pipeline: Pipeline, groupIndex: u32);
	ProcCreateIndirectCommandsLayoutNV                                  :: #type proc"stdcall"(device: Device, pCreateInfo: ^IndirectCommandsLayoutCreateInfoNV, pAllocator: ^AllocationCallbacks, pIndirectCommandsLayout: ^IndirectCommandsLayoutNV) -> Result;
	ProcDestroyIndirectCommandsLayoutNV                                 :: #type proc"stdcall"(device: Device, indirectCommandsLayout: IndirectCommandsLayoutNV, pAllocator: ^AllocationCallbacks);
	ProcDeviceMemoryReportCallbackEXT                                   :: #type proc"stdcall"(pCallbackData: ^DeviceMemoryReportCallbackDataEXT, pUserData: rawptr);
	ProcCreatePrivateDataSlotEXT                                        :: #type proc"stdcall"(device: Device, pCreateInfo: ^PrivateDataSlotCreateInfoEXT, pAllocator: ^AllocationCallbacks, pPrivateDataSlot: ^PrivateDataSlotEXT) -> Result;
	ProcDestroyPrivateDataSlotEXT                                       :: #type proc"stdcall"(device: Device, privateDataSlot: PrivateDataSlotEXT, pAllocator: ^AllocationCallbacks);
	ProcSetPrivateDataEXT                                               :: #type proc"stdcall"(device: Device, objectType: ObjectType, objectHandle: u64, privateDataSlot: PrivateDataSlotEXT, data: u64) -> Result;
	ProcGetPrivateDataEXT                                               :: #type proc"stdcall"(device: Device, objectType: ObjectType, objectHandle: u64, privateDataSlot: PrivateDataSlotEXT, pData: ^u64);
	ProcCmdSetFragmentShadingRateEnumNV                                 :: #type proc"stdcall"(commandBuffer: CommandBuffer, shadingRate: FragmentShadingRateNV);
	ProcAcquireWinrtDisplayNV                                           :: #type proc"stdcall"(physicalDevice: PhysicalDevice, display: DisplayKHR) -> Result;
	ProcGetWinrtDisplayNV                                               :: #type proc"stdcall"(physicalDevice: PhysicalDevice, deviceRelativeId: u32, pDisplay: ^DisplayKHR) -> Result;
	ProcCreateAccelerationStructureKHR                                  :: #type proc"stdcall"(device: Device, pCreateInfo: ^AccelerationStructureCreateInfoKHR, pAllocator: ^AllocationCallbacks, pAccelerationStructure: ^AccelerationStructureKHR) -> Result;
	ProcDestroyAccelerationStructureKHR                                 :: #type proc"stdcall"(device: Device, accelerationStructure: AccelerationStructureKHR, pAllocator: ^AllocationCallbacks);
	ProcCmdBuildAccelerationStructuresKHR                               :: #type proc"stdcall"(commandBuffer: CommandBuffer, infoCount: u32, pInfos: ^AccelerationStructureBuildGeometryInfoKHR, ppBuildRangeInfos: ^^AccelerationStructureBuildRangeInfoKHR);
	ProcCmdBuildAccelerationStructuresIndirectKHR                       :: #type proc"stdcall"(commandBuffer: CommandBuffer, infoCount: u32, pInfos: ^AccelerationStructureBuildGeometryInfoKHR, pIndirectDeviceAddresses: ^DeviceAddress, pIndirectStrides: ^u32, ppMaxPrimitiveCounts: ^^u32);
	ProcBuildAccelerationStructuresKHR                                  :: #type proc"stdcall"(device: Device, deferredOperation: DeferredOperationKHR, infoCount: u32, pInfos: ^AccelerationStructureBuildGeometryInfoKHR, ppBuildRangeInfos: ^^AccelerationStructureBuildRangeInfoKHR) -> Result;
	ProcCopyAccelerationStructureKHR                                    :: #type proc"stdcall"(device: Device, deferredOperation: DeferredOperationKHR, pInfo: ^CopyAccelerationStructureInfoKHR) -> Result;
	ProcCopyAccelerationStructureToMemoryKHR                            :: #type proc"stdcall"(device: Device, deferredOperation: DeferredOperationKHR, pInfo: ^CopyAccelerationStructureToMemoryInfoKHR) -> Result;
	ProcCopyMemoryToAccelerationStructureKHR                            :: #type proc"stdcall"(device: Device, deferredOperation: DeferredOperationKHR, pInfo: ^CopyMemoryToAccelerationStructureInfoKHR) -> Result;
	ProcWriteAccelerationStructuresPropertiesKHR                        :: #type proc"stdcall"(device: Device, accelerationStructureCount: u32, pAccelerationStructures: ^AccelerationStructureKHR, queryType: QueryType, dataSize: int, pData: rawptr, stride: int) -> Result;
	ProcCmdCopyAccelerationStructureKHR                                 :: #type proc"stdcall"(commandBuffer: CommandBuffer, pInfo: ^CopyAccelerationStructureInfoKHR);
	ProcCmdCopyAccelerationStructureToMemoryKHR                         :: #type proc"stdcall"(commandBuffer: CommandBuffer, pInfo: ^CopyAccelerationStructureToMemoryInfoKHR);
	ProcCmdCopyMemoryToAccelerationStructureKHR                         :: #type proc"stdcall"(commandBuffer: CommandBuffer, pInfo: ^CopyMemoryToAccelerationStructureInfoKHR);
	ProcGetAccelerationStructureDeviceAddressKHR                        :: #type proc"stdcall"(device: Device, pInfo: ^AccelerationStructureDeviceAddressInfoKHR) -> DeviceAddress;
	ProcCmdWriteAccelerationStructuresPropertiesKHR                     :: #type proc"stdcall"(commandBuffer: CommandBuffer, accelerationStructureCount: u32, pAccelerationStructures: ^AccelerationStructureKHR, queryType: QueryType, queryPool: QueryPool, firstQuery: u32);
	ProcGetDeviceAccelerationStructureCompatibilityKHR                  :: #type proc"stdcall"(device: Device, pVersionInfo: ^AccelerationStructureVersionInfoKHR, pCompatibility: ^AccelerationStructureCompatibilityKHR);
	ProcGetAccelerationStructureBuildSizesKHR                           :: #type proc"stdcall"(device: Device, buildType: AccelerationStructureBuildTypeKHR, pBuildInfo: ^AccelerationStructureBuildGeometryInfoKHR, pMaxPrimitiveCounts: ^u32, pSizeInfo: ^AccelerationStructureBuildSizesInfoKHR);
	ProcCmdTraceRaysKHR                                                 :: #type proc"stdcall"(commandBuffer: CommandBuffer, pRaygenShaderBindingTable: ^StridedDeviceAddressRegionKHR, pMissShaderBindingTable: ^StridedDeviceAddressRegionKHR, pHitShaderBindingTable: ^StridedDeviceAddressRegionKHR, pCallableShaderBindingTable: ^StridedDeviceAddressRegionKHR, width: u32, height: u32, depth: u32);
	ProcCreateRayTracingPipelinesKHR                                    :: #type proc"stdcall"(device: Device, deferredOperation: DeferredOperationKHR, pipelineCache: PipelineCache, createInfoCount: u32, pCreateInfos: ^RayTracingPipelineCreateInfoKHR, pAllocator: ^AllocationCallbacks, pPipelines: ^Pipeline) -> Result;
	ProcGetRayTracingCaptureReplayShaderGroupHandlesKHR                 :: #type proc"stdcall"(device: Device, pipeline: Pipeline, firstGroup: u32, groupCount: u32, dataSize: int, pData: rawptr) -> Result;
	ProcCmdTraceRaysIndirectKHR                                         :: #type proc"stdcall"(commandBuffer: CommandBuffer, pRaygenShaderBindingTable: ^StridedDeviceAddressRegionKHR, pMissShaderBindingTable: ^StridedDeviceAddressRegionKHR, pHitShaderBindingTable: ^StridedDeviceAddressRegionKHR, pCallableShaderBindingTable: ^StridedDeviceAddressRegionKHR, indirectDeviceAddress: DeviceAddress);
	ProcGetRayTracingShaderGroupStackSizeKHR                            :: #type proc"stdcall"(device: Device, pipeline: Pipeline, group: u32, groupShader: ShaderGroupShaderKHR) -> DeviceSize;
	ProcCmdSetRayTracingPipelineStackSizeKHR                            :: #type proc"stdcall"(commandBuffer: CommandBuffer, pipelineStackSize: u32);
	ProcCreateWin32SurfaceKHR                                           :: #type proc"stdcall"(instance: Instance, pCreateInfo: ^Win32SurfaceCreateInfoKHR, pAllocator: ^AllocationCallbacks, pSurface: ^SurfaceKHR) -> Result;
	ProcGetPhysicalDeviceWin32PresentationSupportKHR                    :: #type proc"stdcall"(physicalDevice: PhysicalDevice, queueFamilyIndex: u32) -> b32;
	ProcGetMemoryWin32HandleKHR                                         :: #type proc"stdcall"(device: Device, pGetWin32HandleInfo: ^MemoryGetWin32HandleInfoKHR, pHandle: ^HANDLE) -> Result;
	ProcGetMemoryWin32HandlePropertiesKHR                               :: #type proc"stdcall"(device: Device, handleType: ExternalMemoryHandleTypeFlags, handle: HANDLE, pMemoryWin32HandleProperties: ^MemoryWin32HandlePropertiesKHR) -> Result;
	ProcImportSemaphoreWin32HandleKHR                                   :: #type proc"stdcall"(device: Device, pImportSemaphoreWin32HandleInfo: ^ImportSemaphoreWin32HandleInfoKHR) -> Result;
	ProcGetSemaphoreWin32HandleKHR                                      :: #type proc"stdcall"(device: Device, pGetWin32HandleInfo: ^SemaphoreGetWin32HandleInfoKHR, pHandle: ^HANDLE) -> Result;
	ProcImportFenceWin32HandleKHR                                       :: #type proc"stdcall"(device: Device, pImportFenceWin32HandleInfo: ^ImportFenceWin32HandleInfoKHR) -> Result;
	ProcGetFenceWin32HandleKHR                                          :: #type proc"stdcall"(device: Device, pGetWin32HandleInfo: ^FenceGetWin32HandleInfoKHR, pHandle: ^HANDLE) -> Result;
	ProcGetMemoryWin32HandleNV                                          :: #type proc"stdcall"(device: Device, memory: DeviceMemory, handleType: ExternalMemoryHandleTypeFlagsNV, pHandle: ^HANDLE) -> Result;
	ProcGetPhysicalDeviceSurfacePresentModes2EXT                        :: #type proc"stdcall"(physicalDevice: PhysicalDevice, pSurfaceInfo: ^PhysicalDeviceSurfaceInfo2KHR, pPresentModeCount: ^u32, pPresentModes: ^PresentModeKHR) -> Result;
	ProcAcquireFullScreenExclusiveModeEXT                               :: #type proc"stdcall"(device: Device, swapchain: SwapchainKHR) -> Result;
	ProcReleaseFullScreenExclusiveModeEXT                               :: #type proc"stdcall"(device: Device, swapchain: SwapchainKHR) -> Result;
	ProcGetDeviceGroupSurfacePresentModes2EXT                           :: #type proc"stdcall"(device: Device, pSurfaceInfo: ^PhysicalDeviceSurfaceInfo2KHR, pModes: ^DeviceGroupPresentModeFlagsKHR) -> Result;
}


// Instance Procedures
DestroyInstance:                                                 ProcDestroyInstance;
EnumeratePhysicalDevices:                                        ProcEnumeratePhysicalDevices;
GetPhysicalDeviceFeatures:                                       ProcGetPhysicalDeviceFeatures;
GetPhysicalDeviceFormatProperties:                               ProcGetPhysicalDeviceFormatProperties;
GetPhysicalDeviceImageFormatProperties:                          ProcGetPhysicalDeviceImageFormatProperties;
GetPhysicalDeviceProperties:                                     ProcGetPhysicalDeviceProperties;
GetPhysicalDeviceQueueFamilyProperties:                          ProcGetPhysicalDeviceQueueFamilyProperties;
GetPhysicalDeviceMemoryProperties:                               ProcGetPhysicalDeviceMemoryProperties;
GetInstanceProcAddr:                                             ProcGetInstanceProcAddr;
CreateDevice:                                                    ProcCreateDevice;
EnumerateDeviceExtensionProperties:                              ProcEnumerateDeviceExtensionProperties;
EnumerateDeviceLayerProperties:                                  ProcEnumerateDeviceLayerProperties;
GetPhysicalDeviceSparseImageFormatProperties:                    ProcGetPhysicalDeviceSparseImageFormatProperties;
EnumeratePhysicalDeviceGroups:                                   ProcEnumeratePhysicalDeviceGroups;
GetPhysicalDeviceFeatures2:                                      ProcGetPhysicalDeviceFeatures2;
GetPhysicalDeviceProperties2:                                    ProcGetPhysicalDeviceProperties2;
GetPhysicalDeviceFormatProperties2:                              ProcGetPhysicalDeviceFormatProperties2;
GetPhysicalDeviceImageFormatProperties2:                         ProcGetPhysicalDeviceImageFormatProperties2;
GetPhysicalDeviceQueueFamilyProperties2:                         ProcGetPhysicalDeviceQueueFamilyProperties2;
GetPhysicalDeviceMemoryProperties2:                              ProcGetPhysicalDeviceMemoryProperties2;
GetPhysicalDeviceSparseImageFormatProperties2:                   ProcGetPhysicalDeviceSparseImageFormatProperties2;
GetPhysicalDeviceExternalBufferProperties:                       ProcGetPhysicalDeviceExternalBufferProperties;
GetPhysicalDeviceExternalFenceProperties:                        ProcGetPhysicalDeviceExternalFenceProperties;
GetPhysicalDeviceExternalSemaphoreProperties:                    ProcGetPhysicalDeviceExternalSemaphoreProperties;
DestroySurfaceKHR:                                               ProcDestroySurfaceKHR;
GetPhysicalDeviceSurfaceSupportKHR:                              ProcGetPhysicalDeviceSurfaceSupportKHR;
GetPhysicalDeviceSurfaceCapabilitiesKHR:                         ProcGetPhysicalDeviceSurfaceCapabilitiesKHR;
GetPhysicalDeviceSurfaceFormatsKHR:                              ProcGetPhysicalDeviceSurfaceFormatsKHR;
GetPhysicalDeviceSurfacePresentModesKHR:                         ProcGetPhysicalDeviceSurfacePresentModesKHR;
GetPhysicalDevicePresentRectanglesKHR:                           ProcGetPhysicalDevicePresentRectanglesKHR;
GetPhysicalDeviceDisplayPropertiesKHR:                           ProcGetPhysicalDeviceDisplayPropertiesKHR;
GetPhysicalDeviceDisplayPlanePropertiesKHR:                      ProcGetPhysicalDeviceDisplayPlanePropertiesKHR;
GetDisplayPlaneSupportedDisplaysKHR:                             ProcGetDisplayPlaneSupportedDisplaysKHR;
GetDisplayModePropertiesKHR:                                     ProcGetDisplayModePropertiesKHR;
CreateDisplayModeKHR:                                            ProcCreateDisplayModeKHR;
GetDisplayPlaneCapabilitiesKHR:                                  ProcGetDisplayPlaneCapabilitiesKHR;
CreateDisplayPlaneSurfaceKHR:                                    ProcCreateDisplayPlaneSurfaceKHR;
GetPhysicalDeviceFeatures2KHR:                                   ProcGetPhysicalDeviceFeatures2KHR;
GetPhysicalDeviceProperties2KHR:                                 ProcGetPhysicalDeviceProperties2KHR;
GetPhysicalDeviceFormatProperties2KHR:                           ProcGetPhysicalDeviceFormatProperties2KHR;
GetPhysicalDeviceImageFormatProperties2KHR:                      ProcGetPhysicalDeviceImageFormatProperties2KHR;
GetPhysicalDeviceQueueFamilyProperties2KHR:                      ProcGetPhysicalDeviceQueueFamilyProperties2KHR;
GetPhysicalDeviceMemoryProperties2KHR:                           ProcGetPhysicalDeviceMemoryProperties2KHR;
GetPhysicalDeviceSparseImageFormatProperties2KHR:                ProcGetPhysicalDeviceSparseImageFormatProperties2KHR;
EnumeratePhysicalDeviceGroupsKHR:                                ProcEnumeratePhysicalDeviceGroupsKHR;
GetPhysicalDeviceExternalBufferPropertiesKHR:                    ProcGetPhysicalDeviceExternalBufferPropertiesKHR;
GetPhysicalDeviceExternalSemaphorePropertiesKHR:                 ProcGetPhysicalDeviceExternalSemaphorePropertiesKHR;
GetPhysicalDeviceExternalFencePropertiesKHR:                     ProcGetPhysicalDeviceExternalFencePropertiesKHR;
EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR:   ProcEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR;
GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR:           ProcGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR;
GetPhysicalDeviceSurfaceCapabilities2KHR:                        ProcGetPhysicalDeviceSurfaceCapabilities2KHR;
GetPhysicalDeviceSurfaceFormats2KHR:                             ProcGetPhysicalDeviceSurfaceFormats2KHR;
GetPhysicalDeviceDisplayProperties2KHR:                          ProcGetPhysicalDeviceDisplayProperties2KHR;
GetPhysicalDeviceDisplayPlaneProperties2KHR:                     ProcGetPhysicalDeviceDisplayPlaneProperties2KHR;
GetDisplayModeProperties2KHR:                                    ProcGetDisplayModeProperties2KHR;
GetDisplayPlaneCapabilities2KHR:                                 ProcGetDisplayPlaneCapabilities2KHR;
GetPhysicalDeviceFragmentShadingRatesKHR:                        ProcGetPhysicalDeviceFragmentShadingRatesKHR;
CreateDebugReportCallbackEXT:                                    ProcCreateDebugReportCallbackEXT;
DestroyDebugReportCallbackEXT:                                   ProcDestroyDebugReportCallbackEXT;
DebugReportMessageEXT:                                           ProcDebugReportMessageEXT;
GetPhysicalDeviceExternalImageFormatPropertiesNV:                ProcGetPhysicalDeviceExternalImageFormatPropertiesNV;
ReleaseDisplayEXT:                                               ProcReleaseDisplayEXT;
GetPhysicalDeviceSurfaceCapabilities2EXT:                        ProcGetPhysicalDeviceSurfaceCapabilities2EXT;
DebugUtilsMessengerCallbackEXT:                                  ProcDebugUtilsMessengerCallbackEXT;
CreateDebugUtilsMessengerEXT:                                    ProcCreateDebugUtilsMessengerEXT;
DestroyDebugUtilsMessengerEXT:                                   ProcDestroyDebugUtilsMessengerEXT;
SubmitDebugUtilsMessageEXT:                                      ProcSubmitDebugUtilsMessageEXT;
GetPhysicalDeviceMultisamplePropertiesEXT:                       ProcGetPhysicalDeviceMultisamplePropertiesEXT;
GetPhysicalDeviceCalibrateableTimeDomainsEXT:                    ProcGetPhysicalDeviceCalibrateableTimeDomainsEXT;
GetPhysicalDeviceToolPropertiesEXT:                              ProcGetPhysicalDeviceToolPropertiesEXT;
GetPhysicalDeviceCooperativeMatrixPropertiesNV:                  ProcGetPhysicalDeviceCooperativeMatrixPropertiesNV;
GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV: ProcGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV;
CreateHeadlessSurfaceEXT:                                        ProcCreateHeadlessSurfaceEXT;
AcquireWinrtDisplayNV:                                           ProcAcquireWinrtDisplayNV;
GetWinrtDisplayNV:                                               ProcGetWinrtDisplayNV;
CreateWin32SurfaceKHR:                                           ProcCreateWin32SurfaceKHR;
GetPhysicalDeviceWin32PresentationSupportKHR:                    ProcGetPhysicalDeviceWin32PresentationSupportKHR;
GetPhysicalDeviceSurfacePresentModes2EXT:                        ProcGetPhysicalDeviceSurfacePresentModes2EXT;

// Device Procedures
GetDeviceProcAddr:                               ProcGetDeviceProcAddr;
DestroyDevice:                                   ProcDestroyDevice;
GetDeviceQueue:                                  ProcGetDeviceQueue;
QueueSubmit:                                     ProcQueueSubmit;
QueueWaitIdle:                                   ProcQueueWaitIdle;
DeviceWaitIdle:                                  ProcDeviceWaitIdle;
AllocateMemory:                                  ProcAllocateMemory;
FreeMemory:                                      ProcFreeMemory;
MapMemory:                                       ProcMapMemory;
UnmapMemory:                                     ProcUnmapMemory;
FlushMappedMemoryRanges:                         ProcFlushMappedMemoryRanges;
InvalidateMappedMemoryRanges:                    ProcInvalidateMappedMemoryRanges;
GetDeviceMemoryCommitment:                       ProcGetDeviceMemoryCommitment;
BindBufferMemory:                                ProcBindBufferMemory;
BindImageMemory:                                 ProcBindImageMemory;
GetBufferMemoryRequirements:                     ProcGetBufferMemoryRequirements;
GetImageMemoryRequirements:                      ProcGetImageMemoryRequirements;
GetImageSparseMemoryRequirements:                ProcGetImageSparseMemoryRequirements;
QueueBindSparse:                                 ProcQueueBindSparse;
CreateFence:                                     ProcCreateFence;
DestroyFence:                                    ProcDestroyFence;
ResetFences:                                     ProcResetFences;
GetFenceStatus:                                  ProcGetFenceStatus;
WaitForFences:                                   ProcWaitForFences;
CreateSemaphore:                                 ProcCreateSemaphore;
DestroySemaphore:                                ProcDestroySemaphore;
CreateEvent:                                     ProcCreateEvent;
DestroyEvent:                                    ProcDestroyEvent;
GetEventStatus:                                  ProcGetEventStatus;
SetEvent:                                        ProcSetEvent;
ResetEvent:                                      ProcResetEvent;
CreateQueryPool:                                 ProcCreateQueryPool;
DestroyQueryPool:                                ProcDestroyQueryPool;
GetQueryPoolResults:                             ProcGetQueryPoolResults;
CreateBuffer:                                    ProcCreateBuffer;
DestroyBuffer:                                   ProcDestroyBuffer;
CreateBufferView:                                ProcCreateBufferView;
DestroyBufferView:                               ProcDestroyBufferView;
CreateImage:                                     ProcCreateImage;
DestroyImage:                                    ProcDestroyImage;
GetImageSubresourceLayout:                       ProcGetImageSubresourceLayout;
CreateImageView:                                 ProcCreateImageView;
DestroyImageView:                                ProcDestroyImageView;
CreateShaderModule:                              ProcCreateShaderModule;
DestroyShaderModule:                             ProcDestroyShaderModule;
CreatePipelineCache:                             ProcCreatePipelineCache;
DestroyPipelineCache:                            ProcDestroyPipelineCache;
GetPipelineCacheData:                            ProcGetPipelineCacheData;
MergePipelineCaches:                             ProcMergePipelineCaches;
CreateGraphicsPipelines:                         ProcCreateGraphicsPipelines;
CreateComputePipelines:                          ProcCreateComputePipelines;
DestroyPipeline:                                 ProcDestroyPipeline;
CreatePipelineLayout:                            ProcCreatePipelineLayout;
DestroyPipelineLayout:                           ProcDestroyPipelineLayout;
CreateSampler:                                   ProcCreateSampler;
DestroySampler:                                  ProcDestroySampler;
CreateDescriptorSetLayout:                       ProcCreateDescriptorSetLayout;
DestroyDescriptorSetLayout:                      ProcDestroyDescriptorSetLayout;
CreateDescriptorPool:                            ProcCreateDescriptorPool;
DestroyDescriptorPool:                           ProcDestroyDescriptorPool;
ResetDescriptorPool:                             ProcResetDescriptorPool;
AllocateDescriptorSets:                          ProcAllocateDescriptorSets;
FreeDescriptorSets:                              ProcFreeDescriptorSets;
UpdateDescriptorSets:                            ProcUpdateDescriptorSets;
CreateFramebuffer:                               ProcCreateFramebuffer;
DestroyFramebuffer:                              ProcDestroyFramebuffer;
CreateRenderPass:                                ProcCreateRenderPass;
DestroyRenderPass:                               ProcDestroyRenderPass;
GetRenderAreaGranularity:                        ProcGetRenderAreaGranularity;
CreateCommandPool:                               ProcCreateCommandPool;
DestroyCommandPool:                              ProcDestroyCommandPool;
ResetCommandPool:                                ProcResetCommandPool;
AllocateCommandBuffers:                          ProcAllocateCommandBuffers;
FreeCommandBuffers:                              ProcFreeCommandBuffers;
BeginCommandBuffer:                              ProcBeginCommandBuffer;
EndCommandBuffer:                                ProcEndCommandBuffer;
ResetCommandBuffer:                              ProcResetCommandBuffer;
CmdBindPipeline:                                 ProcCmdBindPipeline;
CmdSetViewport:                                  ProcCmdSetViewport;
CmdSetScissor:                                   ProcCmdSetScissor;
CmdSetLineWidth:                                 ProcCmdSetLineWidth;
CmdSetDepthBias:                                 ProcCmdSetDepthBias;
CmdSetBlendConstants:                            ProcCmdSetBlendConstants;
CmdSetDepthBounds:                               ProcCmdSetDepthBounds;
CmdSetStencilCompareMask:                        ProcCmdSetStencilCompareMask;
CmdSetStencilWriteMask:                          ProcCmdSetStencilWriteMask;
CmdSetStencilReference:                          ProcCmdSetStencilReference;
CmdBindDescriptorSets:                           ProcCmdBindDescriptorSets;
CmdBindIndexBuffer:                              ProcCmdBindIndexBuffer;
CmdBindVertexBuffers:                            ProcCmdBindVertexBuffers;
CmdDraw:                                         ProcCmdDraw;
CmdDrawIndexed:                                  ProcCmdDrawIndexed;
CmdDrawIndirect:                                 ProcCmdDrawIndirect;
CmdDrawIndexedIndirect:                          ProcCmdDrawIndexedIndirect;
CmdDispatch:                                     ProcCmdDispatch;
CmdDispatchIndirect:                             ProcCmdDispatchIndirect;
CmdCopyBuffer:                                   ProcCmdCopyBuffer;
CmdCopyImage:                                    ProcCmdCopyImage;
CmdBlitImage:                                    ProcCmdBlitImage;
CmdCopyBufferToImage:                            ProcCmdCopyBufferToImage;
CmdCopyImageToBuffer:                            ProcCmdCopyImageToBuffer;
CmdUpdateBuffer:                                 ProcCmdUpdateBuffer;
CmdFillBuffer:                                   ProcCmdFillBuffer;
CmdClearColorImage:                              ProcCmdClearColorImage;
CmdClearDepthStencilImage:                       ProcCmdClearDepthStencilImage;
CmdClearAttachments:                             ProcCmdClearAttachments;
CmdResolveImage:                                 ProcCmdResolveImage;
CmdSetEvent:                                     ProcCmdSetEvent;
CmdResetEvent:                                   ProcCmdResetEvent;
CmdWaitEvents:                                   ProcCmdWaitEvents;
CmdPipelineBarrier:                              ProcCmdPipelineBarrier;
CmdBeginQuery:                                   ProcCmdBeginQuery;
CmdEndQuery:                                     ProcCmdEndQuery;
CmdResetQueryPool:                               ProcCmdResetQueryPool;
CmdWriteTimestamp:                               ProcCmdWriteTimestamp;
CmdCopyQueryPoolResults:                         ProcCmdCopyQueryPoolResults;
CmdPushConstants:                                ProcCmdPushConstants;
CmdBeginRenderPass:                              ProcCmdBeginRenderPass;
CmdNextSubpass:                                  ProcCmdNextSubpass;
CmdEndRenderPass:                                ProcCmdEndRenderPass;
CmdExecuteCommands:                              ProcCmdExecuteCommands;
BindBufferMemory2:                               ProcBindBufferMemory2;
BindImageMemory2:                                ProcBindImageMemory2;
GetDeviceGroupPeerMemoryFeatures:                ProcGetDeviceGroupPeerMemoryFeatures;
CmdSetDeviceMask:                                ProcCmdSetDeviceMask;
CmdDispatchBase:                                 ProcCmdDispatchBase;
GetImageMemoryRequirements2:                     ProcGetImageMemoryRequirements2;
GetBufferMemoryRequirements2:                    ProcGetBufferMemoryRequirements2;
GetImageSparseMemoryRequirements2:               ProcGetImageSparseMemoryRequirements2;
TrimCommandPool:                                 ProcTrimCommandPool;
GetDeviceQueue2:                                 ProcGetDeviceQueue2;
CreateSamplerYcbcrConversion:                    ProcCreateSamplerYcbcrConversion;
DestroySamplerYcbcrConversion:                   ProcDestroySamplerYcbcrConversion;
CreateDescriptorUpdateTemplate:                  ProcCreateDescriptorUpdateTemplate;
DestroyDescriptorUpdateTemplate:                 ProcDestroyDescriptorUpdateTemplate;
UpdateDescriptorSetWithTemplate:                 ProcUpdateDescriptorSetWithTemplate;
GetDescriptorSetLayoutSupport:                   ProcGetDescriptorSetLayoutSupport;
CmdDrawIndirectCount:                            ProcCmdDrawIndirectCount;
CmdDrawIndexedIndirectCount:                     ProcCmdDrawIndexedIndirectCount;
CreateRenderPass2:                               ProcCreateRenderPass2;
CmdBeginRenderPass2:                             ProcCmdBeginRenderPass2;
CmdNextSubpass2:                                 ProcCmdNextSubpass2;
CmdEndRenderPass2:                               ProcCmdEndRenderPass2;
ResetQueryPool:                                  ProcResetQueryPool;
GetSemaphoreCounterValue:                        ProcGetSemaphoreCounterValue;
WaitSemaphores:                                  ProcWaitSemaphores;
SignalSemaphore:                                 ProcSignalSemaphore;
GetBufferDeviceAddress:                          ProcGetBufferDeviceAddress;
GetBufferOpaqueCaptureAddress:                   ProcGetBufferOpaqueCaptureAddress;
GetDeviceMemoryOpaqueCaptureAddress:             ProcGetDeviceMemoryOpaqueCaptureAddress;
CreateSwapchainKHR:                              ProcCreateSwapchainKHR;
DestroySwapchainKHR:                             ProcDestroySwapchainKHR;
GetSwapchainImagesKHR:                           ProcGetSwapchainImagesKHR;
AcquireNextImageKHR:                             ProcAcquireNextImageKHR;
QueuePresentKHR:                                 ProcQueuePresentKHR;
GetDeviceGroupPresentCapabilitiesKHR:            ProcGetDeviceGroupPresentCapabilitiesKHR;
GetDeviceGroupSurfacePresentModesKHR:            ProcGetDeviceGroupSurfacePresentModesKHR;
AcquireNextImage2KHR:                            ProcAcquireNextImage2KHR;
CreateSharedSwapchainsKHR:                       ProcCreateSharedSwapchainsKHR;
GetDeviceGroupPeerMemoryFeaturesKHR:             ProcGetDeviceGroupPeerMemoryFeaturesKHR;
CmdSetDeviceMaskKHR:                             ProcCmdSetDeviceMaskKHR;
CmdDispatchBaseKHR:                              ProcCmdDispatchBaseKHR;
TrimCommandPoolKHR:                              ProcTrimCommandPoolKHR;
GetMemoryFdKHR:                                  ProcGetMemoryFdKHR;
GetMemoryFdPropertiesKHR:                        ProcGetMemoryFdPropertiesKHR;
ImportSemaphoreFdKHR:                            ProcImportSemaphoreFdKHR;
GetSemaphoreFdKHR:                               ProcGetSemaphoreFdKHR;
CmdPushDescriptorSetKHR:                         ProcCmdPushDescriptorSetKHR;
CmdPushDescriptorSetWithTemplateKHR:             ProcCmdPushDescriptorSetWithTemplateKHR;
CreateDescriptorUpdateTemplateKHR:               ProcCreateDescriptorUpdateTemplateKHR;
DestroyDescriptorUpdateTemplateKHR:              ProcDestroyDescriptorUpdateTemplateKHR;
UpdateDescriptorSetWithTemplateKHR:              ProcUpdateDescriptorSetWithTemplateKHR;
CreateRenderPass2KHR:                            ProcCreateRenderPass2KHR;
CmdBeginRenderPass2KHR:                          ProcCmdBeginRenderPass2KHR;
CmdNextSubpass2KHR:                              ProcCmdNextSubpass2KHR;
CmdEndRenderPass2KHR:                            ProcCmdEndRenderPass2KHR;
GetSwapchainStatusKHR:                           ProcGetSwapchainStatusKHR;
ImportFenceFdKHR:                                ProcImportFenceFdKHR;
GetFenceFdKHR:                                   ProcGetFenceFdKHR;
AcquireProfilingLockKHR:                         ProcAcquireProfilingLockKHR;
ReleaseProfilingLockKHR:                         ProcReleaseProfilingLockKHR;
GetImageMemoryRequirements2KHR:                  ProcGetImageMemoryRequirements2KHR;
GetBufferMemoryRequirements2KHR:                 ProcGetBufferMemoryRequirements2KHR;
GetImageSparseMemoryRequirements2KHR:            ProcGetImageSparseMemoryRequirements2KHR;
CreateSamplerYcbcrConversionKHR:                 ProcCreateSamplerYcbcrConversionKHR;
DestroySamplerYcbcrConversionKHR:                ProcDestroySamplerYcbcrConversionKHR;
BindBufferMemory2KHR:                            ProcBindBufferMemory2KHR;
BindImageMemory2KHR:                             ProcBindImageMemory2KHR;
GetDescriptorSetLayoutSupportKHR:                ProcGetDescriptorSetLayoutSupportKHR;
CmdDrawIndirectCountKHR:                         ProcCmdDrawIndirectCountKHR;
CmdDrawIndexedIndirectCountKHR:                  ProcCmdDrawIndexedIndirectCountKHR;
GetSemaphoreCounterValueKHR:                     ProcGetSemaphoreCounterValueKHR;
WaitSemaphoresKHR:                               ProcWaitSemaphoresKHR;
SignalSemaphoreKHR:                              ProcSignalSemaphoreKHR;
CmdSetFragmentShadingRateKHR:                    ProcCmdSetFragmentShadingRateKHR;
GetBufferDeviceAddressKHR:                       ProcGetBufferDeviceAddressKHR;
GetBufferOpaqueCaptureAddressKHR:                ProcGetBufferOpaqueCaptureAddressKHR;
GetDeviceMemoryOpaqueCaptureAddressKHR:          ProcGetDeviceMemoryOpaqueCaptureAddressKHR;
CreateDeferredOperationKHR:                      ProcCreateDeferredOperationKHR;
DestroyDeferredOperationKHR:                     ProcDestroyDeferredOperationKHR;
GetDeferredOperationMaxConcurrencyKHR:           ProcGetDeferredOperationMaxConcurrencyKHR;
GetDeferredOperationResultKHR:                   ProcGetDeferredOperationResultKHR;
DeferredOperationJoinKHR:                        ProcDeferredOperationJoinKHR;
GetPipelineExecutablePropertiesKHR:              ProcGetPipelineExecutablePropertiesKHR;
GetPipelineExecutableStatisticsKHR:              ProcGetPipelineExecutableStatisticsKHR;
GetPipelineExecutableInternalRepresentationsKHR: ProcGetPipelineExecutableInternalRepresentationsKHR;
CmdCopyBuffer2KHR:                               ProcCmdCopyBuffer2KHR;
CmdCopyImage2KHR:                                ProcCmdCopyImage2KHR;
CmdCopyBufferToImage2KHR:                        ProcCmdCopyBufferToImage2KHR;
CmdCopyImageToBuffer2KHR:                        ProcCmdCopyImageToBuffer2KHR;
CmdBlitImage2KHR:                                ProcCmdBlitImage2KHR;
CmdResolveImage2KHR:                             ProcCmdResolveImage2KHR;
DebugMarkerSetObjectTagEXT:                      ProcDebugMarkerSetObjectTagEXT;
DebugMarkerSetObjectNameEXT:                     ProcDebugMarkerSetObjectNameEXT;
CmdDebugMarkerBeginEXT:                          ProcCmdDebugMarkerBeginEXT;
CmdDebugMarkerEndEXT:                            ProcCmdDebugMarkerEndEXT;
CmdDebugMarkerInsertEXT:                         ProcCmdDebugMarkerInsertEXT;
CmdBindTransformFeedbackBuffersEXT:              ProcCmdBindTransformFeedbackBuffersEXT;
CmdBeginTransformFeedbackEXT:                    ProcCmdBeginTransformFeedbackEXT;
CmdEndTransformFeedbackEXT:                      ProcCmdEndTransformFeedbackEXT;
CmdBeginQueryIndexedEXT:                         ProcCmdBeginQueryIndexedEXT;
CmdEndQueryIndexedEXT:                           ProcCmdEndQueryIndexedEXT;
CmdDrawIndirectByteCountEXT:                     ProcCmdDrawIndirectByteCountEXT;
GetImageViewHandleNVX:                           ProcGetImageViewHandleNVX;
GetImageViewAddressNVX:                          ProcGetImageViewAddressNVX;
CmdDrawIndirectCountAMD:                         ProcCmdDrawIndirectCountAMD;
CmdDrawIndexedIndirectCountAMD:                  ProcCmdDrawIndexedIndirectCountAMD;
GetShaderInfoAMD:                                ProcGetShaderInfoAMD;
CmdBeginConditionalRenderingEXT:                 ProcCmdBeginConditionalRenderingEXT;
CmdEndConditionalRenderingEXT:                   ProcCmdEndConditionalRenderingEXT;
CmdSetViewportWScalingNV:                        ProcCmdSetViewportWScalingNV;
DisplayPowerControlEXT:                          ProcDisplayPowerControlEXT;
RegisterDeviceEventEXT:                          ProcRegisterDeviceEventEXT;
RegisterDisplayEventEXT:                         ProcRegisterDisplayEventEXT;
GetSwapchainCounterEXT:                          ProcGetSwapchainCounterEXT;
GetRefreshCycleDurationGOOGLE:                   ProcGetRefreshCycleDurationGOOGLE;
GetPastPresentationTimingGOOGLE:                 ProcGetPastPresentationTimingGOOGLE;
CmdSetDiscardRectangleEXT:                       ProcCmdSetDiscardRectangleEXT;
SetHdrMetadataEXT:                               ProcSetHdrMetadataEXT;
SetDebugUtilsObjectNameEXT:                      ProcSetDebugUtilsObjectNameEXT;
SetDebugUtilsObjectTagEXT:                       ProcSetDebugUtilsObjectTagEXT;
QueueBeginDebugUtilsLabelEXT:                    ProcQueueBeginDebugUtilsLabelEXT;
QueueEndDebugUtilsLabelEXT:                      ProcQueueEndDebugUtilsLabelEXT;
QueueInsertDebugUtilsLabelEXT:                   ProcQueueInsertDebugUtilsLabelEXT;
CmdBeginDebugUtilsLabelEXT:                      ProcCmdBeginDebugUtilsLabelEXT;
CmdEndDebugUtilsLabelEXT:                        ProcCmdEndDebugUtilsLabelEXT;
CmdInsertDebugUtilsLabelEXT:                     ProcCmdInsertDebugUtilsLabelEXT;
CmdSetSampleLocationsEXT:                        ProcCmdSetSampleLocationsEXT;
GetImageDrmFormatModifierPropertiesEXT:          ProcGetImageDrmFormatModifierPropertiesEXT;
CreateValidationCacheEXT:                        ProcCreateValidationCacheEXT;
DestroyValidationCacheEXT:                       ProcDestroyValidationCacheEXT;
MergeValidationCachesEXT:                        ProcMergeValidationCachesEXT;
GetValidationCacheDataEXT:                       ProcGetValidationCacheDataEXT;
CmdBindShadingRateImageNV:                       ProcCmdBindShadingRateImageNV;
CmdSetViewportShadingRatePaletteNV:              ProcCmdSetViewportShadingRatePaletteNV;
CmdSetCoarseSampleOrderNV:                       ProcCmdSetCoarseSampleOrderNV;
CreateAccelerationStructureNV:                   ProcCreateAccelerationStructureNV;
DestroyAccelerationStructureNV:                  ProcDestroyAccelerationStructureNV;
GetAccelerationStructureMemoryRequirementsNV:    ProcGetAccelerationStructureMemoryRequirementsNV;
BindAccelerationStructureMemoryNV:               ProcBindAccelerationStructureMemoryNV;
CmdBuildAccelerationStructureNV:                 ProcCmdBuildAccelerationStructureNV;
CmdCopyAccelerationStructureNV:                  ProcCmdCopyAccelerationStructureNV;
CmdTraceRaysNV:                                  ProcCmdTraceRaysNV;
CreateRayTracingPipelinesNV:                     ProcCreateRayTracingPipelinesNV;
GetRayTracingShaderGroupHandlesKHR:              ProcGetRayTracingShaderGroupHandlesKHR;
GetRayTracingShaderGroupHandlesNV:               ProcGetRayTracingShaderGroupHandlesNV;
GetAccelerationStructureHandleNV:                ProcGetAccelerationStructureHandleNV;
CmdWriteAccelerationStructuresPropertiesNV:      ProcCmdWriteAccelerationStructuresPropertiesNV;
CompileDeferredNV:                               ProcCompileDeferredNV;
GetMemoryHostPointerPropertiesEXT:               ProcGetMemoryHostPointerPropertiesEXT;
CmdWriteBufferMarkerAMD:                         ProcCmdWriteBufferMarkerAMD;
GetCalibratedTimestampsEXT:                      ProcGetCalibratedTimestampsEXT;
CmdDrawMeshTasksNV:                              ProcCmdDrawMeshTasksNV;
CmdDrawMeshTasksIndirectNV:                      ProcCmdDrawMeshTasksIndirectNV;
CmdDrawMeshTasksIndirectCountNV:                 ProcCmdDrawMeshTasksIndirectCountNV;
CmdSetExclusiveScissorNV:                        ProcCmdSetExclusiveScissorNV;
CmdSetCheckpointNV:                              ProcCmdSetCheckpointNV;
GetQueueCheckpointDataNV:                        ProcGetQueueCheckpointDataNV;
InitializePerformanceApiINTEL:                   ProcInitializePerformanceApiINTEL;
UninitializePerformanceApiINTEL:                 ProcUninitializePerformanceApiINTEL;
CmdSetPerformanceMarkerINTEL:                    ProcCmdSetPerformanceMarkerINTEL;
CmdSetPerformanceStreamMarkerINTEL:              ProcCmdSetPerformanceStreamMarkerINTEL;
CmdSetPerformanceOverrideINTEL:                  ProcCmdSetPerformanceOverrideINTEL;
AcquirePerformanceConfigurationINTEL:            ProcAcquirePerformanceConfigurationINTEL;
ReleasePerformanceConfigurationINTEL:            ProcReleasePerformanceConfigurationINTEL;
QueueSetPerformanceConfigurationINTEL:           ProcQueueSetPerformanceConfigurationINTEL;
GetPerformanceParameterINTEL:                    ProcGetPerformanceParameterINTEL;
SetLocalDimmingAMD:                              ProcSetLocalDimmingAMD;
GetBufferDeviceAddressEXT:                       ProcGetBufferDeviceAddressEXT;
CmdSetLineStippleEXT:                            ProcCmdSetLineStippleEXT;
ResetQueryPoolEXT:                               ProcResetQueryPoolEXT;
CmdSetCullModeEXT:                               ProcCmdSetCullModeEXT;
CmdSetFrontFaceEXT:                              ProcCmdSetFrontFaceEXT;
CmdSetPrimitiveTopologyEXT:                      ProcCmdSetPrimitiveTopologyEXT;
CmdSetViewportWithCountEXT:                      ProcCmdSetViewportWithCountEXT;
CmdSetScissorWithCountEXT:                       ProcCmdSetScissorWithCountEXT;
CmdBindVertexBuffers2EXT:                        ProcCmdBindVertexBuffers2EXT;
CmdSetDepthTestEnableEXT:                        ProcCmdSetDepthTestEnableEXT;
CmdSetDepthWriteEnableEXT:                       ProcCmdSetDepthWriteEnableEXT;
CmdSetDepthCompareOpEXT:                         ProcCmdSetDepthCompareOpEXT;
CmdSetDepthBoundsTestEnableEXT:                  ProcCmdSetDepthBoundsTestEnableEXT;
CmdSetStencilTestEnableEXT:                      ProcCmdSetStencilTestEnableEXT;
CmdSetStencilOpEXT:                              ProcCmdSetStencilOpEXT;
GetGeneratedCommandsMemoryRequirementsNV:        ProcGetGeneratedCommandsMemoryRequirementsNV;
CmdPreprocessGeneratedCommandsNV:                ProcCmdPreprocessGeneratedCommandsNV;
CmdExecuteGeneratedCommandsNV:                   ProcCmdExecuteGeneratedCommandsNV;
CmdBindPipelineShaderGroupNV:                    ProcCmdBindPipelineShaderGroupNV;
CreateIndirectCommandsLayoutNV:                  ProcCreateIndirectCommandsLayoutNV;
DestroyIndirectCommandsLayoutNV:                 ProcDestroyIndirectCommandsLayoutNV;
CreatePrivateDataSlotEXT:                        ProcCreatePrivateDataSlotEXT;
DestroyPrivateDataSlotEXT:                       ProcDestroyPrivateDataSlotEXT;
SetPrivateDataEXT:                               ProcSetPrivateDataEXT;
GetPrivateDataEXT:                               ProcGetPrivateDataEXT;
CmdSetFragmentShadingRateEnumNV:                 ProcCmdSetFragmentShadingRateEnumNV;
CreateAccelerationStructureKHR:                  ProcCreateAccelerationStructureKHR;
DestroyAccelerationStructureKHR:                 ProcDestroyAccelerationStructureKHR;
CmdBuildAccelerationStructuresKHR:               ProcCmdBuildAccelerationStructuresKHR;
CmdBuildAccelerationStructuresIndirectKHR:       ProcCmdBuildAccelerationStructuresIndirectKHR;
BuildAccelerationStructuresKHR:                  ProcBuildAccelerationStructuresKHR;
CopyAccelerationStructureKHR:                    ProcCopyAccelerationStructureKHR;
CopyAccelerationStructureToMemoryKHR:            ProcCopyAccelerationStructureToMemoryKHR;
CopyMemoryToAccelerationStructureKHR:            ProcCopyMemoryToAccelerationStructureKHR;
WriteAccelerationStructuresPropertiesKHR:        ProcWriteAccelerationStructuresPropertiesKHR;
CmdCopyAccelerationStructureKHR:                 ProcCmdCopyAccelerationStructureKHR;
CmdCopyAccelerationStructureToMemoryKHR:         ProcCmdCopyAccelerationStructureToMemoryKHR;
CmdCopyMemoryToAccelerationStructureKHR:         ProcCmdCopyMemoryToAccelerationStructureKHR;
GetAccelerationStructureDeviceAddressKHR:        ProcGetAccelerationStructureDeviceAddressKHR;
CmdWriteAccelerationStructuresPropertiesKHR:     ProcCmdWriteAccelerationStructuresPropertiesKHR;
GetDeviceAccelerationStructureCompatibilityKHR:  ProcGetDeviceAccelerationStructureCompatibilityKHR;
GetAccelerationStructureBuildSizesKHR:           ProcGetAccelerationStructureBuildSizesKHR;
CmdTraceRaysKHR:                                 ProcCmdTraceRaysKHR;
CreateRayTracingPipelinesKHR:                    ProcCreateRayTracingPipelinesKHR;
GetRayTracingCaptureReplayShaderGroupHandlesKHR: ProcGetRayTracingCaptureReplayShaderGroupHandlesKHR;
CmdTraceRaysIndirectKHR:                         ProcCmdTraceRaysIndirectKHR;
GetRayTracingShaderGroupStackSizeKHR:            ProcGetRayTracingShaderGroupStackSizeKHR;
CmdSetRayTracingPipelineStackSizeKHR:            ProcCmdSetRayTracingPipelineStackSizeKHR;
GetMemoryWin32HandleKHR:                         ProcGetMemoryWin32HandleKHR;
GetMemoryWin32HandlePropertiesKHR:               ProcGetMemoryWin32HandlePropertiesKHR;
ImportSemaphoreWin32HandleKHR:                   ProcImportSemaphoreWin32HandleKHR;
GetSemaphoreWin32HandleKHR:                      ProcGetSemaphoreWin32HandleKHR;
ImportFenceWin32HandleKHR:                       ProcImportFenceWin32HandleKHR;
GetFenceWin32HandleKHR:                          ProcGetFenceWin32HandleKHR;
GetMemoryWin32HandleNV:                          ProcGetMemoryWin32HandleNV;
AcquireFullScreenExclusiveModeEXT:               ProcAcquireFullScreenExclusiveModeEXT;
ReleaseFullScreenExclusiveModeEXT:               ProcReleaseFullScreenExclusiveModeEXT;
GetDeviceGroupSurfacePresentModes2EXT:           ProcGetDeviceGroupSurfacePresentModes2EXT;

// Loader Procedures
CreateInstance:                       ProcCreateInstance;
EnumerateInstanceExtensionProperties: ProcEnumerateInstanceExtensionProperties;
EnumerateInstanceLayerProperties:     ProcEnumerateInstanceLayerProperties;
EnumerateInstanceVersion:             ProcEnumerateInstanceVersion;
DeviceMemoryReportCallbackEXT:        ProcDeviceMemoryReportCallbackEXT;

// load all the functions that do not require an instance to be loaded
// call this AFTER vk.GetInstanceProcAddr is loaded
load_proc_addresses_no_instance :: proc() {
	CreateInstance = auto_cast GetInstanceProcAddr(nil, "vkCreateInstance");
	EnumerateInstanceExtensionProperties = auto_cast GetInstanceProcAddr(nil, "vkEnumerateInstanceExtensionProperties");
	EnumerateInstanceLayerProperties = auto_cast GetInstanceProcAddr(nil, "vkEnumerateInstanceLayerProperties");
	EnumerateInstanceVersion = auto_cast GetInstanceProcAddr(nil, "vkEnumerateInstanceVersion");
	DeviceMemoryReportCallbackEXT = auto_cast GetInstanceProcAddr(nil, "vkDeviceMemoryReportCallbackEXT");
}

// load all the functions that require a created instance to be loaded
// call this AFTER vk.GetInstanceProcAddr is loaded and you created a vulkan instance
load_proc_addresses_with_instance :: proc(instance: ^Instance) {
	DestroyInstance = auto_cast GetInstanceProcAddr(instance^, "vkDestroyInstance");
	EnumeratePhysicalDevices = auto_cast GetInstanceProcAddr(instance^, "vkEnumeratePhysicalDevices");
	GetPhysicalDeviceFeatures = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceFeatures");
	GetPhysicalDeviceFormatProperties = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceFormatProperties");
	GetPhysicalDeviceImageFormatProperties = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceImageFormatProperties");
	GetPhysicalDeviceProperties = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceProperties");
	GetPhysicalDeviceQueueFamilyProperties = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceQueueFamilyProperties");
	GetPhysicalDeviceMemoryProperties = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceMemoryProperties");
	GetInstanceProcAddr = auto_cast GetInstanceProcAddr(instance^, "vkGetInstanceProcAddr");
	CreateDevice = auto_cast GetInstanceProcAddr(instance^, "vkCreateDevice");
	EnumerateDeviceExtensionProperties = auto_cast GetInstanceProcAddr(instance^, "vkEnumerateDeviceExtensionProperties");
	EnumerateDeviceLayerProperties = auto_cast GetInstanceProcAddr(instance^, "vkEnumerateDeviceLayerProperties");
	GetPhysicalDeviceSparseImageFormatProperties = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceSparseImageFormatProperties");
	EnumeratePhysicalDeviceGroups = auto_cast GetInstanceProcAddr(instance^, "vkEnumeratePhysicalDeviceGroups");
	GetPhysicalDeviceFeatures2 = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceFeatures2");
	GetPhysicalDeviceProperties2 = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceProperties2");
	GetPhysicalDeviceFormatProperties2 = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceFormatProperties2");
	GetPhysicalDeviceImageFormatProperties2 = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceImageFormatProperties2");
	GetPhysicalDeviceQueueFamilyProperties2 = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceQueueFamilyProperties2");
	GetPhysicalDeviceMemoryProperties2 = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceMemoryProperties2");
	GetPhysicalDeviceSparseImageFormatProperties2 = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceSparseImageFormatProperties2");
	GetPhysicalDeviceExternalBufferProperties = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceExternalBufferProperties");
	GetPhysicalDeviceExternalFenceProperties = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceExternalFenceProperties");
	GetPhysicalDeviceExternalSemaphoreProperties = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceExternalSemaphoreProperties");
	DestroySurfaceKHR = auto_cast GetInstanceProcAddr(instance^, "vkDestroySurfaceKHR");
	GetPhysicalDeviceSurfaceSupportKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceSurfaceSupportKHR");
	GetPhysicalDeviceSurfaceCapabilitiesKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceSurfaceCapabilitiesKHR");
	GetPhysicalDeviceSurfaceFormatsKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceSurfaceFormatsKHR");
	GetPhysicalDeviceSurfacePresentModesKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceSurfacePresentModesKHR");
	GetPhysicalDevicePresentRectanglesKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDevicePresentRectanglesKHR");
	GetPhysicalDeviceDisplayPropertiesKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceDisplayPropertiesKHR");
	GetPhysicalDeviceDisplayPlanePropertiesKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceDisplayPlanePropertiesKHR");
	GetDisplayPlaneSupportedDisplaysKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetDisplayPlaneSupportedDisplaysKHR");
	GetDisplayModePropertiesKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetDisplayModePropertiesKHR");
	CreateDisplayModeKHR = auto_cast GetInstanceProcAddr(instance^, "vkCreateDisplayModeKHR");
	GetDisplayPlaneCapabilitiesKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetDisplayPlaneCapabilitiesKHR");
	CreateDisplayPlaneSurfaceKHR = auto_cast GetInstanceProcAddr(instance^, "vkCreateDisplayPlaneSurfaceKHR");
	GetPhysicalDeviceFeatures2KHR = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceFeatures2KHR");
	GetPhysicalDeviceProperties2KHR = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceProperties2KHR");
	GetPhysicalDeviceFormatProperties2KHR = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceFormatProperties2KHR");
	GetPhysicalDeviceImageFormatProperties2KHR = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceImageFormatProperties2KHR");
	GetPhysicalDeviceQueueFamilyProperties2KHR = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceQueueFamilyProperties2KHR");
	GetPhysicalDeviceMemoryProperties2KHR = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceMemoryProperties2KHR");
	GetPhysicalDeviceSparseImageFormatProperties2KHR = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceSparseImageFormatProperties2KHR");
	EnumeratePhysicalDeviceGroupsKHR = auto_cast GetInstanceProcAddr(instance^, "vkEnumeratePhysicalDeviceGroupsKHR");
	GetPhysicalDeviceExternalBufferPropertiesKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceExternalBufferPropertiesKHR");
	GetPhysicalDeviceExternalSemaphorePropertiesKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR");
	GetPhysicalDeviceExternalFencePropertiesKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceExternalFencePropertiesKHR");
	EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = auto_cast GetInstanceProcAddr(instance^, "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR");
	GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR");
	GetPhysicalDeviceSurfaceCapabilities2KHR = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceSurfaceCapabilities2KHR");
	GetPhysicalDeviceSurfaceFormats2KHR = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceSurfaceFormats2KHR");
	GetPhysicalDeviceDisplayProperties2KHR = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceDisplayProperties2KHR");
	GetPhysicalDeviceDisplayPlaneProperties2KHR = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceDisplayPlaneProperties2KHR");
	GetDisplayModeProperties2KHR = auto_cast GetInstanceProcAddr(instance^, "vkGetDisplayModeProperties2KHR");
	GetDisplayPlaneCapabilities2KHR = auto_cast GetInstanceProcAddr(instance^, "vkGetDisplayPlaneCapabilities2KHR");
	GetPhysicalDeviceFragmentShadingRatesKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceFragmentShadingRatesKHR");
	CreateDebugReportCallbackEXT = auto_cast GetInstanceProcAddr(instance^, "vkCreateDebugReportCallbackEXT");
	DestroyDebugReportCallbackEXT = auto_cast GetInstanceProcAddr(instance^, "vkDestroyDebugReportCallbackEXT");
	DebugReportMessageEXT = auto_cast GetInstanceProcAddr(instance^, "vkDebugReportMessageEXT");
	GetPhysicalDeviceExternalImageFormatPropertiesNV = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceExternalImageFormatPropertiesNV");
	ReleaseDisplayEXT = auto_cast GetInstanceProcAddr(instance^, "vkReleaseDisplayEXT");
	GetPhysicalDeviceSurfaceCapabilities2EXT = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceSurfaceCapabilities2EXT");
	DebugUtilsMessengerCallbackEXT = auto_cast GetInstanceProcAddr(instance^, "vkDebugUtilsMessengerCallbackEXT");
	CreateDebugUtilsMessengerEXT = auto_cast GetInstanceProcAddr(instance^, "vkCreateDebugUtilsMessengerEXT");
	DestroyDebugUtilsMessengerEXT = auto_cast GetInstanceProcAddr(instance^, "vkDestroyDebugUtilsMessengerEXT");
	SubmitDebugUtilsMessageEXT = auto_cast GetInstanceProcAddr(instance^, "vkSubmitDebugUtilsMessageEXT");
	GetPhysicalDeviceMultisamplePropertiesEXT = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceMultisamplePropertiesEXT");
	GetPhysicalDeviceCalibrateableTimeDomainsEXT = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT");
	GetPhysicalDeviceToolPropertiesEXT = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceToolPropertiesEXT");
	GetPhysicalDeviceCooperativeMatrixPropertiesNV = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV");
	GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV");
	CreateHeadlessSurfaceEXT = auto_cast GetInstanceProcAddr(instance^, "vkCreateHeadlessSurfaceEXT");
	AcquireWinrtDisplayNV = auto_cast GetInstanceProcAddr(instance^, "vkAcquireWinrtDisplayNV");
	GetWinrtDisplayNV = auto_cast GetInstanceProcAddr(instance^, "vkGetWinrtDisplayNV");
	CreateWin32SurfaceKHR = auto_cast GetInstanceProcAddr(instance^, "vkCreateWin32SurfaceKHR");
	GetPhysicalDeviceWin32PresentationSupportKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceWin32PresentationSupportKHR");
	GetPhysicalDeviceSurfacePresentModes2EXT = auto_cast GetInstanceProcAddr(instance^, "vkGetPhysicalDeviceSurfacePresentModes2EXT");
	GetDeviceProcAddr = auto_cast GetInstanceProcAddr(instance^, "vkGetDeviceProcAddr");
	DestroyDevice = auto_cast GetInstanceProcAddr(instance^, "vkDestroyDevice");
	GetDeviceQueue = auto_cast GetInstanceProcAddr(instance^, "vkGetDeviceQueue");
	QueueSubmit = auto_cast GetInstanceProcAddr(instance^, "vkQueueSubmit");
	QueueWaitIdle = auto_cast GetInstanceProcAddr(instance^, "vkQueueWaitIdle");
	DeviceWaitIdle = auto_cast GetInstanceProcAddr(instance^, "vkDeviceWaitIdle");
	AllocateMemory = auto_cast GetInstanceProcAddr(instance^, "vkAllocateMemory");
	FreeMemory = auto_cast GetInstanceProcAddr(instance^, "vkFreeMemory");
	MapMemory = auto_cast GetInstanceProcAddr(instance^, "vkMapMemory");
	UnmapMemory = auto_cast GetInstanceProcAddr(instance^, "vkUnmapMemory");
	FlushMappedMemoryRanges = auto_cast GetInstanceProcAddr(instance^, "vkFlushMappedMemoryRanges");
	InvalidateMappedMemoryRanges = auto_cast GetInstanceProcAddr(instance^, "vkInvalidateMappedMemoryRanges");
	GetDeviceMemoryCommitment = auto_cast GetInstanceProcAddr(instance^, "vkGetDeviceMemoryCommitment");
	BindBufferMemory = auto_cast GetInstanceProcAddr(instance^, "vkBindBufferMemory");
	BindImageMemory = auto_cast GetInstanceProcAddr(instance^, "vkBindImageMemory");
	GetBufferMemoryRequirements = auto_cast GetInstanceProcAddr(instance^, "vkGetBufferMemoryRequirements");
	GetImageMemoryRequirements = auto_cast GetInstanceProcAddr(instance^, "vkGetImageMemoryRequirements");
	GetImageSparseMemoryRequirements = auto_cast GetInstanceProcAddr(instance^, "vkGetImageSparseMemoryRequirements");
	QueueBindSparse = auto_cast GetInstanceProcAddr(instance^, "vkQueueBindSparse");
	CreateFence = auto_cast GetInstanceProcAddr(instance^, "vkCreateFence");
	DestroyFence = auto_cast GetInstanceProcAddr(instance^, "vkDestroyFence");
	ResetFences = auto_cast GetInstanceProcAddr(instance^, "vkResetFences");
	GetFenceStatus = auto_cast GetInstanceProcAddr(instance^, "vkGetFenceStatus");
	WaitForFences = auto_cast GetInstanceProcAddr(instance^, "vkWaitForFences");
	CreateSemaphore = auto_cast GetInstanceProcAddr(instance^, "vkCreateSemaphore");
	DestroySemaphore = auto_cast GetInstanceProcAddr(instance^, "vkDestroySemaphore");
	CreateEvent = auto_cast GetInstanceProcAddr(instance^, "vkCreateEvent");
	DestroyEvent = auto_cast GetInstanceProcAddr(instance^, "vkDestroyEvent");
	GetEventStatus = auto_cast GetInstanceProcAddr(instance^, "vkGetEventStatus");
	SetEvent = auto_cast GetInstanceProcAddr(instance^, "vkSetEvent");
	ResetEvent = auto_cast GetInstanceProcAddr(instance^, "vkResetEvent");
	CreateQueryPool = auto_cast GetInstanceProcAddr(instance^, "vkCreateQueryPool");
	DestroyQueryPool = auto_cast GetInstanceProcAddr(instance^, "vkDestroyQueryPool");
	GetQueryPoolResults = auto_cast GetInstanceProcAddr(instance^, "vkGetQueryPoolResults");
	CreateBuffer = auto_cast GetInstanceProcAddr(instance^, "vkCreateBuffer");
	DestroyBuffer = auto_cast GetInstanceProcAddr(instance^, "vkDestroyBuffer");
	CreateBufferView = auto_cast GetInstanceProcAddr(instance^, "vkCreateBufferView");
	DestroyBufferView = auto_cast GetInstanceProcAddr(instance^, "vkDestroyBufferView");
	CreateImage = auto_cast GetInstanceProcAddr(instance^, "vkCreateImage");
	DestroyImage = auto_cast GetInstanceProcAddr(instance^, "vkDestroyImage");
	GetImageSubresourceLayout = auto_cast GetInstanceProcAddr(instance^, "vkGetImageSubresourceLayout");
	CreateImageView = auto_cast GetInstanceProcAddr(instance^, "vkCreateImageView");
	DestroyImageView = auto_cast GetInstanceProcAddr(instance^, "vkDestroyImageView");
	CreateShaderModule = auto_cast GetInstanceProcAddr(instance^, "vkCreateShaderModule");
	DestroyShaderModule = auto_cast GetInstanceProcAddr(instance^, "vkDestroyShaderModule");
	CreatePipelineCache = auto_cast GetInstanceProcAddr(instance^, "vkCreatePipelineCache");
	DestroyPipelineCache = auto_cast GetInstanceProcAddr(instance^, "vkDestroyPipelineCache");
	GetPipelineCacheData = auto_cast GetInstanceProcAddr(instance^, "vkGetPipelineCacheData");
	MergePipelineCaches = auto_cast GetInstanceProcAddr(instance^, "vkMergePipelineCaches");
	CreateGraphicsPipelines = auto_cast GetInstanceProcAddr(instance^, "vkCreateGraphicsPipelines");
	CreateComputePipelines = auto_cast GetInstanceProcAddr(instance^, "vkCreateComputePipelines");
	DestroyPipeline = auto_cast GetInstanceProcAddr(instance^, "vkDestroyPipeline");
	CreatePipelineLayout = auto_cast GetInstanceProcAddr(instance^, "vkCreatePipelineLayout");
	DestroyPipelineLayout = auto_cast GetInstanceProcAddr(instance^, "vkDestroyPipelineLayout");
	CreateSampler = auto_cast GetInstanceProcAddr(instance^, "vkCreateSampler");
	DestroySampler = auto_cast GetInstanceProcAddr(instance^, "vkDestroySampler");
	CreateDescriptorSetLayout = auto_cast GetInstanceProcAddr(instance^, "vkCreateDescriptorSetLayout");
	DestroyDescriptorSetLayout = auto_cast GetInstanceProcAddr(instance^, "vkDestroyDescriptorSetLayout");
	CreateDescriptorPool = auto_cast GetInstanceProcAddr(instance^, "vkCreateDescriptorPool");
	DestroyDescriptorPool = auto_cast GetInstanceProcAddr(instance^, "vkDestroyDescriptorPool");
	ResetDescriptorPool = auto_cast GetInstanceProcAddr(instance^, "vkResetDescriptorPool");
	AllocateDescriptorSets = auto_cast GetInstanceProcAddr(instance^, "vkAllocateDescriptorSets");
	FreeDescriptorSets = auto_cast GetInstanceProcAddr(instance^, "vkFreeDescriptorSets");
	UpdateDescriptorSets = auto_cast GetInstanceProcAddr(instance^, "vkUpdateDescriptorSets");
	CreateFramebuffer = auto_cast GetInstanceProcAddr(instance^, "vkCreateFramebuffer");
	DestroyFramebuffer = auto_cast GetInstanceProcAddr(instance^, "vkDestroyFramebuffer");
	CreateRenderPass = auto_cast GetInstanceProcAddr(instance^, "vkCreateRenderPass");
	DestroyRenderPass = auto_cast GetInstanceProcAddr(instance^, "vkDestroyRenderPass");
	GetRenderAreaGranularity = auto_cast GetInstanceProcAddr(instance^, "vkGetRenderAreaGranularity");
	CreateCommandPool = auto_cast GetInstanceProcAddr(instance^, "vkCreateCommandPool");
	DestroyCommandPool = auto_cast GetInstanceProcAddr(instance^, "vkDestroyCommandPool");
	ResetCommandPool = auto_cast GetInstanceProcAddr(instance^, "vkResetCommandPool");
	AllocateCommandBuffers = auto_cast GetInstanceProcAddr(instance^, "vkAllocateCommandBuffers");
	FreeCommandBuffers = auto_cast GetInstanceProcAddr(instance^, "vkFreeCommandBuffers");
	BeginCommandBuffer = auto_cast GetInstanceProcAddr(instance^, "vkBeginCommandBuffer");
	EndCommandBuffer = auto_cast GetInstanceProcAddr(instance^, "vkEndCommandBuffer");
	ResetCommandBuffer = auto_cast GetInstanceProcAddr(instance^, "vkResetCommandBuffer");
	CmdBindPipeline = auto_cast GetInstanceProcAddr(instance^, "vkCmdBindPipeline");
	CmdSetViewport = auto_cast GetInstanceProcAddr(instance^, "vkCmdSetViewport");
	CmdSetScissor = auto_cast GetInstanceProcAddr(instance^, "vkCmdSetScissor");
	CmdSetLineWidth = auto_cast GetInstanceProcAddr(instance^, "vkCmdSetLineWidth");
	CmdSetDepthBias = auto_cast GetInstanceProcAddr(instance^, "vkCmdSetDepthBias");
	CmdSetBlendConstants = auto_cast GetInstanceProcAddr(instance^, "vkCmdSetBlendConstants");
	CmdSetDepthBounds = auto_cast GetInstanceProcAddr(instance^, "vkCmdSetDepthBounds");
	CmdSetStencilCompareMask = auto_cast GetInstanceProcAddr(instance^, "vkCmdSetStencilCompareMask");
	CmdSetStencilWriteMask = auto_cast GetInstanceProcAddr(instance^, "vkCmdSetStencilWriteMask");
	CmdSetStencilReference = auto_cast GetInstanceProcAddr(instance^, "vkCmdSetStencilReference");
	CmdBindDescriptorSets = auto_cast GetInstanceProcAddr(instance^, "vkCmdBindDescriptorSets");
	CmdBindIndexBuffer = auto_cast GetInstanceProcAddr(instance^, "vkCmdBindIndexBuffer");
	CmdBindVertexBuffers = auto_cast GetInstanceProcAddr(instance^, "vkCmdBindVertexBuffers");
	CmdDraw = auto_cast GetInstanceProcAddr(instance^, "vkCmdDraw");
	CmdDrawIndexed = auto_cast GetInstanceProcAddr(instance^, "vkCmdDrawIndexed");
	CmdDrawIndirect = auto_cast GetInstanceProcAddr(instance^, "vkCmdDrawIndirect");
	CmdDrawIndexedIndirect = auto_cast GetInstanceProcAddr(instance^, "vkCmdDrawIndexedIndirect");
	CmdDispatch = auto_cast GetInstanceProcAddr(instance^, "vkCmdDispatch");
	CmdDispatchIndirect = auto_cast GetInstanceProcAddr(instance^, "vkCmdDispatchIndirect");
	CmdCopyBuffer = auto_cast GetInstanceProcAddr(instance^, "vkCmdCopyBuffer");
	CmdCopyImage = auto_cast GetInstanceProcAddr(instance^, "vkCmdCopyImage");
	CmdBlitImage = auto_cast GetInstanceProcAddr(instance^, "vkCmdBlitImage");
	CmdCopyBufferToImage = auto_cast GetInstanceProcAddr(instance^, "vkCmdCopyBufferToImage");
	CmdCopyImageToBuffer = auto_cast GetInstanceProcAddr(instance^, "vkCmdCopyImageToBuffer");
	CmdUpdateBuffer = auto_cast GetInstanceProcAddr(instance^, "vkCmdUpdateBuffer");
	CmdFillBuffer = auto_cast GetInstanceProcAddr(instance^, "vkCmdFillBuffer");
	CmdClearColorImage = auto_cast GetInstanceProcAddr(instance^, "vkCmdClearColorImage");
	CmdClearDepthStencilImage = auto_cast GetInstanceProcAddr(instance^, "vkCmdClearDepthStencilImage");
	CmdClearAttachments = auto_cast GetInstanceProcAddr(instance^, "vkCmdClearAttachments");
	CmdResolveImage = auto_cast GetInstanceProcAddr(instance^, "vkCmdResolveImage");
	CmdSetEvent = auto_cast GetInstanceProcAddr(instance^, "vkCmdSetEvent");
	CmdResetEvent = auto_cast GetInstanceProcAddr(instance^, "vkCmdResetEvent");
	CmdWaitEvents = auto_cast GetInstanceProcAddr(instance^, "vkCmdWaitEvents");
	CmdPipelineBarrier = auto_cast GetInstanceProcAddr(instance^, "vkCmdPipelineBarrier");
	CmdBeginQuery = auto_cast GetInstanceProcAddr(instance^, "vkCmdBeginQuery");
	CmdEndQuery = auto_cast GetInstanceProcAddr(instance^, "vkCmdEndQuery");
	CmdResetQueryPool = auto_cast GetInstanceProcAddr(instance^, "vkCmdResetQueryPool");
	CmdWriteTimestamp = auto_cast GetInstanceProcAddr(instance^, "vkCmdWriteTimestamp");
	CmdCopyQueryPoolResults = auto_cast GetInstanceProcAddr(instance^, "vkCmdCopyQueryPoolResults");
	CmdPushConstants = auto_cast GetInstanceProcAddr(instance^, "vkCmdPushConstants");
	CmdBeginRenderPass = auto_cast GetInstanceProcAddr(instance^, "vkCmdBeginRenderPass");
	CmdNextSubpass = auto_cast GetInstanceProcAddr(instance^, "vkCmdNextSubpass");
	CmdEndRenderPass = auto_cast GetInstanceProcAddr(instance^, "vkCmdEndRenderPass");
	CmdExecuteCommands = auto_cast GetInstanceProcAddr(instance^, "vkCmdExecuteCommands");
	BindBufferMemory2 = auto_cast GetInstanceProcAddr(instance^, "vkBindBufferMemory2");
	BindImageMemory2 = auto_cast GetInstanceProcAddr(instance^, "vkBindImageMemory2");
	GetDeviceGroupPeerMemoryFeatures = auto_cast GetInstanceProcAddr(instance^, "vkGetDeviceGroupPeerMemoryFeatures");
	CmdSetDeviceMask = auto_cast GetInstanceProcAddr(instance^, "vkCmdSetDeviceMask");
	CmdDispatchBase = auto_cast GetInstanceProcAddr(instance^, "vkCmdDispatchBase");
	GetImageMemoryRequirements2 = auto_cast GetInstanceProcAddr(instance^, "vkGetImageMemoryRequirements2");
	GetBufferMemoryRequirements2 = auto_cast GetInstanceProcAddr(instance^, "vkGetBufferMemoryRequirements2");
	GetImageSparseMemoryRequirements2 = auto_cast GetInstanceProcAddr(instance^, "vkGetImageSparseMemoryRequirements2");
	TrimCommandPool = auto_cast GetInstanceProcAddr(instance^, "vkTrimCommandPool");
	GetDeviceQueue2 = auto_cast GetInstanceProcAddr(instance^, "vkGetDeviceQueue2");
	CreateSamplerYcbcrConversion = auto_cast GetInstanceProcAddr(instance^, "vkCreateSamplerYcbcrConversion");
	DestroySamplerYcbcrConversion = auto_cast GetInstanceProcAddr(instance^, "vkDestroySamplerYcbcrConversion");
	CreateDescriptorUpdateTemplate = auto_cast GetInstanceProcAddr(instance^, "vkCreateDescriptorUpdateTemplate");
	DestroyDescriptorUpdateTemplate = auto_cast GetInstanceProcAddr(instance^, "vkDestroyDescriptorUpdateTemplate");
	UpdateDescriptorSetWithTemplate = auto_cast GetInstanceProcAddr(instance^, "vkUpdateDescriptorSetWithTemplate");
	GetDescriptorSetLayoutSupport = auto_cast GetInstanceProcAddr(instance^, "vkGetDescriptorSetLayoutSupport");
	CmdDrawIndirectCount = auto_cast GetInstanceProcAddr(instance^, "vkCmdDrawIndirectCount");
	CmdDrawIndexedIndirectCount = auto_cast GetInstanceProcAddr(instance^, "vkCmdDrawIndexedIndirectCount");
	CreateRenderPass2 = auto_cast GetInstanceProcAddr(instance^, "vkCreateRenderPass2");
	CmdBeginRenderPass2 = auto_cast GetInstanceProcAddr(instance^, "vkCmdBeginRenderPass2");
	CmdNextSubpass2 = auto_cast GetInstanceProcAddr(instance^, "vkCmdNextSubpass2");
	CmdEndRenderPass2 = auto_cast GetInstanceProcAddr(instance^, "vkCmdEndRenderPass2");
	ResetQueryPool = auto_cast GetInstanceProcAddr(instance^, "vkResetQueryPool");
	GetSemaphoreCounterValue = auto_cast GetInstanceProcAddr(instance^, "vkGetSemaphoreCounterValue");
	WaitSemaphores = auto_cast GetInstanceProcAddr(instance^, "vkWaitSemaphores");
	SignalSemaphore = auto_cast GetInstanceProcAddr(instance^, "vkSignalSemaphore");
	GetBufferDeviceAddress = auto_cast GetInstanceProcAddr(instance^, "vkGetBufferDeviceAddress");
	GetBufferOpaqueCaptureAddress = auto_cast GetInstanceProcAddr(instance^, "vkGetBufferOpaqueCaptureAddress");
	GetDeviceMemoryOpaqueCaptureAddress = auto_cast GetInstanceProcAddr(instance^, "vkGetDeviceMemoryOpaqueCaptureAddress");
	CreateSwapchainKHR = auto_cast GetInstanceProcAddr(instance^, "vkCreateSwapchainKHR");
	DestroySwapchainKHR = auto_cast GetInstanceProcAddr(instance^, "vkDestroySwapchainKHR");
	GetSwapchainImagesKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetSwapchainImagesKHR");
	AcquireNextImageKHR = auto_cast GetInstanceProcAddr(instance^, "vkAcquireNextImageKHR");
	QueuePresentKHR = auto_cast GetInstanceProcAddr(instance^, "vkQueuePresentKHR");
	GetDeviceGroupPresentCapabilitiesKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetDeviceGroupPresentCapabilitiesKHR");
	GetDeviceGroupSurfacePresentModesKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetDeviceGroupSurfacePresentModesKHR");
	AcquireNextImage2KHR = auto_cast GetInstanceProcAddr(instance^, "vkAcquireNextImage2KHR");
	CreateSharedSwapchainsKHR = auto_cast GetInstanceProcAddr(instance^, "vkCreateSharedSwapchainsKHR");
	GetDeviceGroupPeerMemoryFeaturesKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetDeviceGroupPeerMemoryFeaturesKHR");
	CmdSetDeviceMaskKHR = auto_cast GetInstanceProcAddr(instance^, "vkCmdSetDeviceMaskKHR");
	CmdDispatchBaseKHR = auto_cast GetInstanceProcAddr(instance^, "vkCmdDispatchBaseKHR");
	TrimCommandPoolKHR = auto_cast GetInstanceProcAddr(instance^, "vkTrimCommandPoolKHR");
	GetMemoryFdKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetMemoryFdKHR");
	GetMemoryFdPropertiesKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetMemoryFdPropertiesKHR");
	ImportSemaphoreFdKHR = auto_cast GetInstanceProcAddr(instance^, "vkImportSemaphoreFdKHR");
	GetSemaphoreFdKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetSemaphoreFdKHR");
	CmdPushDescriptorSetKHR = auto_cast GetInstanceProcAddr(instance^, "vkCmdPushDescriptorSetKHR");
	CmdPushDescriptorSetWithTemplateKHR = auto_cast GetInstanceProcAddr(instance^, "vkCmdPushDescriptorSetWithTemplateKHR");
	CreateDescriptorUpdateTemplateKHR = auto_cast GetInstanceProcAddr(instance^, "vkCreateDescriptorUpdateTemplateKHR");
	DestroyDescriptorUpdateTemplateKHR = auto_cast GetInstanceProcAddr(instance^, "vkDestroyDescriptorUpdateTemplateKHR");
	UpdateDescriptorSetWithTemplateKHR = auto_cast GetInstanceProcAddr(instance^, "vkUpdateDescriptorSetWithTemplateKHR");
	CreateRenderPass2KHR = auto_cast GetInstanceProcAddr(instance^, "vkCreateRenderPass2KHR");
	CmdBeginRenderPass2KHR = auto_cast GetInstanceProcAddr(instance^, "vkCmdBeginRenderPass2KHR");
	CmdNextSubpass2KHR = auto_cast GetInstanceProcAddr(instance^, "vkCmdNextSubpass2KHR");
	CmdEndRenderPass2KHR = auto_cast GetInstanceProcAddr(instance^, "vkCmdEndRenderPass2KHR");
	GetSwapchainStatusKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetSwapchainStatusKHR");
	ImportFenceFdKHR = auto_cast GetInstanceProcAddr(instance^, "vkImportFenceFdKHR");
	GetFenceFdKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetFenceFdKHR");
	AcquireProfilingLockKHR = auto_cast GetInstanceProcAddr(instance^, "vkAcquireProfilingLockKHR");
	ReleaseProfilingLockKHR = auto_cast GetInstanceProcAddr(instance^, "vkReleaseProfilingLockKHR");
	GetImageMemoryRequirements2KHR = auto_cast GetInstanceProcAddr(instance^, "vkGetImageMemoryRequirements2KHR");
	GetBufferMemoryRequirements2KHR = auto_cast GetInstanceProcAddr(instance^, "vkGetBufferMemoryRequirements2KHR");
	GetImageSparseMemoryRequirements2KHR = auto_cast GetInstanceProcAddr(instance^, "vkGetImageSparseMemoryRequirements2KHR");
	CreateSamplerYcbcrConversionKHR = auto_cast GetInstanceProcAddr(instance^, "vkCreateSamplerYcbcrConversionKHR");
	DestroySamplerYcbcrConversionKHR = auto_cast GetInstanceProcAddr(instance^, "vkDestroySamplerYcbcrConversionKHR");
	BindBufferMemory2KHR = auto_cast GetInstanceProcAddr(instance^, "vkBindBufferMemory2KHR");
	BindImageMemory2KHR = auto_cast GetInstanceProcAddr(instance^, "vkBindImageMemory2KHR");
	GetDescriptorSetLayoutSupportKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetDescriptorSetLayoutSupportKHR");
	CmdDrawIndirectCountKHR = auto_cast GetInstanceProcAddr(instance^, "vkCmdDrawIndirectCountKHR");
	CmdDrawIndexedIndirectCountKHR = auto_cast GetInstanceProcAddr(instance^, "vkCmdDrawIndexedIndirectCountKHR");
	GetSemaphoreCounterValueKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetSemaphoreCounterValueKHR");
	WaitSemaphoresKHR = auto_cast GetInstanceProcAddr(instance^, "vkWaitSemaphoresKHR");
	SignalSemaphoreKHR = auto_cast GetInstanceProcAddr(instance^, "vkSignalSemaphoreKHR");
	CmdSetFragmentShadingRateKHR = auto_cast GetInstanceProcAddr(instance^, "vkCmdSetFragmentShadingRateKHR");
	GetBufferDeviceAddressKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetBufferDeviceAddressKHR");
	GetBufferOpaqueCaptureAddressKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetBufferOpaqueCaptureAddressKHR");
	GetDeviceMemoryOpaqueCaptureAddressKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetDeviceMemoryOpaqueCaptureAddressKHR");
	CreateDeferredOperationKHR = auto_cast GetInstanceProcAddr(instance^, "vkCreateDeferredOperationKHR");
	DestroyDeferredOperationKHR = auto_cast GetInstanceProcAddr(instance^, "vkDestroyDeferredOperationKHR");
	GetDeferredOperationMaxConcurrencyKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetDeferredOperationMaxConcurrencyKHR");
	GetDeferredOperationResultKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetDeferredOperationResultKHR");
	DeferredOperationJoinKHR = auto_cast GetInstanceProcAddr(instance^, "vkDeferredOperationJoinKHR");
	GetPipelineExecutablePropertiesKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetPipelineExecutablePropertiesKHR");
	GetPipelineExecutableStatisticsKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetPipelineExecutableStatisticsKHR");
	GetPipelineExecutableInternalRepresentationsKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetPipelineExecutableInternalRepresentationsKHR");
	CmdCopyBuffer2KHR = auto_cast GetInstanceProcAddr(instance^, "vkCmdCopyBuffer2KHR");
	CmdCopyImage2KHR = auto_cast GetInstanceProcAddr(instance^, "vkCmdCopyImage2KHR");
	CmdCopyBufferToImage2KHR = auto_cast GetInstanceProcAddr(instance^, "vkCmdCopyBufferToImage2KHR");
	CmdCopyImageToBuffer2KHR = auto_cast GetInstanceProcAddr(instance^, "vkCmdCopyImageToBuffer2KHR");
	CmdBlitImage2KHR = auto_cast GetInstanceProcAddr(instance^, "vkCmdBlitImage2KHR");
	CmdResolveImage2KHR = auto_cast GetInstanceProcAddr(instance^, "vkCmdResolveImage2KHR");
	DebugMarkerSetObjectTagEXT = auto_cast GetInstanceProcAddr(instance^, "vkDebugMarkerSetObjectTagEXT");
	DebugMarkerSetObjectNameEXT = auto_cast GetInstanceProcAddr(instance^, "vkDebugMarkerSetObjectNameEXT");
	CmdDebugMarkerBeginEXT = auto_cast GetInstanceProcAddr(instance^, "vkCmdDebugMarkerBeginEXT");
	CmdDebugMarkerEndEXT = auto_cast GetInstanceProcAddr(instance^, "vkCmdDebugMarkerEndEXT");
	CmdDebugMarkerInsertEXT = auto_cast GetInstanceProcAddr(instance^, "vkCmdDebugMarkerInsertEXT");
	CmdBindTransformFeedbackBuffersEXT = auto_cast GetInstanceProcAddr(instance^, "vkCmdBindTransformFeedbackBuffersEXT");
	CmdBeginTransformFeedbackEXT = auto_cast GetInstanceProcAddr(instance^, "vkCmdBeginTransformFeedbackEXT");
	CmdEndTransformFeedbackEXT = auto_cast GetInstanceProcAddr(instance^, "vkCmdEndTransformFeedbackEXT");
	CmdBeginQueryIndexedEXT = auto_cast GetInstanceProcAddr(instance^, "vkCmdBeginQueryIndexedEXT");
	CmdEndQueryIndexedEXT = auto_cast GetInstanceProcAddr(instance^, "vkCmdEndQueryIndexedEXT");
	CmdDrawIndirectByteCountEXT = auto_cast GetInstanceProcAddr(instance^, "vkCmdDrawIndirectByteCountEXT");
	GetImageViewHandleNVX = auto_cast GetInstanceProcAddr(instance^, "vkGetImageViewHandleNVX");
	GetImageViewAddressNVX = auto_cast GetInstanceProcAddr(instance^, "vkGetImageViewAddressNVX");
	CmdDrawIndirectCountAMD = auto_cast GetInstanceProcAddr(instance^, "vkCmdDrawIndirectCountAMD");
	CmdDrawIndexedIndirectCountAMD = auto_cast GetInstanceProcAddr(instance^, "vkCmdDrawIndexedIndirectCountAMD");
	GetShaderInfoAMD = auto_cast GetInstanceProcAddr(instance^, "vkGetShaderInfoAMD");
	CmdBeginConditionalRenderingEXT = auto_cast GetInstanceProcAddr(instance^, "vkCmdBeginConditionalRenderingEXT");
	CmdEndConditionalRenderingEXT = auto_cast GetInstanceProcAddr(instance^, "vkCmdEndConditionalRenderingEXT");
	CmdSetViewportWScalingNV = auto_cast GetInstanceProcAddr(instance^, "vkCmdSetViewportWScalingNV");
	DisplayPowerControlEXT = auto_cast GetInstanceProcAddr(instance^, "vkDisplayPowerControlEXT");
	RegisterDeviceEventEXT = auto_cast GetInstanceProcAddr(instance^, "vkRegisterDeviceEventEXT");
	RegisterDisplayEventEXT = auto_cast GetInstanceProcAddr(instance^, "vkRegisterDisplayEventEXT");
	GetSwapchainCounterEXT = auto_cast GetInstanceProcAddr(instance^, "vkGetSwapchainCounterEXT");
	GetRefreshCycleDurationGOOGLE = auto_cast GetInstanceProcAddr(instance^, "vkGetRefreshCycleDurationGOOGLE");
	GetPastPresentationTimingGOOGLE = auto_cast GetInstanceProcAddr(instance^, "vkGetPastPresentationTimingGOOGLE");
	CmdSetDiscardRectangleEXT = auto_cast GetInstanceProcAddr(instance^, "vkCmdSetDiscardRectangleEXT");
	SetHdrMetadataEXT = auto_cast GetInstanceProcAddr(instance^, "vkSetHdrMetadataEXT");
	SetDebugUtilsObjectNameEXT = auto_cast GetInstanceProcAddr(instance^, "vkSetDebugUtilsObjectNameEXT");
	SetDebugUtilsObjectTagEXT = auto_cast GetInstanceProcAddr(instance^, "vkSetDebugUtilsObjectTagEXT");
	QueueBeginDebugUtilsLabelEXT = auto_cast GetInstanceProcAddr(instance^, "vkQueueBeginDebugUtilsLabelEXT");
	QueueEndDebugUtilsLabelEXT = auto_cast GetInstanceProcAddr(instance^, "vkQueueEndDebugUtilsLabelEXT");
	QueueInsertDebugUtilsLabelEXT = auto_cast GetInstanceProcAddr(instance^, "vkQueueInsertDebugUtilsLabelEXT");
	CmdBeginDebugUtilsLabelEXT = auto_cast GetInstanceProcAddr(instance^, "vkCmdBeginDebugUtilsLabelEXT");
	CmdEndDebugUtilsLabelEXT = auto_cast GetInstanceProcAddr(instance^, "vkCmdEndDebugUtilsLabelEXT");
	CmdInsertDebugUtilsLabelEXT = auto_cast GetInstanceProcAddr(instance^, "vkCmdInsertDebugUtilsLabelEXT");
	CmdSetSampleLocationsEXT = auto_cast GetInstanceProcAddr(instance^, "vkCmdSetSampleLocationsEXT");
	GetImageDrmFormatModifierPropertiesEXT = auto_cast GetInstanceProcAddr(instance^, "vkGetImageDrmFormatModifierPropertiesEXT");
	CreateValidationCacheEXT = auto_cast GetInstanceProcAddr(instance^, "vkCreateValidationCacheEXT");
	DestroyValidationCacheEXT = auto_cast GetInstanceProcAddr(instance^, "vkDestroyValidationCacheEXT");
	MergeValidationCachesEXT = auto_cast GetInstanceProcAddr(instance^, "vkMergeValidationCachesEXT");
	GetValidationCacheDataEXT = auto_cast GetInstanceProcAddr(instance^, "vkGetValidationCacheDataEXT");
	CmdBindShadingRateImageNV = auto_cast GetInstanceProcAddr(instance^, "vkCmdBindShadingRateImageNV");
	CmdSetViewportShadingRatePaletteNV = auto_cast GetInstanceProcAddr(instance^, "vkCmdSetViewportShadingRatePaletteNV");
	CmdSetCoarseSampleOrderNV = auto_cast GetInstanceProcAddr(instance^, "vkCmdSetCoarseSampleOrderNV");
	CreateAccelerationStructureNV = auto_cast GetInstanceProcAddr(instance^, "vkCreateAccelerationStructureNV");
	DestroyAccelerationStructureNV = auto_cast GetInstanceProcAddr(instance^, "vkDestroyAccelerationStructureNV");
	GetAccelerationStructureMemoryRequirementsNV = auto_cast GetInstanceProcAddr(instance^, "vkGetAccelerationStructureMemoryRequirementsNV");
	BindAccelerationStructureMemoryNV = auto_cast GetInstanceProcAddr(instance^, "vkBindAccelerationStructureMemoryNV");
	CmdBuildAccelerationStructureNV = auto_cast GetInstanceProcAddr(instance^, "vkCmdBuildAccelerationStructureNV");
	CmdCopyAccelerationStructureNV = auto_cast GetInstanceProcAddr(instance^, "vkCmdCopyAccelerationStructureNV");
	CmdTraceRaysNV = auto_cast GetInstanceProcAddr(instance^, "vkCmdTraceRaysNV");
	CreateRayTracingPipelinesNV = auto_cast GetInstanceProcAddr(instance^, "vkCreateRayTracingPipelinesNV");
	GetRayTracingShaderGroupHandlesKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetRayTracingShaderGroupHandlesKHR");
	GetRayTracingShaderGroupHandlesNV = auto_cast GetInstanceProcAddr(instance^, "vkGetRayTracingShaderGroupHandlesNV");
	GetAccelerationStructureHandleNV = auto_cast GetInstanceProcAddr(instance^, "vkGetAccelerationStructureHandleNV");
	CmdWriteAccelerationStructuresPropertiesNV = auto_cast GetInstanceProcAddr(instance^, "vkCmdWriteAccelerationStructuresPropertiesNV");
	CompileDeferredNV = auto_cast GetInstanceProcAddr(instance^, "vkCompileDeferredNV");
	GetMemoryHostPointerPropertiesEXT = auto_cast GetInstanceProcAddr(instance^, "vkGetMemoryHostPointerPropertiesEXT");
	CmdWriteBufferMarkerAMD = auto_cast GetInstanceProcAddr(instance^, "vkCmdWriteBufferMarkerAMD");
	GetCalibratedTimestampsEXT = auto_cast GetInstanceProcAddr(instance^, "vkGetCalibratedTimestampsEXT");
	CmdDrawMeshTasksNV = auto_cast GetInstanceProcAddr(instance^, "vkCmdDrawMeshTasksNV");
	CmdDrawMeshTasksIndirectNV = auto_cast GetInstanceProcAddr(instance^, "vkCmdDrawMeshTasksIndirectNV");
	CmdDrawMeshTasksIndirectCountNV = auto_cast GetInstanceProcAddr(instance^, "vkCmdDrawMeshTasksIndirectCountNV");
	CmdSetExclusiveScissorNV = auto_cast GetInstanceProcAddr(instance^, "vkCmdSetExclusiveScissorNV");
	CmdSetCheckpointNV = auto_cast GetInstanceProcAddr(instance^, "vkCmdSetCheckpointNV");
	GetQueueCheckpointDataNV = auto_cast GetInstanceProcAddr(instance^, "vkGetQueueCheckpointDataNV");
	InitializePerformanceApiINTEL = auto_cast GetInstanceProcAddr(instance^, "vkInitializePerformanceApiINTEL");
	UninitializePerformanceApiINTEL = auto_cast GetInstanceProcAddr(instance^, "vkUninitializePerformanceApiINTEL");
	CmdSetPerformanceMarkerINTEL = auto_cast GetInstanceProcAddr(instance^, "vkCmdSetPerformanceMarkerINTEL");
	CmdSetPerformanceStreamMarkerINTEL = auto_cast GetInstanceProcAddr(instance^, "vkCmdSetPerformanceStreamMarkerINTEL");
	CmdSetPerformanceOverrideINTEL = auto_cast GetInstanceProcAddr(instance^, "vkCmdSetPerformanceOverrideINTEL");
	AcquirePerformanceConfigurationINTEL = auto_cast GetInstanceProcAddr(instance^, "vkAcquirePerformanceConfigurationINTEL");
	ReleasePerformanceConfigurationINTEL = auto_cast GetInstanceProcAddr(instance^, "vkReleasePerformanceConfigurationINTEL");
	QueueSetPerformanceConfigurationINTEL = auto_cast GetInstanceProcAddr(instance^, "vkQueueSetPerformanceConfigurationINTEL");
	GetPerformanceParameterINTEL = auto_cast GetInstanceProcAddr(instance^, "vkGetPerformanceParameterINTEL");
	SetLocalDimmingAMD = auto_cast GetInstanceProcAddr(instance^, "vkSetLocalDimmingAMD");
	GetBufferDeviceAddressEXT = auto_cast GetInstanceProcAddr(instance^, "vkGetBufferDeviceAddressEXT");
	CmdSetLineStippleEXT = auto_cast GetInstanceProcAddr(instance^, "vkCmdSetLineStippleEXT");
	ResetQueryPoolEXT = auto_cast GetInstanceProcAddr(instance^, "vkResetQueryPoolEXT");
	CmdSetCullModeEXT = auto_cast GetInstanceProcAddr(instance^, "vkCmdSetCullModeEXT");
	CmdSetFrontFaceEXT = auto_cast GetInstanceProcAddr(instance^, "vkCmdSetFrontFaceEXT");
	CmdSetPrimitiveTopologyEXT = auto_cast GetInstanceProcAddr(instance^, "vkCmdSetPrimitiveTopologyEXT");
	CmdSetViewportWithCountEXT = auto_cast GetInstanceProcAddr(instance^, "vkCmdSetViewportWithCountEXT");
	CmdSetScissorWithCountEXT = auto_cast GetInstanceProcAddr(instance^, "vkCmdSetScissorWithCountEXT");
	CmdBindVertexBuffers2EXT = auto_cast GetInstanceProcAddr(instance^, "vkCmdBindVertexBuffers2EXT");
	CmdSetDepthTestEnableEXT = auto_cast GetInstanceProcAddr(instance^, "vkCmdSetDepthTestEnableEXT");
	CmdSetDepthWriteEnableEXT = auto_cast GetInstanceProcAddr(instance^, "vkCmdSetDepthWriteEnableEXT");
	CmdSetDepthCompareOpEXT = auto_cast GetInstanceProcAddr(instance^, "vkCmdSetDepthCompareOpEXT");
	CmdSetDepthBoundsTestEnableEXT = auto_cast GetInstanceProcAddr(instance^, "vkCmdSetDepthBoundsTestEnableEXT");
	CmdSetStencilTestEnableEXT = auto_cast GetInstanceProcAddr(instance^, "vkCmdSetStencilTestEnableEXT");
	CmdSetStencilOpEXT = auto_cast GetInstanceProcAddr(instance^, "vkCmdSetStencilOpEXT");
	GetGeneratedCommandsMemoryRequirementsNV = auto_cast GetInstanceProcAddr(instance^, "vkGetGeneratedCommandsMemoryRequirementsNV");
	CmdPreprocessGeneratedCommandsNV = auto_cast GetInstanceProcAddr(instance^, "vkCmdPreprocessGeneratedCommandsNV");
	CmdExecuteGeneratedCommandsNV = auto_cast GetInstanceProcAddr(instance^, "vkCmdExecuteGeneratedCommandsNV");
	CmdBindPipelineShaderGroupNV = auto_cast GetInstanceProcAddr(instance^, "vkCmdBindPipelineShaderGroupNV");
	CreateIndirectCommandsLayoutNV = auto_cast GetInstanceProcAddr(instance^, "vkCreateIndirectCommandsLayoutNV");
	DestroyIndirectCommandsLayoutNV = auto_cast GetInstanceProcAddr(instance^, "vkDestroyIndirectCommandsLayoutNV");
	CreatePrivateDataSlotEXT = auto_cast GetInstanceProcAddr(instance^, "vkCreatePrivateDataSlotEXT");
	DestroyPrivateDataSlotEXT = auto_cast GetInstanceProcAddr(instance^, "vkDestroyPrivateDataSlotEXT");
	SetPrivateDataEXT = auto_cast GetInstanceProcAddr(instance^, "vkSetPrivateDataEXT");
	GetPrivateDataEXT = auto_cast GetInstanceProcAddr(instance^, "vkGetPrivateDataEXT");
	CmdSetFragmentShadingRateEnumNV = auto_cast GetInstanceProcAddr(instance^, "vkCmdSetFragmentShadingRateEnumNV");
	CreateAccelerationStructureKHR = auto_cast GetInstanceProcAddr(instance^, "vkCreateAccelerationStructureKHR");
	DestroyAccelerationStructureKHR = auto_cast GetInstanceProcAddr(instance^, "vkDestroyAccelerationStructureKHR");
	CmdBuildAccelerationStructuresKHR = auto_cast GetInstanceProcAddr(instance^, "vkCmdBuildAccelerationStructuresKHR");
	CmdBuildAccelerationStructuresIndirectKHR = auto_cast GetInstanceProcAddr(instance^, "vkCmdBuildAccelerationStructuresIndirectKHR");
	BuildAccelerationStructuresKHR = auto_cast GetInstanceProcAddr(instance^, "vkBuildAccelerationStructuresKHR");
	CopyAccelerationStructureKHR = auto_cast GetInstanceProcAddr(instance^, "vkCopyAccelerationStructureKHR");
	CopyAccelerationStructureToMemoryKHR = auto_cast GetInstanceProcAddr(instance^, "vkCopyAccelerationStructureToMemoryKHR");
	CopyMemoryToAccelerationStructureKHR = auto_cast GetInstanceProcAddr(instance^, "vkCopyMemoryToAccelerationStructureKHR");
	WriteAccelerationStructuresPropertiesKHR = auto_cast GetInstanceProcAddr(instance^, "vkWriteAccelerationStructuresPropertiesKHR");
	CmdCopyAccelerationStructureKHR = auto_cast GetInstanceProcAddr(instance^, "vkCmdCopyAccelerationStructureKHR");
	CmdCopyAccelerationStructureToMemoryKHR = auto_cast GetInstanceProcAddr(instance^, "vkCmdCopyAccelerationStructureToMemoryKHR");
	CmdCopyMemoryToAccelerationStructureKHR = auto_cast GetInstanceProcAddr(instance^, "vkCmdCopyMemoryToAccelerationStructureKHR");
	GetAccelerationStructureDeviceAddressKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetAccelerationStructureDeviceAddressKHR");
	CmdWriteAccelerationStructuresPropertiesKHR = auto_cast GetInstanceProcAddr(instance^, "vkCmdWriteAccelerationStructuresPropertiesKHR");
	GetDeviceAccelerationStructureCompatibilityKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetDeviceAccelerationStructureCompatibilityKHR");
	GetAccelerationStructureBuildSizesKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetAccelerationStructureBuildSizesKHR");
	CmdTraceRaysKHR = auto_cast GetInstanceProcAddr(instance^, "vkCmdTraceRaysKHR");
	CreateRayTracingPipelinesKHR = auto_cast GetInstanceProcAddr(instance^, "vkCreateRayTracingPipelinesKHR");
	GetRayTracingCaptureReplayShaderGroupHandlesKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR");
	CmdTraceRaysIndirectKHR = auto_cast GetInstanceProcAddr(instance^, "vkCmdTraceRaysIndirectKHR");
	GetRayTracingShaderGroupStackSizeKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetRayTracingShaderGroupStackSizeKHR");
	CmdSetRayTracingPipelineStackSizeKHR = auto_cast GetInstanceProcAddr(instance^, "vkCmdSetRayTracingPipelineStackSizeKHR");
	GetMemoryWin32HandleKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetMemoryWin32HandleKHR");
	GetMemoryWin32HandlePropertiesKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetMemoryWin32HandlePropertiesKHR");
	ImportSemaphoreWin32HandleKHR = auto_cast GetInstanceProcAddr(instance^, "vkImportSemaphoreWin32HandleKHR");
	GetSemaphoreWin32HandleKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetSemaphoreWin32HandleKHR");
	ImportFenceWin32HandleKHR = auto_cast GetInstanceProcAddr(instance^, "vkImportFenceWin32HandleKHR");
	GetFenceWin32HandleKHR = auto_cast GetInstanceProcAddr(instance^, "vkGetFenceWin32HandleKHR");
	GetMemoryWin32HandleNV = auto_cast GetInstanceProcAddr(instance^, "vkGetMemoryWin32HandleNV");
	AcquireFullScreenExclusiveModeEXT = auto_cast GetInstanceProcAddr(instance^, "vkAcquireFullScreenExclusiveModeEXT");
	ReleaseFullScreenExclusiveModeEXT = auto_cast GetInstanceProcAddr(instance^, "vkReleaseFullScreenExclusiveModeEXT");
	GetDeviceGroupSurfacePresentModes2EXT = auto_cast GetInstanceProcAddr(instance^, "vkGetDeviceGroupSurfacePresentModes2EXT");
}


